Code,JavaDoc,Package
"@Nonnull
        public Modal build()
        {
            Checks.check(!components.isEmpty(), ""Cannot make a modal without components!"");
            Checks.check(components.size() <= MAX_COMPONENTS, ""Cannot make a modal with more than 5 components!"");

            return new ModalImpl(id, title, components);
        }","/**
         * Builds and returns the {@link Modal}
         *
         * @throws IllegalArgumentException
         *         <ul>
         *             <li>If no components are added</li>
         *             <li>If more than {@value MAX_COMPONENTS} component layouts are added</li>
         *         </ul>
         *
         * @return A Modal
         */",net.dv8tion.jda.api.interactions.modals
"public static Snowflake of(final Instant timestamp) {
        return of((timestamp.toEpochMilli() - DISCORD_EPOCH) << 22);
    }","/**
     * Constructs a {@code Snowflake} utilizing a timestamp. The constructed {@code Snowflake} is only guaranteed to
     * contain accurate information about its {@link #getTimestamp() timestamp}; the other portions are undefined.
     *
     * @param timestamp The timestamp to construct a {@code Snowflake}. Must be non-null.
     * @return A constructed {@code Snowflake} with the timestamp.
     */",discord4j.common.util
boolean isMentionRepliedUser();,"/**
     * Whether this message would mention a user, if it is sent as a reply.
     *
     * @return True, if this would mention with the reply
     */",net.dv8tion.jda.api.utils.messages
"public UnknownChannel(final GatewayDiscordClient gateway, final ChannelData data) {
        super(gateway, data);
    }","/**
     * Constructs an {@code UnknownChannel} with an associated {@link GatewayDiscordClient} and Discord data.
     *
     * @param gateway The {@link GatewayDiscordClient} associated to this object, must be non-null.
     * @param data The raw data as represented by Discord, must be non-null.
     */",discord4j.core.object.entity.channel
"public int getTypeRaw()
    {
        return rawType;
    }","/**
     * The raw type value used to derive {@link #getType()}.
     * <br>This can be used when a new action type is not yet supported by JDA.
     *
     * @return The raw type value
     */",net.dv8tion.jda.api.audit
"public LegacyMessageEditSpec removeEmbeds() {
        this.embeds = Possible.of(Optional.empty());
        return this;
    }","/**
     * Removes all of the embeds on the message.
     *
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nullable
    public ThreadMember getThreadMember()
    {
        return threadMember;
    }","/**
     * The {@link ThreadMember} of the event that has been fired.
     *
     * @return The {@link ThreadMember} of the event that has been fired.
     */",net.dv8tion.jda.api.events.thread.member
"@Nullable
        @Override
        public synchronized T provide(int shardId)
        {
            return pool;
        }","/**
         * Provides the initialized pool or the temporary pool if not initialized yet.
         *
         * @param  shardId
         *         The current shard id
         *
         * @return The thread pool instance
         */",net.dv8tion.jda.api.sharding
"@Override
	public Credential findByUsername(final String username) {
		return this.rep.findByUsername(username).orElseThrow(() -> new UsernameNotFoundException(""###### NO Credential object FOUND with username: "" + username + "" ! ######""));
	}","/**
	 * @param username
	 * @return a userCredential instance
	 */",com.pfa.app.service.impl
"@Nullable
    public OffsetDateTime getOldEndTime()
    {
        return getOldValue();
    }","/**
     * The old {@link ScheduledEvent#getEndTime() end time}.
     *
     * @return The old end time, or {@code null} if no end time was previously set.
     */",net.dv8tion.jda.api.events.guild.scheduledevent.update
"public Integer getAnswerId() {
        return this.data.answerId().get(); // We can safely call get() here because the answerId is always present
    }","/**
     * Gets the answer id of this poll answer.
     *
     * @return the answer id of this poll answer
     */",discord4j.core.object.entity.poll
"@Nonnull
        @Override
        DataObject toData();","/**
         * The raw JSON object that was parsed from this update
         *
         * @return The raw JSON object
         */",net.dv8tion.jda.api.hooks
"@Override
    public MemberData getMemberData() {
        return (MemberData) super.getMemberData();
    }","/**
     * Gets the data of the member.
     *
     * @return The data of the member.
     */",discord4j.core.object.entity
"public long getRetryAfter()
    {
        return retryAfter;
    }","/**
     * The back-off delay in milliseconds that should be respected
     * before trying to query the {@link #getRateLimitedRoute() route} again
     *
     * @return The back-off delay in milliseconds
     */",net.dv8tion.jda.api.exceptions
"public LegacyWebhookEditSpec setChannel(@Nullable Snowflake id) {
        this.channelId = id == null ? Possible.absent() : Possible.of(id.asString());
        return this;
    }","/**
     * Sets the channel ID of the modified {@link Webhook}.
     *
     * @param id the new channel id this webhook should be moved to
     * @return This spec.
     */",discord4j.core.spec.legacy
"private Router getRouter() {
        return restClient.getRestResources().getRouter();
    }","/**
     * Return the {@link Router} tied to this instance to execute requests to Discord API.
     *
     * @return an abstraction to perform API requests
     */",discord4j.oauth2
"A unique string denoting the rate limit being encountered (non-inclusive of top-level resources in the path) */
    String HASH_HEADER = ""X-RateLimit-Bucket"";
    /** The number of seconds to wait before submitting another request */
    String RETRY_AFTER_HEADER = ""Retry-After"";
    /** Returned only on HTTP 429 responses. Value can be user (per bot or user limit), global (per bot or user global limit), or shared (per resource limit) */
    String SCOPE_HEADER = ""X-RateLimit-Scope"";

    /**
     * Enqueue a new request.
     *
     * <p>Use {@link Work#getRoute()}",/** Returned only on HTTP 429 responses if the rate limit encountered is the global rate limit (not per-route) */,net.dv8tion.jda.api.requests
"public Publisher<?> onInviteCreate(InviteCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an invite to a channel is created.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Deprecated
        public Builder setJitter(Jitter jitter) {
            this.jitter = jitter;
            return this;
        }","/**
         * Set the jitter function given by reactor-extra {@link Jitter} type. Defaults to 50% randomness.
         *
         * @param jitter a jitter function to apply on retries
         * @return this builder
         * @deprecated only select implementations will use this value. Moving forward, consider using
         * {@link #setJitterFactor(double)}}
         */",discord4j.common.retry
"public Mono<Message> getTargetMessage(EntityRetrievalStrategy retrievalStrategy) {
        return getClient().withRetrievalStrategy(retrievalStrategy)
                .getMessageById(getInteraction().getChannelId(), getTargetId());
    }","/**
     * Requests to retrieve the targeted Message.
     *
     * @param retrievalStrategy The strategy to use to get the target Message
     * @return A {@link Mono} where, upon successful completion, emits the {@link Message} targeted by the user.
     * If an error is received, it is emitted through the Mono.
     */",discord4j.core.event.domain.interaction
"public static final Route WEBHOOK_TOKEN_DELETE = Route.delete(""/webhooks/{webhook.id}/{webhook.token}"");","/**
     * Same as above, except this call does not require authentication.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token"">
     * https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token</a>
     */",discord4j.rest.route
"public static double getDouble(@Nonnull DataObject root, @Nonnull String path)
    {
        Double doubleValue = get(root, path, DataObject::getDouble, DataArray::getDouble);
        if (doubleValue == null)
            pathError(path, ""double"");
        return doubleValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     * <br>If the resulting value is a string, this will parse the string using {@link Double#parseDouble(String)}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The double value at the given path
     */",net.dv8tion.jda.api.utils.data
"@Nullable
    public ImageProxy getNewIcon()
    {
        final String newIconUrl = getNewIconUrl();
        return newIconUrl == null ? null : new ImageProxy(newIconUrl);
    }","/**
     * Returns an {@link ImageProxy} for this guild's new icon.
     *
     * @return Possibly-null {@link ImageProxy} of this guild's new icon
     *
     * @see    #getNewIconUrl()
     */",net.dv8tion.jda.api.events.guild.update
"public Optional<Attachment> getAttachment(Snowflake attachmentId) {
        return data.attachments().toOptional()
                .map(attachments -> attachments.get(attachmentId.asString()))
                .map(data -> new Attachment(gateway, data));
    }","/**
     * Gets the resolved attachment with the given ID, if present.
     *
     * @param attachmentId the ID of the attachment to get
     * @return the resolved attachment, if present
     */",discord4j.core.object.command
void setConnectionListener(@Nullable ConnectionListener listener);,"/**
     * Sets the {@link net.dv8tion.jda.api.audio.hooks.ConnectionListener ConnectionListener} for this AudioManager.
     * It will be informed about meta data of any audio connection established through this AudioManager.
     * Further information can be found in the {@link net.dv8tion.jda.api.audio.hooks.ConnectionListener ConnectionListener} documentation!
     *
     * @param listener
     *        A {@link net.dv8tion.jda.api.audio.hooks.ConnectionListener ConnectionListener} instance
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    M setTagRequired(boolean requireTag);","/**
     * Sets the tag requirement state of this {@link IPostContainer}.
     * <br>If true, all new posts must have at least one tag.
     *
     * @param  requireTag
     *         The new tag requirement state for the selected {@link IPostContainer}
     *
     * @return ChannelManager for chaining convenience.
     *
     * @see    IPostContainer#isTagRequired()
     */",net.dv8tion.jda.api.managers.channel.attribute
"@Nonnull
    @CheckReturnValue
    GuildManager setIcon(@Nullable Icon icon);","/**
     * Sets the {@link net.dv8tion.jda.api.entities.Icon Icon} of this {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  icon
     *         The new icon for this {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         or {@code null} to reset
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"default boolean isFromGuild()
    {
        return getGuild() != null;
    }","/**
     * Whether this interaction came from a {@link Guild}.
     * <br>This is identical to {@code getGuild() != null}
     *
     * @return True, if this interaction happened in a guild
     */",net.dv8tion.jda.api.interactions
"@Nonnull
    String getAsCodepoints();","/**
     * Converts the unicode name into codepoint notation like {@code U+1F602}.
     *
     * @return String containing the codepoint representation of the emoji
     */",net.dv8tion.jda.api.entities.emoji
"Route route = Route.custom(Method.PUT, ""guilds/{guild_id}/bans/{user_id}"");","/**
     * Create a route template for the with the {@link Method#POST POST} method.
     *
     * <p>Route syntax should include valid argument placeholders of the format: {@code '{' argument_name '}'}
     * <br>The rate-limit handling in JDA relies on the correct names of major parameters:
     * <ul>
     *     <li>{@code channel_id} for channel routes</li>
     *     <li>{@code guild_id} for guild routes</li>
     *     <li>{@code webhook_id} for webhook routes</li>
     *     <li>{@code interaction_token} for interaction routes</li>
     * </ul>
     *
     * For example, to compose the route to create a message in a channel:
     * <pre>{@code
     * Route route = Route.custom(Method.POST, ""channels/{channel_id}/messages"");
     * }</pre>
     *
     * <p>To compile the route, use {@link #compile(String...)} with the positional arguments.
     * <pre>{@code
     * Route.CompiledRoute compiled = route.compile(channelId);
     * }</pre>
     *
     * @param  route
     *         The route template with valid argument placeholders
     *
     * @throws IllegalArgumentException
     *         If null is provided or the route is invalid (containing spaces or empty)
     *
     * @return The custom route template
     */",net.dv8tion.jda.api.requests
"public LegacyGuildPruneSpec setComputePruneCount(boolean enable) {
        map.set(""compute_prune_count"", enable);
        return this;
    }","/**
     * Set whether the number of pruned members is returned when this actions completes. By default this is enabled,
     * but this is discouraged on large guilds so you can set it to {@code false}.
     *
     * @param enable whether the pruned total is returned, if {@code false}, the prune action will eventually
     * complete with an empty {@link Mono}.
     * @return this spec
     */",discord4j.core.spec.legacy
"public static final Route TYPING_INDICATOR_TRIGGER = Route.post(""/channels/{channel.id}/typing"");","/**
     * Post a typing indicator for the specified channel. Generally bots should not implement this route. However, if a
     * bot is responding to a command and expects the computation to take a few seconds, this endpoint may be called to
     * let the user know that the bot is processing their message. Returns a 204 empty response on success. Fires a
     * Typing Start Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#trigger-typing-indicator"">
     * https://discord.com/developers/docs/resources/channel#trigger-typing-indicator</a>
     */",discord4j.rest.route
"public Mono<AudioChannel> getChannel(EntityRetrievalStrategy retrievalStrategy) {
        return Mono.justOrEmpty(getChannelId())
                .flatMap(id -> gateway.withRetrievalStrategy(retrievalStrategy).getChannelById(id))
                .cast(AudioChannel.class);
    }","/**
     * Requests to retrieve the audio channel this user is connected to, if present, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the channel
     * @return A {@link Mono} where, upon successful completion, emits the {@link AudioChannel} this user is connected
     * to, if present. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
        public TextInputStyle getStyle()
        {
            return style;
        }","/**
         * The {@link TextInputStyle TextInputStyle}
         *
         * @return The TextInputStyle
         */",net.dv8tion.jda.api.interactions.components.text
"Mono<Void> onThreadListSync(int shardIndex, ThreadListSync dispatch);","/**
     * Updates the internal state of the store according to the given {@link ThreadListSync} gateway dispatch. This
     * will typically perform an update and delete operation on the related {@link ChannelData} and {@link ThreadMemberData}.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"public RestRole restRole(Snowflake guildId, RoleData data) {
        return RestRole.create(this, guildId, Snowflake.of(data.id()));
    }","/**
     * Requests to retrieve the role represented by the supplied ID and {@link RoleData}.
     *
     * @param guildId The ID of the guild.
     * @param data The data of the role.
     * @return A {@link RestRole} as represented by the supplied parameters.
     */",discord4j.rest
"@Nonnull
    public List<Role> getOldRoles()
    {
        return getOldValue();
    }","/**
     * The old role whitelist
     *
     * @return The old role whitelist
     */",net.dv8tion.jda.api.events.emoji.update
"public Publisher<?> onPresenceUpdate(PresenceUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user's presence or status has changed.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"default Snowflake getGuildId() {
        return getData().guildId().toOptional()
                .map(Snowflake::of)
                .orElseThrow(IllegalStateException::new); // TODO
    }","/**
     * Gets the ID of the guild this channel is associated to.
     *
     * @return The ID of the guild this channel is associated to.
     */",discord4j.core.object.entity.channel
"@Nonnull
    @CheckReturnValue
    WebhookAction setAvatar(@Nullable Icon icon);","/**
     * Sets the <b>Avatar</b> for the custom Webhook User
     *
     * @param  icon
     *         An {@link net.dv8tion.jda.api.entities.Icon Icon} for the new avatar.
     *         Or null to use default avatar.
     *
     * @return The current WebhookAction for chaining convenience.
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    AccountManager getManager();","/**
     * The {@link AccountManager AccountManager}
     * for the currently logged in account.
     * <br>This can be used to atomically set account fields (like avatar/username)
     * You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
     *
     * @return An AccountManager instance for the current account
     */",net.dv8tion.jda.api.entities
"public String getDiscordBaseUrl() {
        return discordBaseUrl;
    }","/**
     * Returns the base url of the Discord API.
     *
     * @return the configured discord api base url
     */",discord4j.rest.request
void connect(@Nonnull AudioChannel channel);,"/**
     * Requests a voice server endpoint for connecting to the voice gateway.
     *
     * @param channel
     *        The channel to connect to
     *
     * @see   #reconnect(AudioChannel)
     */",net.dv8tion.jda.api.managers
"@Nonnull
    public List<ForumTag> getAddedTags()
    {
        List<ForumTag> newTags = new ArrayList<>(getNewTags());
        newTags.removeAll(getOldTags());
        return newTags;
    }","/**
     * The newly added tags.
     *
     * <p>This requires {@link net.dv8tion.jda.api.utils.cache.CacheFlag#FORUM_TAGS CacheFlag.FORUM_TAGS} to be enabled.
     *
     * @return The tags that were added to the post
     */",net.dv8tion.jda.api.events.channel.update
Flux<VoiceStateData> getVoiceStates();,"/**
     * Retrieves data for all voice states present in the store.
     *
     * @return A {@link Flux} emitting the voice states, or empty if none is present
     */",discord4j.common.store.api.layout
"boolean canRead(@Nullable Class<?> type, @Nullable String contentType);","/**
     * Whether the given object type is supported by this reader.
     *
     * @param type the type of object to check
     * @param contentType the content type for the read
     * @return {@code true} if readable, {@code false} otherwise
     */",discord4j.rest.http
int getMinLength();,"/**
     * The minimum amount of characters that must be written to submit the Modal.
     *
     * <p><b>This is -1 if no length has been set!</b>
     *
     * @return The minimum length of this TextInput component or -1
     */",net.dv8tion.jda.api.interactions.components.text
"public boolean isSelfDeaf() {
        return data.selfDeaf();
    }","/**
     * Gets whether this user is locally deafened.
     *
     * @return {@code true} if this user is locally deafened, {@code false} otherwise.
     */",discord4j.core.object
"default boolean hasAccess(@Nonnull GuildChannel channel)
    {
        Checks.notNull(channel, ""Channel"");
        return channel.getType().isAudio()
                ? hasPermission(channel, Permission.VOICE_CONNECT, Permission.VIEW_CHANNEL)
                : hasPermission(channel, Permission.VIEW_CHANNEL);
    }","/**
     * Checks whether or not this PermissionHolder has {@link Permission#VIEW_CHANNEL VIEW_CHANNEL}
     * and {@link Permission#VOICE_CONNECT VOICE_CONNECT} permissions in the {@link GuildChannel}.
     *
     * @param  channel
     *         The channel to check access for
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return True, if the PermissionHolder has access
     */",net.dv8tion.jda.api.entities
"String sanitized = MarkdownSanitizer.escape(input, ~MarkdownSanitizer.ITALICS_U);","/**
     * Escapes already existing italics (with underscore) regions in the input
     * and applies italics formatting to the entire string.
     * <br>The resulting string will be {@code ""_"" + escaped(input) + ""_""}.
     *
     * @param  input
     *         The input to italics
     *
     * @return The resulting output
     */",net.dv8tion.jda.api.utils
"public LegacyGuildEditSpec setSplash(@Nullable Image splash) {
        requestBuilder.splash(Possible.of(Optional.ofNullable(splash).map(Image::getDataUri)));
        return this;
    }","/**
     * Sets the image for the guild splash (when the server has the INVITE_SPLASH feature).
     *
     * @param splash The image for the guild splash.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static int getUnsignedInt(@Nonnull DataArray root, @Nonnull String path, int fallback)
    {
        Integer integer = get(root, path, (obj, key) -> obj.getUnsignedInt(key, fallback), (arr, index) -> arr.getUnsignedInt(index, fallback));
        return integer == null ? fallback : integer;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     * <br>If the resulting value is a string, this will parse the string using {@link Integer#parseUnsignedInt(String)}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The unsigned int value at the given path, returning the fallback if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"default Mono<ThreadChannel> startPublicThreadWithMessage(Message message, StartThreadFromMessageSpec spec) {
        return getRestChannel().startThreadFromMessage(message.getId().asLong(), spec.asRequest())
            .map(data -> new ThreadChannel(getClient(), data));
    }","/**
     * Start a new public thread that is connected to an existing message. Properties specifying how to create the thread
     * can be set via the {@link StartThreadFromMessageSpec} specifier.
     *
     * @param message the message to start the thread with
     * @param spec the properties to create the thread with
     * @return A {@link Mono} where, upon successful completion, emits the created {@link ThreadChannel}.
     * If an error is received, it is emitted through the {@link Mono}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    @Override
    String getName();","/**
     * The human-readable name of this channel.
     *
     * <p>If getUser returns null, this method will return an empty String.
     * This happens when JDA does not have enough information to populate the channel name.
     *
     * <p>This will occur only when {@link #getUser()} is null, and the reasons are given in {@link #getUser()}
     *
     * <p>If the channel name is important, {@link #retrieveUser()} should be used, instead.
     *
     * @return The name of this channel
     *
     * @see #retrieveUser()
     * @see #getUser()
     */",net.dv8tion.jda.api.entities.channel.concrete
"public Map<Locale, String> getLocalizedNames() {
        return Possible.flatOpt(data.nameLocalizations())
                .orElse(Collections.emptyMap())
                .entrySet().stream()
                .collect(Collectors.toMap(entry -> new Locale.Builder().setLanguageTag(entry.getKey()).build(),
                        Map.Entry::getValue));
    }","/**
     * Gets the Locale and name of this choice.
     *
     * @return The locales and names of this choice.
     */",discord4j.core.object.command
"<D, S, E extends Event> Mono<E> handle(DispatchContext<D, S> context);","/**
     * Process a {@link DispatchContext} to potentially obtain an {@link Event}.
     *
     * @param context the DispatchContext used with this Dispatch object
     * @param <D> the Dispatch type
     * @param <E> the resulting Event type
     * @return a {@link Mono} of {@link Event} mapped from the given {@link DispatchContext} object, or empty if no
     * Event is produced. If an error occurs during processing, it is emitted through the {@code Mono}.
     */",discord4j.core.event.dispatch
"@Nonnull
    public static OffsetDateTime getTimeCreated(@Nonnull ISnowflake entity)
    {
        Checks.notNull(entity, ""Entity"");
        return getTimeCreated(entity.getIdLong());
    }","/**
     * Gets the creation-time of a JDA-entity by doing the reverse snowflake algorithm on its id.
     * This returns the creation-time of the actual entity on Discords side, not inside JDA.
     *
     * @param  entity
     *         The JDA entity where the creation-time should be determined for
     *
     * @throws IllegalArgumentException
     *         If the provided entity is {@code null}
     *
     * @return The creation time of the JDA entity as OffsetDateTime
     */",net.dv8tion.jda.api.utils
"public Builder setBackoffScheduler(Scheduler backoffScheduler) {
            this.backoffScheduler = backoffScheduler;
            return this;
        }","/**
         * Set the {@link Scheduler} to be used when building delayed sequences as backoff. Defaults to dedicated
         * parallel scheduler {@link #DEFAULT_BACKOFF_SCHEDULER}.
         *
         * @param backoffScheduler a reactor scheduler used for backoff delays
         * @return this builder
         */",discord4j.common.retry
"public Instant getStartTime() {
        return startTime;
    }","/**
     * Gets the time at which the {@link User} started typing in this event.
     *
     * @return The time at which the {@link User} starting typing.
     */",discord4j.core.event.domain.channel
boolean isDone();,"/**
         * Whether the request is completed.
         * <br>This means you should not try using {@link #execute()} again.
         *
         * @return True, if the request has completed.
         */",net.dv8tion.jda.api.requests
"public Optional<Instant> getExpiration() {
        final int maxAge = getData().maxAge().toOptional().orElseThrow(IllegalStateException::new);
        return maxAge > 0 ? Optional.of(getCreation().plus(maxAge, ChronoUnit.SECONDS)): Optional.empty();
    }","/**
     * Gets the instant this invite expires, if possible.
     *
     * @return The instant this invite expires, if empty, invite is never expiring.
     */",discord4j.core.object
Flux<EmojiData> getEmojis();,"/**
     * Retrieves data for all emojis present in the store.
     *
     * @return A {@link Flux} emitting the emojis, or empty if none is present
     */",discord4j.common.store.api.layout
"public List<Snowflake> getBannedUserIds() {
        return data.bannedUsers().stream().map(Snowflake::of).collect(Collectors.toList());
    }","/**
     * Gets the successful banned users ids.
     *
     * @return A list with all the user ids.
     */",discord4j.core.object
"@Nullable
        Activity getActivity();","/**
         * The game that the member is currently playing.
         * <br>This game cannot be a stream.
         * If the user is not currently playing a game, this will return null.
         *
         * @return Possibly-null {@link net.dv8tion.jda.api.entities.Activity Activity} containing the game
         *         that the member is currently playing.
         */",net.dv8tion.jda.api.entities
"public Publisher<?> onSelectMenuInteraction(SelectMenuInteractionEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user interacts with a select menu.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static final Route GUILD_ONBOARDING_MODIFY = Route.put(""/guilds/{guild.id}/onboarding"");","/**
     * Modifies the onboarding configuration of the guild. Returns a 200 with the Onboarding object for the guild. Requires the MANAGE_GUILD and MANAGE_ROLES permissions.
     * This endpoint supports the X-Audit-Log-Reason header.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#modify-guild-onboarding"">https://discord.com/developers/docs/resources/guild#modify-guild-onboarding</a>
     */",discord4j.rest.route
"public static String forChannel(final Snowflake id) {
        return ""<#"" + id.asString() + "">"";
    }","/**
     * Gets a <i>raw</i> mention for a {@link Channel}.
     *
     * <p>This is the format utilized to directly mention another channel.</p>
     *
     * @param id The id of the channel to mention.
     * @return The <i>raw</i> mention.
     */",discord4j.core.util
"public static JacksonResources createFromObjectMapper(ObjectMapper objectMapper) {
        return new JacksonResources(INITIALIZER.andThen(HANDLE_UNKNOWN_PROPERTIES).apply(objectMapper));
    }","/**
     * Create based on {@link ObjectMapper} applying on it all changes required for Discord4J related operations.
     */",discord4j.common
"public static Snowflake of(final Id id) {
        return new Snowflake(id.asLong());
    }","/**
     * Constructs a {@code Snowflake} utilizing a discord-json {@link Id}.
     *
     * @param id The ID to construct a {@code Snowflake}
     * @return A constructed {@code Snowflake} with the given ID
     */",discord4j.common.util
"@Nonnull
    public List<Role> getNewRoles()
    {
        return getNewValue();
    }","/**
     * The new role whitelist
     *
     * @return The new role whitelist
     */",net.dv8tion.jda.api.events.emoji.update
"@Nonnull
    default DiscordLocale getGuildLocale()
    {
        if (!isFromGuild())
            throw new IllegalStateException(""This interaction did not happen in a guild"");
        return getGuild().getLocale();
    }","/**
     * Returns the preferred language of the Guild.
     * <br>This is identical to {@code getGuild().getLocale()}.
     *
     * @throws IllegalStateException
     *         If this interaction is not from a guild. (See {@link #isFromGuild()})
     *
     * @return The preferred language of the Guild
     */",net.dv8tion.jda.api.interactions
int getBitrate();,"/**
     * The audio bitrate of the voice audio that is transmitted in this channel. While higher bitrates can be sent to
     * this channel, it will be scaled down by the client.
     * <br>Default and recommended value is 64000
     *
     * @return The audio bitrate of this audio channel.
     */",net.dv8tion.jda.api.entities.channel.middleman
"@Nonnull
    public CompletableFuture<Path> downloadToPath(@Nonnull Path path, int width, int height)
    {
        Checks.notNull(path, ""Path"");

        return downloadToPath(getUrl(width, height), path);
    }","/**
     * Downloads the data of this attachment, at the specified size, and stores it in the specified file.
     * <br>The attachment, if an image, may be resized at any size, however if the size does not fit the ratio of the image, then it will be cropped as to fit the target size.
     * <br>If the attachment is not an image then the size parameters are ignored and the file is downloaded.
     *
     * <p><b>Implementation note:</b>
     *       The file is first downloaded into a temporary file, the file is then moved to its real destination when the download is complete.
     *       <br>The given path can also target filesystems such as a ZIP filesystem.
     *
     * @param  path
     *         The file in which to download the image
     * @param  width
     *         The width of this image, must be positive
     * @param  height
     *         The height of this image, must be positive
     *
     * @throws IllegalArgumentException
     *         If any of the follow checks are true
     *         <ul>
     *             <li>The target path is null</li>
     *             <li>The parent folder of the target path does not exist</li>
     *             <li>The target path exists and is not a {@link Files#isRegularFile(Path, LinkOption...) regular file}</li>
     *             <li>The target path exists and is not {@link Files#isWritable(Path) writable}</li>
     *             <li>The requested width is negative or 0</li>
     *             <li>The requested height is negative or 0</li>
     *         </ul>
     *
     * @return {@link CompletableFuture} which holds a {@link Path}, it is the same as the path passed in the parameters.
     */",net.dv8tion.jda.api.utils
"public int getGuildAvailableCount()
    {
        return availableGuilds;
    }","/**
     * Number of available guilds for this session.
     * <br>When discord fails to connect guilds for our gateway session they will not be in cache here yet
     * but instead will fire a {@link net.dv8tion.jda.api.events.guild.GuildReadyEvent GuildReadyEvent} later.
     *
     * @return Number of available guilds for this session
     *
     * @see    #getGuildTotalCount()
     * @see    #getGuildUnavailableCount()
     */",net.dv8tion.jda.api.events.session
"static EventDispatcher replaying() {
        return ReplayingEventDispatcher.create();
    }","/**
     * Create an {@link EventDispatcher} that is capable of replaying up to 2 minutes worth of important events like
     * {@link GuildCreateEvent} and {@link GatewayLifecycleEvent} that arrive while no subscribers are connected to
     * all late subscribers, as long as they subscribe within the replay window of 5 seconds. After the replay window
     * has closed, it behaves like an emitter event dispatcher.
     * <p>
     * This allows controlling the memory overhead of dispatchers like {@link #buffering()} while still keeping a record
     * of important events to all late subscribers, even after login has completed.
     * <p>
     * This dispatcher can be customized through the use of {@link ReplayingEventDispatcher#builder()}.
     *
     * @return an {@link EventDispatcher} that is capable of replaying events to late subscribers
     */",discord4j.core.event
"@Nonnull
    default String getImageUrl()
    {
        return String.format(ICON_URL, getId(), isAnimated() ? ""gif"" : ""png"");
    }","/**
     * A String representation of the URL which leads to image displayed within the official Discord&trade; client
     * when this emoji is used
     *
     * @return Discord CDN link to the emoji's image
     */",net.dv8tion.jda.api.entities.emoji
Sinks.Many<GatewayPayload<?>> sender();,"/**
     * Retrieves a new {@link Sinks.Many} to safely produce outbound values using
     * {@link Sinks.Many#tryEmitNext(Object)} or {@link Sinks.Many#emitNext(Object, Sinks.EmitFailureHandler)}.
     *
     * @return a serializing {@link Sinks.Many}
     */",discord4j.gateway
"public int getSequence() {
        return sequence;
    }","/**
     * Return the sequence number of the session represented by this {@link SessionInfo}.
     *
     * @return the session sequence
     */",discord4j.gateway
<T> RequestQueue<T> create();,"/**
     * Creates a new {@link RequestQueue} instance.
     *
     * @param <T> the desired generic type of {@link RequestQueue}
     * @return the freshly instantiated {@link RequestQueue}
     */",discord4j.rest.request
"public static final Route REACTIONS_DELETE_ALL = Route.delete(""/channels/{channel.id}/messages/{message.id}/reactions"");","/**
     * Deletes all reactions on a message. This endpoint requires the 'MANAGE_MESSAGES' permission to be present on the
     * current user.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#delete-all-reactions"">
     * https://discord.com/developers/docs/resources/channel#delete-all-reactions</a>
     */",discord4j.rest.route
"@Nonnull
    M moveAbove(@Nonnull T other);","/**
     * Moves the currently selected entity above the specified target entity.
     *
     * @param  other
     *         The reference entity that should end up below the selected entity
     *
     * @throws IllegalStateException
     *         If no entity has been selected yet, use {@link #selectPosition(Object)}
     * @throws IllegalArgumentException
     *         If the specified target entity is not managed by this instance or null
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    #moveUp(int)
     * @see    #moveDown(int)
     * @see    #moveBelow(Object)
     */",net.dv8tion.jda.api.requests.restaction.order
"public static RestWebhook create(RestClient restClient, Snowflake id) {
        return new RestWebhook(restClient, id.asLong());
    }","/**
     * Create a {@link RestWebhook} for a given ID. This method does not perform any API request.
     *
     * @param restClient the client to make API requests
     * @param id the ID of this entity
     * @return a {@code RestWebhook} represented by this {@code id}.
     */",discord4j.rest.entity
"public Publisher<?> onRoleUpdate(RoleUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when one or more role's properties are updated in a guild.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public InstallParamsData getData() {
        return this.data;
    }","/**
     * Gets the data of this configuration
     *
     * @return The data of this configuration
     */",discord4j.core.object
final Properties properties = GitProperties.getProperties();,"/**
     * Create a new {@link DiscordWebClient} wrapping HTTP, Discord and encoding/decoding resources.
     *
     * @param httpClient a Reactor Netty HTTP client
     * @param exchangeStrategies a strategy to transform requests and responses
     * @param authorizationScheme default scheme to use with the authorization header, like ""Bot"" or ""Bearer""
     * @param token default Discord token for API authorization
     * @param responseFunctions a list of {@link ResponseFunction} transformations
     */",discord4j.rest.http.client
"@Nonnull
    @CheckReturnValue
    ThreadChannelManager setInvitable(boolean invitable);","/**
     * Sets the invitable state of this ThreadChannel.
     *
     * <p>This property can only be set on private ThreadChannels.
     *
     * @param  invitable
     *         The new invitable state for the selected {@link ThreadChannel}
     *
     * @throws IllegalStateException
     *         If the selected {@link ThreadChannel} is not a private ThreadChannel
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account is not the thread owner or does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_THREADS MANAGE_THREADS} permission.
     *
     * @return this ThreadChannelManager for chaining convenience.
     *
     * @see ThreadChannel#isInvitable()
     * @see ThreadChannel#isPublic()
     */",net.dv8tion.jda.api.managers.channel.concrete
PermissionSet set0 = PermissionSet.of(KICK_MEMBERS);,"/**
     * Performs a logical <b>AND</b> of this permission set with the other permission set.
     * <p>
     * The resultant set is the <b>intersection</b> of this set and the other set. A permission is contained if and only if it was
     * contained in both this set and the other set. This is analogous to {@link Set#retainAll(java.util.Collection)}.
     * <pre>
     * {@code
     * PermissionSet set0 = PermissionSet.of(KICK_MEMBERS, BAN_MEMBERS);
     * PermissionSet set1 = PermissionSet.of(KICK_MEMBERS);
     *
     * set0.and(set1) = PermissionSet.of(KICK_MEMBERS)
     * }
     * </pre>
     *
     * @param other The other permission set.
     * @return The intersection of this set with the other set.
     */",discord4j.rest.util
"public StoreChannel getCurrent() {
        return current;
    }","/**
     * Gets the current, new version of the {@link StoreChannel} that was updated in this event.
     *
     * @return The current version of the updated {@link StoreChannel}.
     */",discord4j.core.event.domain.channel
"public Builder setMaxRetries(long maxRetries) {
            if (maxRetries < 0) {
                throw new IllegalArgumentException(""maxRetries must be a positive integer"");
            }
            this.maxRetries = maxRetries;
            return this;
        }","/**
         * Set the maximum number of iterations to retry before rethrowing the error as exhausted attempts. Defaults
         * to Long.MAX_VALUE (unlimited retries).
         *
         * @param maxRetries the maximum number of retries
         * @return this builder
         */",discord4j.common.retry
"@Nullable
    public String getOldAvatarUrl() {
        return previous == null ? null : String.format(Member.AVATAR_URL, getMember().getGuild().getId(), getMember().getId(), previous, previous.startsWith(""a_"") ? ""gif"" : ""png"");
    }","/**
     * The previous avatar url
     *
     * @return The previous avatar url
     */",net.dv8tion.jda.api.events.guild.member.update
"@Nonnull
    @Unmodifiable
    default List<NewsChannel> getNewsChannels()
    {
        return getNewsChannelCache().asList();
    }","/**
     * Gets all {@link NewsChannel NewsChannels} in the cache.
     * <br>In {@link Guild} cache, channels are sorted according to their position and id.
     *
     * <p>This copies the backing store into a list. This means every call
     * creates a new list with O(n) complexity. It is recommended to store this into
     * a local variable or use {@link #getNewsChannelCache()} and use its more efficient
     * versions of handling these values.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return An immutable List of all {@link NewsChannel NewsChannels} in this Guild.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    @CheckReturnValue
    RoleAction createCopy(@Nonnull Guild guild);","/**
     * Creates a new {@link net.dv8tion.jda.api.entities.Role Role} in the specified {@link net.dv8tion.jda.api.entities.Guild Guild}
     * with the same settings as the given {@link net.dv8tion.jda.api.entities.Role Role}.
     * <br>The position of the specified Role does not matter in this case!
     * <br><b>If this {@link Role} has an {@link RoleIcon Icon} set, only its emoji can be copied over.</b>
     *
     * <p>It will be placed at the bottom (just over the Public Role) to avoid permission hierarchy conflicts.
     * <br>For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.api.Permission#MANAGE_ROLES MANAGE_ROLES} Permission
     * and all {@link net.dv8tion.jda.api.Permission Permissions} the given {@link net.dv8tion.jda.api.entities.Role Role} has.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The role could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_ROLES_PER_GUILD MAX_ROLES_PER_GUILD}
     *     <br>There are too many roles in this Guild</li>
     * </ul>
     *
     * @param  guild
     *         The {@link net.dv8tion.jda.api.entities.Role Role} that should be copied
     *
     * @throws net.dv8tion.jda.api.exceptions.PermissionException
     *         If the logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_ROLES} Permission and every Permission the provided Role has
     * @throws java.lang.IllegalArgumentException
     *         If the specified guild is {@code null}
     *
     * @return {@link RoleAction RoleAction}
     *         <br>RoleAction with already copied values from the specified {@link net.dv8tion.jda.api.entities.Role Role}
     */",net.dv8tion.jda.api.entities
boolean isNSFW();,"/**
     * Whether this channel is considered as age-restricted, also known as NSFW (Not-Safe-For-Work)
     *
     * @return True, If this channel is age-restricted by the official Discord Client
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    @CheckReturnValue
    M reset();","/**
     * Resets all fields for this Manager
     *
     * @return The current Manager with all settings reset to default
     */",net.dv8tion.jda.api.managers
"public static ReactiveEventAdapter from(ReactiveEventAdapter... adapters) {
        return new CompositeReactiveEventAdapter(adapters);
    }","/**
     * Create a composite {@link ReactiveEventAdapter} from multiple adapters.
     *
     * @param adapters an array of adapters to combine
     * @return a composite adapter
     */",discord4j.core.event
"public static final Route GUILD_TEMPLATE_SYNC = Route.put(""/guilds/{guild.id}/templates/{template.code}"");","/**
     * Syncs the template to the guild's current state. Requires the MANAGE_GUILD permission. Returns the template object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/template#sync-guild-template"">
     *         https://discord.com/developers/docs/resources/template#sync-guild-template</a>
     */",discord4j.rest.route
"line = tagReplacer.replace(line, tagReplacer.getValue(faction, null));","/**
     * Replaces all variables in a plain raw line for a faction
     *
     * @param faction for faction
     * @param line    raw line from config with variables to replace for
     * @return clean line
     */",com.massivecraft.factions.zcore.util
"@Nullable
    public TextChannel getOldSystemChannel()
    {
        return getOldValue();
    }","/**
     * The previous system channel.
     * 
     * @return The previous system channel
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    @CheckReturnValue
    M putMemberPermissionOverride(long memberId, long allow, long deny);","/**
     * Adds an override for the specified member with the provided raw bitmasks as allowed and denied permissions.
     * If the member already had an override on this channel it will be replaced instead.
     *
     * @param  memberId
     *         The ID of the member to set permissions for
     * @param  allow
     *         The bitmask to grant
     * @param  deny
     *         The bitmask to deny
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         in this channel, or tries to set permissions it does not have without having {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS} explicitly for this channel through an override.
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    #putMemberPermissionOverride(long, Collection, Collection)
     * @see    Permission#getRaw(Permission...) Permission.getRaw(Permission...)
     */",net.dv8tion.jda.api.managers.channel.attribute
"public Snowflake getUserId() {
        return Snowflake.of(data.userId());
    }","/**
     * Gets the user ID this voice state is for.
     *
     * @return The user ID this voice state is for.
     */",discord4j.core.object
"@Nonnull
        public String getEndpoint()
        {
            return endpoint;
        }","/**
         * The voice server endpoint
         *
         * @return The endpoint
         */",net.dv8tion.jda.api.hooks
"public Router getRouter() {
        return router;
    }","/**
     * Return the {@link Router} tied to this resources object.
     *
     * @return a configured {@link Router} instance
     */",discord4j.rest
"public List<Role> getRoles()
    {
        return removedRoles;
    }","/**
     * The removed roles
     *
     * @return The removed roles
     */",net.dv8tion.jda.api.events.guild.member
"public static final Route CHANNEL_INVITE_CREATE = Route.post(""/channels/{channel.id}/invites"");","/**
     * Create a new invite object for the channel. Only usable for guild channels. Requires the CREATE_INSTANT_INVITE
     * permission. All JSON parameters for this route are optional, however the request body is not. If you are not
     * sending any fields, you still have to send an empty JSON object ({}). Returns an invite object.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#create-channel-invite"">
     * https://discord.com/developers/docs/resources/channel#create-channel-invite</a>
     */",discord4j.rest.route
"public static ReactionEmoji of(EmojiData data) {
        if (data.id().isPresent()) {
            return custom(Snowflake.of(data.id().get()),
                    data.name().orElse(null),
                    data.animated().toOptional().orElse(false));
        }
        return unicode(data.name().orElseThrow(IllegalArgumentException::new));
    }","/**
     * Constructs a {@code ReactionEmoji} from a {@link EmojiData} representation.
     *
     * @param data the {@link EmojiData} wrapper.
     * @return a reaction emoji using the given information.
     */",discord4j.core.object.reaction
"@Nonnull
    public static List<ActionRow> partitionOf(@Nonnull ItemComponent... components)
    {
        Checks.notNull(components, ""Components"");
        return partitionOf(Arrays.asList(components));
    }","/**
     * Partitions the provided {@link ItemComponent components} into a list of ActionRow instances.
     * <br>This will split the provided components by {@link Type#getMaxPerRow()} and create homogeneously typed rows,
     * meaning they will not have mixed component types.
     *
     * <p><b>Example</b>
     * <pre>{@code
     * List<ItemComponent> components = Arrays.asList(
     *   Button.primary(""id1"", ""Hello""),
     *   Button.secondary(""id2"", ""World""),
     *   SelectMenu.create(""menu:id"").build()
     * );
     *
     * List<ActionRow> partitioned = ActionRow.partition(components);
     * // partitioned[0] = ActionRow(button, button)
     * // partitioned[1] = ActionRow(selectMenu)
     * }</pre>
     *
     * @param  components
     *         The components to partition
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link List} of {@link ActionRow}
     */",net.dv8tion.jda.api.interactions.components
"public RoleIcon(String iconId, String emoji, long roleId)
    {
        this.iconId = iconId;
        this.emoji = emoji;
        this.roleId = roleId;
    }",/** Template for {@link #getIconUrl()}. */,net.dv8tion.jda.api.entities
"public LegacyGuildEmojiEditSpec setName(String name) {
        this.name = Possible.of(name);
        return this;
    }","/**
     * Sets the name for the modified {@link GuildEmoji}.
     *
     * @param name The name for the emoji.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public IntentSet getIntents() {
        return intents;
    }","/**
     * Returns an {@link IntentSet} containing the {@link discord4j.gateway.intent.Intent}s declared by the user
     *
     * @return The {@link IntentSet} tied to this {@link GatewayResources}
     */",discord4j.core
"public Set<Snowflake> getRoleIds() {
        return data.roles().stream()
                .map(Snowflake::of)
                .collect(Collectors.toSet());
    }","/**
     * Gets the user's guild roles' IDs.
     *
     * @return The user's guild roles' IDs.
     */",discord4j.core.object.command
List<OpenAPI> openAPIList = wrDoc.getTaggedOpenAPIs().get(tag);,"/**
	 * Generate the tag documentation.
	 * 
	 * @param root
	 *            the RootDoc of source to document.
	 * @param wrDoc
	 *            the data structure representing the doc to generate.
	 */",net.winroad.htmldoclet4jdk8
Mono<Void> onReady(Ready dispatch);,"/**
     * Updates the internal state of the store according to the given {@link Ready} gateway dispatch. This will
     * typically perform an insert operation on the {@link UserData} that represents the self-user, and allocate the
     * resources needed to receive further events happening on this shard index.
     *
     * @param dispatch the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"public Publisher<?> onScheduledEventUserAdd(ScheduledEventUserAddEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user subscribes to a scheduled event.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    Message getMessage();","/**
     * The {@link Message} instance.
     *
     * @return The {@link Message}
     */",net.dv8tion.jda.api.interactions.components
"public static final Route MESSAGE_GET = Route.get(""/channels/{channel.id}/messages/{message.id}"");","/**
     * Returns a specific message in the channel. If operating on a guild channel, this endpoints requires the
     * 'READ_MESSAGE_HISTORY' permission to be present on the current user. Returns a message object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#get-channel-message"">
     * https://discord.com/developers/docs/resources/channel#get-channel-message</a>
     */",discord4j.rest.route
"public InteractionHandlerSpec guild(Function<GuildInteraction, InteractionHandler> guildInteractionHandlerFunction) {
        return new InteractionHandlerSpec(guildInteractionHandlerFunction, directInteractionHandlerFunction);
    }","/**
     * Set a guild interaction handler function. Any previous guild interaction handling function set will be
     * overridden.
     *
     * @param guildInteractionHandlerFunction a function to derive an {@link InteractionHandler} from a
     * {@link GuildInteraction}
     * @return this spec for chaining, call {@link #build()} to produce a complete handler
     */",discord4j.rest.interaction
"@Nonnull
        String getDescription();","/**
         * The description of this recommended channel shown in the welcome screen.
         *
         * @return The description of this recommended channel
         */",net.dv8tion.jda.api.entities
"public static GetPresencesAction getPresences() {
        return new GetPresencesAction();
    }","/**
     * Creates an action to retrieve data for all presences present in a store.
     *
     * @return a new {@link GetPresencesAction}
     */",discord4j.common.store.action.read
GatewayClientGroupManager getGroupManager(int shardCount);,"/**
     * Return the {@link GatewayClientGroupManager} to maintain each gateway client in the created group.
     *
     * @param shardCount the total number of shards
     * @return a {@link GatewayClientGroupManager} used by this strategy
     */",discord4j.core.shard
"public static <T> Function<Mono<T>, Publisher<T>> emptyOnStatus(int code) {
        return mono -> mono.onErrorResume(isStatusCode(code), t -> Mono.empty());
    }","/**
     * Transformation function that can be used within an operator such as {@link Mono#transform(Function)} or
     * {@link Mono#transformDeferred(Function)} to turn an error sequence matching the given HTTP status code, into
     * an empty
     * sequence, effectively suppressing the original error.
     *
     * @param code the status code that should be transformed into empty sequences
     * @param <T> the type of the response
     * @return a transformation function that converts error sequences into empty sequences
     */",discord4j.rest.http.client
"@Nonnull
    @CheckReturnValue
    MemberAction setNickname(@Nullable String nick);","/**
     * Sets the nickname of the user for the guild.
     * <br>This will then be visible with {@link net.dv8tion.jda.api.entities.Member#getNickname() Member.getNickname()}.
     *
     * @param  nick
     *         The nickname, or {@code null}
     *
     * @throws IllegalArgumentException
     *         If the provided nickname is longer than 32 characters
     *
     * @return The current MemberAction for chaining
     */",net.dv8tion.jda.api.requests.restaction
"public LegacyRoleEditSpec setName(String name) {
        requestBuilder.name(name);
        return this;
    }","/**
     * Sets the new name of the {@link Role}.
     *
     * @param name The role name.
     * @return This spec.
     */",discord4j.core.spec.legacy
long getPermissionsRaw();,"/**
     * The {@code long} representation of the literal permissions that this {@link net.dv8tion.jda.api.entities.Role Role} has.
     * <br><b>NOTE:</b> these do not necessarily represent the permissions this role will have in a {@link net.dv8tion.jda.api.entities.channel.middleman.GuildChannel GuildChannel}.
     *
     * @return Never-negative long containing offset permissions of this role.
     */",net.dv8tion.jda.api.entities
"public boolean getOldPending()
    {
        return getOldValue();
    }","/**
     * The old pending status
     *
     * @return The old pending status
     */",net.dv8tion.jda.api.events.guild.member.update
"public LegacyGuildCreateSpec setAfkTimeout(@Nullable Integer afkTimeout) {
        builder.afkTimeout(afkTimeout == null ? Possible.absent() : Possible.of(afkTimeout));
        return this;
    }","/**
     * Sets the AFK timeout, in seconds, for the created {@link Guild}.
     *
     * @param afkTimeout The AFK timeout, in seconds.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static GetGuildsAction getGuilds() {
        return new GetGuildsAction();
    }","/**
     * Creates an action to retrieve data for all guilds present in a store.
     *
     * @return a new {@link GetGuildsAction}
     */",discord4j.common.store.action.read
"the null case is handled with an exception
    public byte[] getAudioData(double volume)
    {
        return getAudioData(decode(), volume); // throws IllegalArgument if decode failed
    }","/**
     * Decodes and adjusts the opus audio for the specified volume.
     * <br>The provided volume should be a double precision floating point in the interval from 0 to 1.
     * In this case 0.5 would represent 50% volume for instance.
     *
     * @param  volume
     *         The volume
     *
     * @throws java.lang.IllegalArgumentException
     *         If {@link #decode()} returns null
     *
     * @return The stereo PCM audio data as specified by {@link net.dv8tion.jda.api.audio.AudioReceiveHandler#OUTPUT_FORMAT}.
     */",net.dv8tion.jda.api.audio
"@Nonnull
    @CheckReturnValue
    ChannelAction<MediaChannel> createMediaChannel(@Nonnull String name);","/**
     * Creates a new {@link MediaChannel} with this Category as parent.
     * For this to be successful, the logged in account has to have the
     * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission in this Category.
     *
     * <p>This will copy all {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides} of this Category!
     * Unless the bot is unable to sync it with this category due to permission escalation.
     * See {@link IPermissionHolder#canSync(IPermissionContainer, IPermissionContainer)} for details.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_CHANNELS MAX_CHANNELS}
     *     <br>The maximum number of channels were exceeded</li>
     * </ul>
     *
     * @param  name
     *         The name of the MediaChannel to create (up to {@value Channel#MAX_NAME_LENGTH} characters)
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL} permission
     * @throws IllegalArgumentException
     *         If the provided name is {@code null}, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters
     *
     * @return A specific {@link ChannelAction ChannelAction}
     *         <br>This action allows to set fields for the new MediaChannel before creating it
     */",net.dv8tion.jda.api.entities.channel.concrete
"@Override
        public String toString() {
            return ""[sequence]"";
        }","/**
     * Propagated when the current session sequence value has updated.
     */",discord4j.gateway
void logout();,"/**
     * Caches the kills and deaths of a player.
     */",com.massivecraft.factions
String getTag();,"/**
     * Gets the Tag's string representation.
     *
     * @return tag
     */",com.massivecraft.factions.tag
"public static GuildMembersChunkAction guildMembersChunk(int shardIndex, GuildMembersChunk dispatch) {
        return new GuildMembersChunkAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildMembersChunk} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildMembersChunkAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
        static Channel of(@Nonnull StandardGuildChannel channel, @Nonnull String description, @Nullable Emoji emoji)
        {
            Checks.notNull(channel, ""Channel"");
            Checks.notBlank(description, ""Description"");
            Checks.notLonger(description, MAX_DESCRIPTION_LENGTH, ""Description"");

            return new GuildWelcomeScreenImpl.ChannelImpl(channel.getGuild(), channel.getIdLong(), description, (EmojiUnion) emoji);
        }","/**
         * Constructs a new welcome channel.
         *
         * @param  channel
         *         The Discord channel to be presented the user
         * @param  description
         *         The description of the channel, must not be longer than {@value #MAX_DESCRIPTION_LENGTH}
         * @param  emoji
         *         The emoji to show beside the channel
         *
         * @throws IllegalArgumentException
         *         <ul>
         *             <li>If the channel is null</li>
         *             <li>If the description is null, blank, or longer than {@value #MAX_DESCRIPTION_LENGTH}</li>
         *         </ul>
         *
         * @return The new welcome channel
         */",net.dv8tion.jda.api.entities
"public DefaultShardingStrategy(Builder builder) {
        this.count = builder.shardCount;
        this.indexSource = builder.shardIndexSource;
        this.filter = builder.shardFilter;
        this.maxConcurrency = builder.maxConcurrency;
    }","/**
     * Value representing the use of a recommended amount of shards.
     */",discord4j.core.shard
"@Nonnull
    @CheckReturnValue
    public static <E> Result<E> failure(@Nonnull Throwable error)
    {
        Checks.notNull(error, ""Error"");
        return new Result<>(null, error);
    }","/**
     * Creates a failure result.
     *
     * @param  error
     *         The failure throwable
     * @param  <E>
     *         The success type
     *
     * @throws IllegalArgumentException
     *         If the provided error is null
     *
     * @return Result
     */",net.dv8tion.jda.api.utils
"public final String getCode() {
        return code;
    }","/**
     * Gets the invite code (unique ID).
     *
     * @return The invite code (unique ID).
     */",discord4j.core.event.domain
boolean isRoleOverride();,"/**
     * Used to determine if this PermissionOverride relates to
     * a specific {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * @return True if this override is a role override.
     */",net.dv8tion.jda.api.entities
"public Mono<MessageData> executeWebhook(long webhookId, String token, boolean wait, long threadId,
                                            MultipartRequest<? extends WebhookExecuteRequest> request) {
        return Routes.WEBHOOK_EXECUTE
            .newRequest(webhookId, token)
            .query(""wait"", wait)
            .query(""thread_id"", threadId)
            .header(""content-type"", request.getFiles().isEmpty() ? ""application/json"" : ""multipart/form-data"")
            .body(Objects.requireNonNull(request.getFiles().isEmpty() ? request.getJsonPayload() : request))
            .exchange(getRouter())
            .bodyToMono(MessageData.class);
    }","/**
     * Executes the specified webhook.
     *
     * @param wait true if you want to return message data and errors for the webhook.
     * @param threadId specify the thread id within a webhook's channel.
     * @return If wait is true, a mono that contains the message information of the execution or an
     * error if the webhook is unsuccessful. If wait is false, the mono completes as soon as the request
     * is finished sending, and DOES NOT result in an error if the message is not saved.
     */",discord4j.rest.service
"public Publisher<?> onRoleCreate(RoleCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a role is created in a guild.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static boolean getBoolean(@Nonnull DataObject root, @Nonnull String path)
    {
        Boolean bool = get(root, path, DataObject::getBoolean, DataArray::getBoolean);
        return bool != null && bool;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The boolean value at the given path, if declared as optional this returns false when the value is missing.
     */",net.dv8tion.jda.api.utils.data
"public static GetRolesInGuildAction getRolesInGuild(long guildId) {
        return new GetRolesInGuildAction(guildId);
    }","/**
     * Creates an action to retrieve data for all roles present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link GetRolesInGuildAction}
     */",discord4j.common.store.action.read
"@Nonnull
    @CheckReturnValue
    default MessageEditCallbackAction editMessageAttachments(@Nonnull Collection<? extends AttachedFile> attachments)
    {
        Checks.noneNull(attachments, ""Attachments"");
        return deferEdit().setAttachments(attachments);
    }","/**
     * Acknowledgement of this interaction with a message update.
     * <br>You can use {@link #getHook()} to edit the message further.
     *
     * <p><b>You can only use deferEdit() or editMessage() once per interaction!</b> Use {@link #getHook()} for any additional updates.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * @param  attachments
     *         The new attachments of the message (Can be {@link FileUpload FileUploads} or {@link net.dv8tion.jda.api.utils.AttachmentUpdate AttachmentUpdates})
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link MessageEditCallbackAction} that can be used to further update the message
     *
     * @see    AttachedFile#fromAttachment(Message.Attachment)
     * @see    FileUpload#fromData(InputStream, String)
     */",net.dv8tion.jda.api.interactions.callbacks
"@Override
        long getIdLong();","/**
         * The id of this recommended channel.
         *
         * @return The id of this recommended channel
         */",net.dv8tion.jda.api.entities
"@Deprecated
    public Optional<String> getNewDiscriminator() {
        return user.discriminator().toOptional();
    }","/**
     * Gets the {@link User}'s new discriminator, if present.
     * This may not exist if the {@code User}'s discriminator has not been changed.
     *
     * @return The {@link User}'s new discriminator, if present.
     * @deprecated This method will be removed once the system change is complete.
     */",discord4j.core.event.domain
"public Builder setJitterFactor(double jitterFactor) {
            if (jitterFactor < 0d || jitterFactor > 1d) {
                throw new IllegalArgumentException(""Invalid jitter factor value"");
            }
            this.jitterFactor = jitterFactor;
            return this;
        }","/**
         * Set a jitter factor for exponential backoff that adds randomness to each backoff. Defaults to {@code 0.5}
         * (a jitter of at most 50% of the computed delay)
         *
         * @param jitterFactor the new jitter factor as a {@code double} between {@code 0d} and {@code 1d}
         * @return this builder
         */",discord4j.common.retry
"public static final Route GUILD_CHANNEL_POSITIONS_MODIFY = Route.patch(""/guilds/{guild.id}/channels"");","/**
     * Modify the positions of a set of role objects for the guild. Requires the 'MANAGE_ROLES' permission. Returns a
     * list of all of the guild's role objects on success. Fires multiple Guild Role Update Gateway events.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions"">
     * https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions</a>
     */",discord4j.rest.route
long getInherited();,"/**
     * The currently set of inherited permission bits.
     * <br>This value represents all permissions that are not explicitly allowed or denied
     * in their raw bitwise representation.
     * <br>Inherited Permissions are permissions that are defined by other rules
     * from maybe other PermissionOverrides or a Role.
     *
     * <p>Use {@link #getInheritedPermissions()} to retrieve a {@link java.util.List List}
     * with {@link net.dv8tion.jda.api.Permission Permissions} for this value
     *
     * @return long value of inherited permissions
     */",net.dv8tion.jda.api.requests.restaction
"public Set<Snowflake> getRecipientIds() {
        return getData().recipients().toOptional()
            .map(recipients -> recipients.stream()
                .map(UserData::id)
                .map(Snowflake::of)
                .collect(Collectors.toSet()))
            .orElse(Collections.emptySet());
    }","/**
     * Gets the IDs of the recipients for this private channel.
     *
     * @return The IDs of the recipients for this private channel.
     */",discord4j.core.object.entity.channel
"@Nonnull
        public EnumSet<Permission> getDenied()
        {
            return Permission.getPermissions(deny);
        }","/**
         * EnumSet of all {@link net.dv8tion.jda.api.Permission Permissions} that are denied by this override.
         * <br><u>Changes to the returned set do not affect this entity directly.</u>
         *
         * @return Possibly-empty set of denied {@link net.dv8tion.jda.api.Permission Permissions}.
         */",net.dv8tion.jda.api.entities.templates
long getIntegrationIdLong();,"/**
         * The id for the integration associated with this role.
         *
         * @return The integration id, or 0 if this role is not for an integration
         *
         * @see    #isIntegration()
         */",net.dv8tion.jda.api.entities
"public static GetEmojiByIdAction getEmojiById(long guildId, long emojiId) {
        return new GetEmojiByIdAction(guildId, emojiId);
    }","/**
     * Creates an action to retrieve data for the emoji corresponding to the given guild ID and emoji ID.
     *
     * @param guildId the guild ID
     * @param emojiId the emoji ID
     * @return a new {@link GetEmojiByIdAction}
     */",discord4j.common.store.action.read
"@Nonnull
    default ImageProxy getDefaultAvatar()
    {
        return new ImageProxy(getDefaultAvatarUrl());
    }","/**
     * Returns an {@link ImageProxy} for this user's default avatar.
     *
     * @return Never-null {@link ImageProxy} of this user's default avatar
     *
     * @see    #getDefaultAvatarUrl()
     */",net.dv8tion.jda.api.entities
"@Nonnull
    public EnumSet<Permission> getNewPermissions()
    {
        return getNewValue();
    }","/**
     * The new permissions
     *
     * @return The new permissions
     */",net.dv8tion.jda.api.events.role.update
"@Nonnull
    @Override
    RoleManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * <br>Example: {@code manager.reset(RoleManager.COLOR, RoleManager.NAME);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #COLOR}</li>
     *     <li>{@link #PERMISSION}</li>
     *     <li>{@link #HOIST}</li>
     *     <li>{@link #MENTIONABLE}</li>
     *     <li>{@link #ICON}</li>
     * </ul>
     *
     * @param  fields
     *         Integer values containing the flags to reset.
     *
     * @return RoleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
void setClassic(long timestamp);,"/**
         * Set the current global rate-limit reset time.
         * <br>This is the rate-limit applied on the bot token.
         *
         * @param timestamp
         *        The timestamp when the global rate-limit expires (unix timestamp in milliseconds)
         */",net.dv8tion.jda.api.requests
"@Nullable
    default String getAlertMessageId()
    {
        long id = getAlertMessageIdLong();
        return id == 0L ? null : Long.toUnsignedString(getAlertMessageIdLong());
    }","/**
     * The id of the alert {@link net.dv8tion.jda.api.entities.Message Message} sent to the alert channel.
     *
     * @return The id of the alert message, or {@code null} if {@link AutoModResponse#getType()} is not {@link AutoModResponse.Type#SEND_ALERT_MESSAGE}
     */",net.dv8tion.jda.api.entities.automod
"default Mono<Guild> getGuild() {
        return getClient().getGuildById(getGuildId());
    }","/**
     * Requests to retrieve the guild this channel is associated to.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link Guild guild} this channel is
     * associated to. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"public static final Route CURRENT_MEMBER_MODIFY = Route.patch(""/guilds/{guild.id}/members/@me"");","/**
     * Modifies the current member in a guild. Returns a 200 with the updated member on success. Fires a Guild
     * Member Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#modify-current-member"">Discord</a>
     */",discord4j.rest.route
public abstract ItemStack buildGuiItem(Faction faction);,"/**
     * Method to build the item that will appear in upgrade menu. You can return guiItem instance variable.
     *
     * @param faction faction
     * @return ItemStack
     */",com.massivecraft.factions.addon.upgradeaddon
"@Nonnull
    DataObject toData();","/**
     * Serialized {@link net.dv8tion.jda.api.utils.data.DataObject} for this object.
     *
     * @return {@link net.dv8tion.jda.api.utils.data.DataObject}
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    public Map<String, AuditLogChange> getChanges()
    {
        return changes;
    }","/**
     * Key-Value {@link java.util.Map Map} containing all {@link AuditLogChange
     * AuditLogChanges} made in this entry.
     * The keys for the returned map are case-insensitive keys defined in the regarding AuditLogChange value.
     * <br>To iterate only the changes you can use {@link java.util.Map#values() Map.values()}!
     *
     * @return Key-Value Map of changes
     */",net.dv8tion.jda.api.audit
"@RequestMapping(value = ""list"", method = RequestMethod.GET)
    public Flux<CityGetDTO> list() {
        return service.list();
    }","/**
     * This method is used to return the result.
     *
     * @return Flux<CityGetDTO>
     * @since 1.0
     */",org.khasanof.citiesapi.controller.city
"default void setContextMap(@CheckForNull ConcurrentMap<String, String> contextMap) {}","/**
     * Called with the internal JDA {@link org.slf4j.MDC MDC} context map.
     * <br>This is guaranteed to be called before {@link #start()}.
     *
     * @param contextMap
     *        The JDA internal MDC context map, or {@code null} if disabled
     */",net.dv8tion.jda.api.audio.factory
"public ExchangeStrategies build() {
            return new DefaultExchangeStrategies(writerStrategies, readerStrategies);
        }","/**
         * Builds the {@link discord4j.rest.http.ExchangeStrategies}
         *
         * @return the built strategies
         */",discord4j.rest.http
"@Deprecated
    Mono<VoiceServerOptions> onVoiceServerUpdate(Snowflake guildId);","/**
     * Return a Mono sequence containing an eventual {@link VoiceServerOptions} instance indicating a voice server
     * update payload was received from the gateway connection for the given guild.
     *
     * @param guildId the guild ID listening for voice server updates
     * @return a Mono with a VoiceServerOptions payload
     * @deprecated for removal in future versions, migrate to {@link #onVoiceServerUpdates(Snowflake)} as voice clients
     * can receive multiple voice server updates throughout their lifecycle
     */",discord4j.voice
"public Mono<Void> delete(@Nullable final String reason) {
        return gateway.getRestClient().getChannelService()
                .deleteChannelPermission(channelId, getTargetId().asLong(), reason);
    }","/**
     * Requests to delete this permission overwrite while optionally specifying a reason.
     *
     * @param reason The reason, if present.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the permission overwrite has
     * been deleted. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
    @CheckReturnValue
    RoleAction setMentionable(@Nullable Boolean mentionable);","/**
     * Sets whether the new role should be mentionable by members of
     * the parent {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  mentionable
     *         Whether the new role should be mentionable. Default is {@code false}
     *
     * @return The current RoleAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"static RetryingTransformer retryOnceOnErrorStatus(RouteMatcher routeMatcher, Integer... codes) {
        return new RetryingTransformer(routeMatcher,
            RetryBackoffSpec.backoff(1, Duration.ofSeconds(1))
                .filter(exception -> ClientException.isStatusCode(codes).test(exception)));
    }","/**
     * Applies a retry strategy to retry <strong>once</strong> with a fixed backoff of 1 second to the given
     * <strong>error</strong> status codes caused by requests matching the given {@link RouteMatcher}, effectively
     * suppressing the {@link ClientException} that would be forwarded otherwise.
     * <p>
     * Only a subset of HTTP status codes is supported, like all the ones from 400 and 500 series, except for the 429
     * (Too Many Requests) error that is handled upstream.
     * <p>
     * Please note that if you specify error codes 502, 503 or 504 you will replace a built-in retry factory that
     * handles Discord service errors using an exponential backoff with jitter strategy.
     *
     * @param routeMatcher the {@link RouteMatcher} determining whether to match a particular request
     * @param codes the list of HTTP status codes to match when applying this transformation
     * @return a {@link ResponseFunction} that transforms matching response statuses into sequence that retries the
     * request once after waiting 1 second.
     */",discord4j.rest.response
"public Optional<User> getInviter() {
        return Optional.ofNullable(inviter);
    }","/**
     * Gets the user that created the invite, if present.
     *
     * @return The user that created the invite, if present.
     */",discord4j.core.event.domain
"public ImageProxy(@Nonnull String url)
    {
        super(url);
    }","/**
     * Constructs a new {@link ImageProxy} for the provided URL.
     *
     * @param  url
     *         The URL to download the image from
     *
     * @throws IllegalArgumentException
     *         If the provided URL is null
     */",net.dv8tion.jda.api.utils
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction addChoice(@Nonnull String name, long value)
    {
        return addChoices(new Command.Choice(name, value));
    }","/**
     * Add up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * @param  name
     *         The choice name to show to the user, 1-{@value OptionData#MAX_CHOICE_NAME_LENGTH} characters
     * @param  value
     *         The choice value, must be between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the choice name is empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the value is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return The same callback action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.interactions
"@Nonnull
    public String getNewImageUrl()
    {
        return getNewValue();
    }","/**
     * The new {@link ScheduledEvent#getImageUrl() image}.
     *
     * @return The new image
     */",net.dv8tion.jda.api.events.guild.scheduledevent.update
boolean isMfaEnabled();,"/**
     * If true, this account is protected by Multi-Factor authorization.
     * <br>If this is a Client account, then this describes the MFA status of the Client account.
     * <br>If this is a Bot account, then this describes the MFA status of the Client account that owns this Bot.
     *
     * @return True, if this account has MFA protecting it.
     */",net.dv8tion.jda.api.entities
"public UnknownChannel getCurrent() {
        return current;
    }","/**
     * Gets the current, new version of the {@link UnknownChannel} that was updated in this event.
     *
     * @return The current version of the updated {@link UnknownChannel}.
     */",discord4j.core.event.domain.channel
"public boolean isModerated() {
        return data.moderated();
    }","/**
     * Gets whether this tag is moderated, meaning only members with the MANAGE_THREADS permission can use it
     *
     * @return {@code true} if this tag is moderated
     */",discord4j.core.object.entity
"@Nonnull
        JDA.ShardInfo getShardInfo();","/**
         * The {@link net.dv8tion.jda.api.JDA.ShardInfo ShardInfo} for this request.
         * <br>Can be used for a priority system.
         *
         * @return The ShardInfo
         */",net.dv8tion.jda.api.utils
"@Nonnull
    @CheckReturnValue
    AccountManager setBanner(@Nullable Icon banner);","/**
     * Sets the banner for the currently logged in account
     *
     * @param  banner
     *         An {@link net.dv8tion.jda.api.entities.Icon Icon} instance representing
     *         the new banner for the current account, {@code null} to reset the banner to the default banner.
     *
     * @return AccountManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"Mono<MessageData> onMessageUpdate(int shardIndex, MessageUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link MessageUpdate} gateway dispatch. This
     * will typically perform an update operation on a related {@link MessageData} that is already present in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link MessageData} before the update
     */",discord4j.common.store.api.layout
"public Duration getMaxBackoffInterval() {
        return maxBackoffInterval;
    }","/**
     * Return the maximum backoff duration.
     *
     * @return maximum backoff duration
     */",discord4j.common.retry
"@Nonnull
    EnumSet<Permission> getPermissionsExplicit(@Nonnull GuildChannel channel);","/**
     * The explicitly granted permissions for this permission holder in the guild.
     * <br>This disregards owner and administrator privileges.
     * <br>Permissions returned by this may be different from {@link #getPermissionsExplicit()}
     * due to the GuildChannel's {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides}.
     * <br><u>Changes to the returned set do not affect this entity directly.</u>
     *
     * @param  channel
     *         The {@link GuildChannel GuildChannel} of which to get Permissions for
     *
     * @throws java.lang.IllegalArgumentException
     *         If the channel is null
     *
     * @return EnumSet of the explicitly granted permissions in the specified channel
     */",net.dv8tion.jda.api.entities
"public synchronized void shutdown()
        {
            if (pool != null)
            {
                pool.shutdown();
                pool = null;
            }
        }","/**
         * Shuts down the shared pool and the temporary pool.
         */",net.dv8tion.jda.api.sharding
"@Nullable
    ConnectionListener getConnectionListener();","/**
     * The currently set {@link net.dv8tion.jda.api.audio.hooks.ConnectionListener ConnectionListener}
     * or {@code null} if no {@link net.dv8tion.jda.api.audio.hooks.ConnectionListener ConnectionListener} has been {@link #setConnectionListener(ConnectionListener) set}.
     *
     * @return The current {@link net.dv8tion.jda.api.audio.hooks.ConnectionListener ConnectionListener} instance
     *         for this AudioManager.
     */",net.dv8tion.jda.api.managers
"public LegacyMessageEditSpec setComponents(List<LayoutComponent> components) {
        this.components = Possible.of(Optional.of(components.stream().map(LayoutComponent::getData).collect(Collectors.toList())));
        return this;
    }","/**
     * Sets the components of the message.
     *
     * @param components The message components.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    M putPermissionOverride(@Nonnull IPermissionHolder permHolder, long allow, long deny);","/**
     * Adds an override for the specified {@link IPermissionHolder IPermissionHolder}
     * with the provided raw bitmasks as allowed and denied permissions. If the permission holder already
     * had an override on this channel it will be replaced instead.
     *
     * @param  permHolder
     *         The permission holder
     * @param  allow
     *         The bitmask to grant
     * @param  deny
     *         The bitmask to deny
     *
     * @throws IllegalArgumentException
     *         If the provided permission holder is {@code null}
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         in this channel, or tries to set permissions it does not have without having {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS} explicitly for this channel through an override.
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    #putPermissionOverride(IPermissionHolder, Collection, Collection)
     * @see    Permission#getRaw(Permission...) Permission.getRaw(Permission...)
     */",net.dv8tion.jda.api.managers.channel.attribute
Flux<MessageData> getMessagesInChannel(long channelId);,"/**
     * Retrieves data for all messages present in the store for the given channel ID.
     *
     * @param channelId the channel ID
     * @return A {@link Flux} emitting the messages, or empty if none is present
     */",discord4j.common.store.api.layout
"Mono<Set<EmojiData>> onGuildEmojisUpdate(int shardIndex, GuildEmojisUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link GuildEmojisUpdate} gateway dispatch.
     * This will typically perform an update operation on a related collection of {@link EmojiData} that is already
     * present in the store, and update the list returned by {@link GuildData#emojis()}.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * set of {@link EmojiData} before the update
     */",discord4j.common.store.api.layout
"@Nonnull
        public Builder setPlaceholder(@Nullable String placeholder)
        {
            if (placeholder != null)
            {
                Checks.notLonger(placeholder, MAX_PLACEHOLDER_LENGTH, ""Placeholder"");
                Checks.notBlank(placeholder, ""Placeholder"");
            }
            this.placeholder = placeholder;
            return this;
        }","/**
         * Sets a placeholder for this TextInput field.
         * <br>This is a short hint that describes the expected value of the input field.
         *
         * @param  placeholder 
         *         The placeholder
         *
         * @throws IllegalArgumentException
         *         If the provided placeholder is longer than {@link #MAX_PLACEHOLDER_LENGTH} characters
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.components.text
"public String getBanner() {
        return this.banner;
    }","/**
     * Get the FPlayer ID of the player who issued the ban.
     *
     * @return FPlayer ID.
     */",com.massivecraft.factions.struct
"public HikariConfig applyDefaultHikariConfig() {
        this.hikariConfig = new HikariConfig();

        this.hikariConfig.setDriverClassName(""com.mysql.jdbc.Driver"");
        this.hikariConfig.setJdbcUrl(""jdbc:mysql://"" + this.connectionData.getHost() + "":"" + this.connectionData.getPort() + ""/"" + this.connectionData.getDatabase() + ""?serverTimezone=UTC"");
        this.hikariConfig.setUsername(connectionData.getUsername());
        this.hikariConfig.setPassword(connectionData.getPassword());

        this.hikariConfig.addDataSourceProperty(""cachePrepStmts"", true);
        this.hikariConfig.addDataSourceProperty(""prepStmtCacheSize"", 250);
        this.hikariConfig.addDataSourceProperty(""prepStmtCacheSqlLimit"", 2048);
        this.hikariConfig.addDataSourceProperty(""useServerPrepStmts"", true);
        this.hikariConfig.addDataSourceProperty(""useLocalSessionState"", true);
        this.hikariConfig.addDataSourceProperty(""rewriteBatchedStatements"", true);
        this.hikariConfig.addDataSourceProperty(""cacheResultSetMetadata"", true);
        this.hikariConfig.addDataSourceProperty(""cacheServerConfiguration"", true);
        this.hikariConfig.addDataSourceProperty(""elideSetAutoCommits"", true);
        this.hikariConfig.addDataSourceProperty(""maintainTimeStats"", false);

        return this.hikariConfig;
    }","/**
     * Gets a new {@link HikariConfig} based on given {@link ConnectionData} with values from https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration
     * @return {@link HikariConfig} containing recommended properties and connection-information
     */",io.github.heliumdioxid.database.mysql.config
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoices(@Nonnull Command.Choice... choices)
    {
        Checks.noneNull(choices, ""Choice"");
        return replyChoices(Arrays.asList(choices));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * @param  choices
     *         The choice suggestions to present to the user, 0-{@value OptionData#MAX_CHOICES} choices
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If any of the choice names are empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the numeric value of any of the choices is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *             <li>If the string value of any of the choices is empty or longer than {@value OptionData#MAX_CHOICE_VALUE_LENGTH}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"public VoiceReactorResources(ReactorResources parent, UdpClient udpClient, Scheduler sendTaskScheduler,
                                 Scheduler receiveTaskScheduler) {
        super(parent.getHttpClient(), parent.getTimerTaskScheduler(), parent.getBlockingTaskScheduler());
        this.udpClient = udpClient;
        this.sendTaskScheduler = sendTaskScheduler;
        this.receiveTaskScheduler = receiveTaskScheduler;
    }","/**
     * Create Voice Gateway resources based off {@link ReactorResources} properties, and allowing customization of the
     * remaining properties.
     *
     * @param parent the resources instance to get properties from
     * @param udpClient the UDP client used to create voice protocol connections
     * @param sendTaskScheduler the scheduler used to run the voice send loop
     * @param receiveTaskScheduler the scheduler used to run the voice receive loop
     */",discord4j.voice
"Mono<Void> onThreadDelete(int shardIndex, ThreadDelete dispatch);","/**
     * Updates the internal state of the store according to the given {@link ThreadDelete} gateway dispatch. This
     * will typically perform a delete operation on a related {@link ChannelData} that is already present in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"@Nonnull
        public String getLabel()
        {
            return label;
        }","/**
         * The label shown above this text input box
         *
         * @return Label for the input
         */",net.dv8tion.jda.api.interactions.components.text
"public static final Route WEBHOOK_MESSAGE_EDIT = Route.patch(""/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}"");","/**
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#edit-webhook-message"">
     * https://discord.com/developers/docs/resources/webhook#edit-webhook-message</a>
     */",discord4j.rest.route
"@Nonnull
    public Guild getGuild()
    {
        if (!isFromGuild())
            throw new IllegalStateException(""This message event did not happen in a guild"");

        return ((GuildChannel) channel).getGuild();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Guild Guild} the Message was received in.
     * <br>If this Message was not received in a {@link net.dv8tion.jda.api.entities.Guild Guild},
     * this will throw an {@link java.lang.IllegalStateException}.
     *
     * @throws java.lang.IllegalStateException
     *         If this was not sent in a {@link net.dv8tion.jda.api.entities.channel.middleman.GuildChannel}.
     *
     * @return The Guild the Message was received in
     *
     * @see    #isFromGuild()
     * @see    #isFromType(ChannelType)
     * @see    #getChannelType()
     */",net.dv8tion.jda.api.events.message
Snowflake getChannelId();,"/**
     * Return the channel ID where this interaction was created.
     *
     * @return this interaction Snowflake channel ID
     */",discord4j.rest.interaction
"@Override
    public CompletableFuture<Boolean> isConnected() {
        return CompletableFuture.supplyAsync(() -> this.mongoClient != null && this.mongoDatabase != null);
    }",/** {@inheritDoc} */,io.github.heliumdioxid.database.mongo
"@Nonnull
    @Override
    @CheckReturnValue
    AccountManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * <br>Example: {@code manager.reset(AccountManager.NAME, AccountManager.AVATAR);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #AVATAR}</li>
     * </ul>
     *
     * @param  fields
     *         Integer values containing the flags to reset.
     *
     * @return AccountManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public HttpHeaders getHeaders() {
        return getResponse().responseHeaders();
    }","/**
     * Return the {@link HttpHeaders} from the error <strong>response</strong>. To get request headers refer to
     * {@link #getRequest()} and then {@link ClientRequest#getHeaders()}.
     *
     * @return the HTTP response headers
     */",discord4j.rest.http.client
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoice(@Nonnull String name, double value)
    {
        return replyChoices(new Command.Choice(name, value));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * @param  name
     *         The choice name to show to the user, 1-{@value OptionData#MAX_CHOICE_NAME_LENGTH} characters
     * @param  value
     *         The choice value, must be between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the choice name is empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the value of is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"@Deprecated
    public LegacyGuildEditSpec setSystemChannelFlags(@Nullable Guild.SystemChannelFlag flag) {
        requestBuilder.systemChannelFlags(flag == null ? Possible.absent() : Possible.of(flag.getValue()));
        return this;
    }","/**
     * Sets the system channel flags.
     *
     * @param flag The system channel flags.
     * @return This spec.
     * @deprecated use {@link #setSystemChannelFlags(Guild.SystemChannelFlag...)}
     */",discord4j.core.spec.legacy
"@Nonnull
    M moveBelow(@Nonnull T other);","/**
     * Moves the currently selected entity below the specified target entity.
     *
     * @param  other
     *         The reference entity that should end up above the selected entity
     *
     * @throws IllegalStateException
     *         If no entity has been selected yet, use {@link #selectPosition(Object)}
     * @throws IllegalArgumentException
     *         If the specified target entity is not managed by this instance or null
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    #moveUp(int)
     * @see    #moveDown(int)
     * @see    #moveAbove(Object)
     */",net.dv8tion.jda.api.requests.restaction.order
"@Nonnull
    @CheckReturnValue
    default PermissionOverrideAction grant(@Nonnull Permission... permissions)
    {
        return grant(Permission.getRaw(permissions));
    }","/**
     * Grants the specified permissions.
     * <br>This does not override already granted permissions.
     *
     * @param  permissions
     *         The permissions to grant, in addition to already allowed permissions
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     * @throws IllegalArgumentException
     *         If any provided argument is null
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public AuditLogService getAuditLogService() {
        return auditLogService;
    }","/**
     * Access a low-level representation of the API endpoints for the Audit Log resource.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
long getUserIdLong();,"/**
     * The id of the user that triggered this execution.
     *
     * @return The id of the user
     */",net.dv8tion.jda.api.entities.automod
boolean isConnected();,"/**
     * This can be used to find out if JDA currently has an active audio connection with a
     * {@link net.dv8tion.jda.api.entities.channel.middleman.AudioChannel AudioChannel}. If this returns true, then
     * {@link #getConnectedChannel()} will return the {@link net.dv8tion.jda.api.entities.channel.middleman.AudioChannel AudioChannel} which
     * JDA is connected to.
     *
     * @return True, if JDA currently has an active audio connection.
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    M setRegion(@Nonnull Region region);","/**
     * Sets the {@link Region Region} of the selected {@link AudioChannel}.
     * <br>The default value is {@link Region#AUTOMATIC}
     *
     * Possible values are:
     * <ul>
     *     <li>{@link Region#AUTOMATIC}</li>
     *     <li>{@link Region#US_WEST}</li>
     *     <li>{@link Region#US_EAST}</li>
     *     <li>{@link Region#US_CENTRAL}</li>
     *     <li>{@link Region#US_SOUTH}</li>
     *     <li>{@link Region#SINGAPORE}</li>
     *     <li>{@link Region#SOUTH_AFRICA}</li>
     *     <li>{@link Region#SYDNEY}</li>
     *     <li>{@link Region#INDIA}</li>
     *     <li>{@link Region#SOUTH_KOREA}</li>
     *     <li>{@link Region#BRAZIL}</li>
     *     <li>{@link Region#JAPAN}</li>
     *     <li>{@link Region#RUSSIA}</li>
     * </ul>
     *
     * <br><b>This is only available to {@link AudioChannel AudioChannels}!</b>
     *
     * @param region
     *        The new {@link Region Region}
     *
     * @throws IllegalStateException
     *         If the selected channel is not an {@link AudioChannel}
     * @throws IllegalArgumentException
     *         If the provided Region is not in the list of usable values
     *
     * @return ChannelManager for chaining convenience
     */",net.dv8tion.jda.api.managers.channel.middleman
"public boolean isAnimated() {
            return isAnimated;
        }","/**
         * Gets whether this emoji is animated.
         *
         * @return Whether this emoji is animated.
         */",discord4j.core.object.reaction
"public LegacyWebhookCreateSpec setAvatar(@Nullable Image avatar) {
        this.avatar = avatar == null ? null : avatar.getDataUri();
        return this;
    }","/**
     * Sets the image of the created {@link Webhook}.
     *
     * @param avatar The webhook image.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nullable
    String getDescription();","/**
     * The server description shown in the welcome screen.
     * <br>This will be {@code null} if the welcome screen has no description.
     *
     * @return The server description shown in the welcome screen or {@code null}
     */",net.dv8tion.jda.api.entities
"@Nonnull
    default String getJumpUrl()
    {
        return Helpers.format(JUMP_URL, getGuild().getId(), getId());
    }","/**
     * Returns the jump-to URL for this channel. Clicking this URL in the Discord client will cause the client to
     * jump to the specified channel.
     *
     * @return A String representing the jump-to URL for the channel.
     */",net.dv8tion.jda.api.entities.channel.middleman
"@Nonnull
        Member getMember();","/**
         * Gets the {@link net.dv8tion.jda.api.entities.Widget.Member Member} to which this
         * VoiceState belongs
         * 
         * @return the member
         */",net.dv8tion.jda.api.entities
"@Nullable
        Guild getGuild();","/**
         * The {@link Guild Guild}, or {@code null} if this welcome channel came from an {@link Invite}
         *
         * @return The Guild, or {@code null}
         */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    RestAction<Void> cancelRequestToSpeak();","/**
     * Cancels the {@link #requestToSpeak() Request-to-Speak}.
     * <br>This can also be used to move back to the audience if you are currently a speaker.
     *
     * <p>If there is no request to speak or the member is not currently connected to an active {@link StageInstance}, this does nothing.
     *
     * @throws IllegalStateException
     *         If the self member is not currently connected to the channel
     *
     * @return {@link RestAction}
     *
     * @see    #requestToSpeak()
     */",net.dv8tion.jda.api.entities.channel.concrete
"public Snowflake getUserId() {
        return Snowflake.of(user.id());
    }","/**
     * Gets the {@link Snowflake} ID of the {@link User} whose presence has been updated in this event.
     *
     * @return The ID of the {@link User} whose presence has been updated.
     */",discord4j.core.event.domain
"public boolean isMuted() {
        return data.mute();
    }","/**
     * Gets whether this user is muted by the server.
     *
     * @return {@code true} if the user is deafened by the server, {@code false} otherwise.
     */",discord4j.core.object
"@Nonnull
    @Unmodifiable
    default List<VoiceChannel> getVoiceChannelsByName(@Nonnull String name, boolean ignoreCase)
    {
        return getVoiceChannelCache().getElementsByName(name, ignoreCase);
    }","/**
     * Gets a list of all {@link VoiceChannel VoiceChannels}
     * in this Guild that have the same name as the one provided.
     * <br>If there are no channels with the provided name, then this returns an empty list.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  name
     *         The name used to filter the returned {@link VoiceChannel VoiceChannels}.
     * @param  ignoreCase
     *         Determines if the comparison ignores case when comparing. True - case insensitive.
     *
     * @return Possibly-empty immutable list of all VoiceChannel names that match the provided name.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Deprecated
        public Builder setBackoff(Backoff backoff) {
            this.backoff = backoff;
            return this;
        }","/**
         * Set the backoff function given by reactor-extra {@link Backoff} type. Defaults to an exponential backoff
         * strategy that uses a context object for obtaining the actual iteration.
         *
         * @param backoff a backoff function to apply on retries
         * @return this builder
         * @deprecated only select implementations will use this value. Moving forward, consider assuming an
         * exponential backoff function bounded by {@link #getFirstBackoff()} and {@link #getMaxBackoffInterval()}
         */",discord4j.common.retry
"@Nonnull
        Route.CompiledRoute getRoute();","/**
         * The {@link Route.CompiledRoute compiled route} of the request.
         * <br>This is primarily used to handle rate-limit buckets.
         *
         * <p>To correctly handle rate-limits, it is recommended to use the {@link #HASH_HEADER bucket hash} header from the response.
         *
         * @return The {@link Route.CompiledRoute compiled route}
         */",net.dv8tion.jda.api.requests
"boolean isNumber = arg.matches(""\\d+"");","/**
     * Handle command with arguments.
     *
     * @param event
     *        The event for this command
     * @param guild
     *        The guild where its happening
     * @param arg
     *        The input argument
     */",
"public Optional<PartialMember> getMember() {
        return data.member().toOptional()
            .map(memberData -> new PartialMember(gateway, data.user(), memberData, guildId.asLong()));
    }","/**
     * Gets the {@link PartialMember}, if the user is a member of the guild the event is belongs to.
     *
     * @return The {@code PartialMember}, if the user is a member of the guild the event is belongs to.
     */",discord4j.core.object
"@Nonnull
    String getAsMention();","/**
     * Retrieve a Mention for this Entity.
     * For the public {@link net.dv8tion.jda.api.entities.Role Role} (@everyone), this will return the literal string {@code ""@everyone""}.
     *
     * @return A resolvable mention.
     */",net.dv8tion.jda.api.entities
"@Nonnull
        public abstract T build();","/**
         * Creates a new {@link SelectMenu} instance if all requirements are satisfied.
         *
         * @throws IllegalArgumentException
         *         Throws if {@link #getMinValues()} is greater than {@link #getMaxValues()}
         *
         * @return The new {@link SelectMenu} instance
         */",net.dv8tion.jda.api.interactions.components.selections
"public int getGuildTotalCount()
    {
        return getGuildAvailableCount() + getGuildUnavailableCount();
    }","/**
     * Sum of both {@link #getGuildAvailableCount()} and {@link #getGuildUnavailableCount()}.
     *
     * @return Total numbers of guilds known to this JDA session
     */",net.dv8tion.jda.api.events.session
"@Nonnull
    @CheckReturnValue
    default PermOverrideManager grant(@Nonnull Collection<Permission> permissions)
    {
        return grant(Permission.getRaw(permissions));
    }","/**
     * Grants the provided {@link net.dv8tion.jda.api.Permission Permissions}
     * to the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     *
     * @param  permissions
     *         The permissions to grant to the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @throws IllegalArgumentException
     *         If any of the provided Permissions is {@code null}
     *
     * @return PermOverrideManager for chaining convenience
     *
     * @see    java.util.EnumSet EnumSet
     * @see    net.dv8tion.jda.api.Permission#getRaw(java.util.Collection) Permission.getRaw(Collection)
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    default WebhookMessageEditAction<Message> editOriginalEmbeds(@Nonnull MessageEmbed... embeds)
    {
        return editMessageEmbedsById(""@original"", embeds);
    }","/**
     * Edit the source message sent by this interaction.
     * <br>For {@link IMessageEditCallback#editComponents(Collection)} and {@link IMessageEditCallback#deferEdit()} this will be the message the components are attached to.
     * For {@link IReplyCallback#deferReply()} and {@link IReplyCallback#reply(String)} this will be the reply message instead.
     *
     * <p>This method will be delayed until the interaction is acknowledged.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_WEBHOOK UNKNOWN_WEBHOOK}
     *     <br>The webhook is no longer available, either it was deleted or in case of interactions it expired.</li>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The message for that id does not exist</li>
     * </ul>
     *
     * @param  embeds
     *         The new {@link MessageEmbed MessageEmbeds} to use
     *
     * @throws IllegalArgumentException
     *         If the provided embeds are null, or more than 10
     *
     * @return {@link WebhookMessageEditAction}
     */",net.dv8tion.jda.api.interactions
"@Nonnull
    @CheckReturnValue
    M setSlowmode(int slowmode);","/**
     * Sets the <b><u>slowmode</u></b> of the selected channel.
     * <br>Provide {@code 0} to disable slowmode.
     *
     * <p>A channel slowmode <b>must not</b> be negative nor greater than {@link ISlowmodeChannel#MAX_SLOWMODE}!
     *
     * <p>Note: Bots are unaffected by this.
     * <br>Having {@link Permission#MESSAGE_MANAGE MESSAGE_MANAGE} or
     * {@link Permission#MANAGE_CHANNEL MANAGE_CHANNEL} permission also
     * grants immunity to slowmode.
     *
     * <p><b>Special case</b><br>
     * {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels} use this to limit how many posts a user can create.
     * The client refers to this as the post slowmode.
     *
     * @param  slowmode
     *         The new slowmode
     *
     * @throws IllegalArgumentException
     *         If the provided slowmode is negative or greater than {@value ISlowmodeChannel#MAX_SLOWMODE}
     *
     * @return ChannelManager for chaining convenience
     *
     * @see net.dv8tion.jda.api.entities.channel.attribute.ISlowmodeChannel#getSlowmode()
     */",net.dv8tion.jda.api.managers.channel.attribute
"public static final Route WEBHOOK_TOKEN_MODIFY = Route.patch(""/webhooks/{webhook.id}/{webhook.token}"");","/**
     * Same as {@link #WEBHOOK_MODIFY}, except this call does not require authentication and returns no user in the
     * webhook object.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token"">
     * https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token</a>
     */",discord4j.rest.route
"@Nonnull
    public EmbedBuilder addField(@Nullable MessageEmbed.Field field)
    {
        return field == null ? this : addField(field.getName(), field.getValue(), field.isInline());
    }","/**
     * Copies the provided Field into a new Field for this builder.
     * <br>For additional documentation, see {@link #addField(String, String, boolean)}
     *
     * @param  field
     *         the field object to add
     *
     * @return the builder after the field has been added
     */",net.dv8tion.jda.api
"public static final Route GUILD_EMOJI_DELETE = Route.delete(""/guilds/{guild.id}/emojis/{emoji.id}"");","/**
     * Delete the given emoji. Returns 204 No Content on success. Fires a Guild Emojis Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/emoji#delete-guild-emoji"">
     * https://discord.com/developers/docs/resources/emoji#delete-guild-emoji</a>
     */",discord4j.rest.route
Flux<CityGetDTO> getSubscriptions(Integer userId);,"/**
     * This method is used to get the subscription CityGetDTOs.
     *
     * @param userId -> Incoming id cannot be less than one.
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.service.subscription
"public ApplicationError(String message, String path, HttpStatus httpStatus) {
        this.path = path;
        this.message = message;
        this.time = LocalDateTime.now();
        this.status = httpStatus.value();
        this.code = httpStatus.getReasonPhrase();
    }","/**
     * This constructor is one of the constructors used to initialize ApplicationError class fields.
     *
     * @param message -> String comes in and field must be not null
     * @param path -> String comes in and field must be not null
     * @param httpStatus -> HttpStatus comes in and field must be not null
     * @since 1.0
     */",org.khasanof.citiesapi.response
"public int getRed() {
        return (rgb >> 16) & 0xFF;
    }","/**
     * Returns the red value for this color, as an integer in the range 0-255.
     *
     * @return The red value for this color.
     */",discord4j.rest.util
void setRecognitionSettings(RecognitionSettings recognitionSettings);,"/**
     * Set the settings.
     *
     * @param recognitionSettings
     *            the {@link RecognitionSettings}
     */",jestures.core.recognition.gesturedata
"Mono<Void> onGuildMembersChunk(int shardIndex, GuildMembersChunk dispatch);","/**
     * Updates the internal state of the store according to the given {@link GuildMembersChunk} gateway dispatch.
     * This will typically perform the same kind of operations than {@link #onGuildMemberAdd(int, GuildMemberAdd)},
     * but adapted for whole chunks of members.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"default int getRawPosition() {
        return getData().position().toOptional()
                .orElseThrow(IllegalStateException::new);
    }","/**
     * Gets the raw position of the channel as exposed by Discord. This may or may not be accurate with relativity to
     * other channels in the guild.
     *
     * @return The raw position of the channel.
     */",discord4j.core.object.entity.channel
"public T get(int n) {
        return list.get(n);
    }","/**
     * Accessor for a particular constant.
     *
     * @param n  A zero based constant number
     * @return  The value of constant having index {@code n}
     */",threegpp.milenage
"Route route = Route.custom(Method.POST, ""channels/{channel_id}/messages"");","/**
     * Create a route template for the with the {@link Method#DELETE DELETE} method.
     *
     * <p>Route syntax should include valid argument placeholders of the format: {@code '{' argument_name '}'}
     * <br>The rate-limit handling in JDA relies on the correct names of major parameters:
     * <ul>
     *     <li>{@code channel_id} for channel routes</li>
     *     <li>{@code guild_id} for guild routes</li>
     *     <li>{@code webhook_id} for webhook routes</li>
     *     <li>{@code interaction_token} for interaction routes</li>
     * </ul>
     *
     * For example, to compose the route to delete a message in a channel:
     * <pre>{@code
     * Route route = Route.custom(Method.DELETE, ""channels/{channel_id}/messages/{message_id}"");
     * }</pre>
     *
     * <p>To compile the route, use {@link #compile(String...)} with the positional arguments.
     * <pre>{@code
     * Route.CompiledRoute compiled = route.compile(channelId, messageId);
     * }</pre>
     *
     * @param  route
     *         The route template with valid argument placeholders
     *
     * @throws IllegalArgumentException
     *         If null is provided or the route is invalid (containing spaces or empty)
     *
     * @return The custom route template
     */",net.dv8tion.jda.api.requests
"skeleton = Skeleton.getSkeleton(i, skeletonTracked, jointPosition, jointOrientation, jointStatus, this);","/**
     * The @link{KinectAdapter.java} constructor.
     *
     * @param primaryJoint
     *            the main {@link Joint}
     * @param secondaryJoint
     *            the alternative {@link Joint}
     */",jestures.sensor.kinect
"@Nonnull
    public ExplicitContentLevel getExplicitContentLevel()
    {
        return this.explicitContentLevel;
    }","/**
     * Returns the {@link net.dv8tion.jda.api.entities.Guild.ExplicitContentLevel ExplicitContentLevel} of this guild.
     *
     * @return the explicit content level of the guild
     */",net.dv8tion.jda.api.entities.templates
Mono<Long> countRoles();,"/**
     * Counts the number of roles present in the store.
     *
     * @return A {@link Mono} emitting the role count
     */",discord4j.common.store.api.layout
"void addGestureFeatureVector(String gestureName, List<Vector2D> featureVector);","/**
     * The Feature Vector to serialize.
     *
     * @param featureVector
     *            the {@link List} of feature vector
     * @param gestureName
     *            the {@link String} gesture name
     */",jestures.core.recognition.gesturedata
long getAlertMessageIdLong();,"/**
     * The id of the alert {@link net.dv8tion.jda.api.entities.Message Message} sent to the alert channel.
     *
     * @return The id of the alert message, or 0 if {@link AutoModResponse#getType()} is not {@link AutoModResponse.Type#SEND_ALERT_MESSAGE}
     */",net.dv8tion.jda.api.entities.automod
"@Nullable
    T getElementById(long id);","/**
     * Retrieves the entity represented by the provided ID.
     *
     * @param  id
     *         The ID of the entity
     *
     * @return Possibly-null entity for the specified ID
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    @CheckReturnValue
    PermissionOverrideAction clear(long inheritedBits);","/**
     * Clears the provided {@link net.dv8tion.jda.api.Permission Permissions} bits
     * from the {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     * <br>This will cause the provided Permissions to be inherited from other overrides or roles.
     *
     * @param  inheritedBits
     *         The permissions to clear from the {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoiceLongs(@Nonnull Collection<Long> choices)
    {
        return replyChoices(choices.stream()
                .map(it -> new Command.Choice(String.valueOf(it), it))
                .collect(Collectors.toList()));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * <p>The string values of the provided longs will be used as value and name for the {@link net.dv8tion.jda.api.interactions.commands.Command.Choice Choices}.
     *
     * @param  choices
     *         The choice suggestions to present to the user
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the numeric value of any of the choices is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nullable
    String reason();","/**
     * Returns the current audit log reason set on the spec.
     *
     * @return The current audit log reason.
     */",discord4j.core.spec
"Mono<MessageData> getMessageById(long channelId, long messageId);","/**
     * Retrieves data for the message corresponding to the given channel ID and message ID.
     *
     * @param channelId the channel ID
     * @param messageId the message ID
     * @return A {@link Mono} emitting the message, or empty if not found
     */",discord4j.common.store.api.layout
JDA api = role.getJDA();,"/**
     * Creates a new RoleManager instance
     *
     * @param role
     *        {@link net.dv8tion.jda.api.entities.Role Role} that should be modified
     */",net.dv8tion.jda.internal.managers
"@Nonnull
    @CheckReturnValue
    default ChannelAction<T> removePermissionOverride(@Nonnull IPermissionHolder holder)
    {
        Checks.notNull(holder, ""PermissionHolder"");
        return removePermissionOverride(holder.getIdLong());
    }","/**
     * Removes any existing override with the provided role/member.
     * <br>If no override for the provided role/member exists, this method does nothing.
     *
     * @param  holder
     *         The member or role of the override
     *
     * @throws IllegalArgumentException
     *         If the provided permission holder is null
     *
     * @return The current ChannelAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
Flux<ChannelData> getChannels();,"/**
     * Retrieves data for all channels present in the store.
     *
     * @return A {@link Flux} emitting the channels, or empty if none is present
     */",discord4j.common.store.api.layout
"public static GuildScheduledEventUserRemoveAction guildScheduledEventUserRemove(int shardIndex,
                                                                                    GuildScheduledEventUserRemove dispatch) {
        return new GuildScheduledEventUserRemoveAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildScheduledEventUserRemove} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildScheduledEventUserRemoveAction}
     */",discord4j.common.store.action.gateway
"public Optional<ApplicationCommandInteractionOption> getOption(String name) {
        return getInteraction().getCommandInteraction()
                .orElseThrow(IllegalStateException::new) // should always be present for app command auto-complete
                .getOption(name);
    }","/**
     * Gets the option corresponding to the provided name, if present.
     *
     * @param name The name of the option.
     * @return The option corresponding to the provided name, if present.
     */",discord4j.core.event.domain.interaction
"public static final Route CHANNEL_WEBHOOKS_GET = Route.get(""/channels/{channel.id}/webhooks"");","/**
     * Returns a list of channel webhook objects.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#get-channel-webhooks"">
     * https://discord.com/developers/docs/resources/webhook#get-channel-webhooks</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    default ActionComponent asDisabled()
    {
        return withDisabled(true);
    }","/**
     * Returns a copy of this component with {@link #isDisabled()} set to true.
     *
     * @return New disabled component instance
     */",net.dv8tion.jda.api.interactions.components
"private ScrollPaneFactory() {
    }","/*******************************************************************************
 * Copyright (c) 2018 Giulianini Luca
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/",jestures.core.view.utils
final long admin = Permission.ADMINISTRATOR.getRawValue();,"/**
     * Gets the {@code long} representation of the effective permissions allowed for this {@link net.dv8tion.jda.api.entities.Member Member}
     * in this {@link IPermissionContainer GuildChannel}. This can be used in conjunction with
     * {@link net.dv8tion.jda.api.Permission#getPermissions(long) Permission.getPermissions(long)} to easily get a list of all
     * {@link net.dv8tion.jda.api.Permission Permissions} that this member can use in this {@link IPermissionContainer GuildChannel}.
     * <br>This functions very similarly to how {@link net.dv8tion.jda.api.entities.Role#getPermissionsRaw() Role.getPermissionsRaw()}.
     *
     * @param  channel
     *         The {@link IPermissionContainer GuildChannel} being checked.
     * @param  member
     *         The {@link net.dv8tion.jda.api.entities.Member Member} whose permissions are being checked.
     *
     * @throws IllegalArgumentException
     *         if any of the provided parameters is {@code null}
     *         or the provided entities are not from the same guild
     *
     * @return The {@code long} representation of the effective permissions that this {@link net.dv8tion.jda.api.entities.Member Member}
     *         has in this {@link IPermissionContainer GuildChannel}.
     */",net.dv8tion.jda.internal.utils
"default Flux<Message> getMessagesAfter(Snowflake messageId) {
        final Function<Map<String, Object>, Flux<MessageData>> doRequest = params ->
                getClient().getRestClient().getChannelService()
                        .getMessages(getId().asLong(), params);

        return PaginationUtil.paginateAfter(doRequest, data -> Snowflake.asLong(data.id()), messageId.asLong(), 100)
                .map(data -> new Message(getClient(), data));
    }","/**
     * Requests to retrieve <i>all</i> messages <i>after</i> the specified ID.
     * <p>
     * The returned {@code Flux} will emit items in chronological order (oldest to newest). It is recommended to limit
     * the emitted items by invoking either {@link Flux#takeWhile(Predicate)} (to retrieve IDs within a specified range)
     * or {@link Flux#take(long)} (to retrieve a specific amount of IDs).
     * <p>
     * The following example will get <i>all</i> messages from {@code messageId} to {@code myOtherMessageId}: {@code
     * getMessagesAfter(messageId).takeWhile(message -> message.getId().compareTo(myOtherMessageId) <= 0)}
     *
     * @param messageId The ID of the <i>oldest</i> message to retrieve. Use {@link Snowflake#of(Instant)} to retrieve a
     *                  time-based ID.
     * @return A {@link Flux} that continually emits <i>all</i> {@link Message messages} <i>after</i> the specified ID.
     * If an error is received, it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    static LRUMemberCachePolicy lru(int maxSize)
    {
        return new LRUMemberCachePolicy(maxSize);
    }","/**
     * Implementation using a Least-Recently-Used (LRU) cache strategy.
     *
     * <p><b>Example</b><br>
     * <pre>{@code
     * MemberCachePolicy.ONLINE.and( // only cache online members
     *   MemberCachePolicy.lru(1000) // of those online members, track the 1000 most active members
     *     .unloadUnless(MemberCachePolicy.VOICE) // always keep voice members cached regardless of age
     * )
     * }</pre>
     *
     * This policy would add online members into the pool of cached members.
     * The cached members are limited to 1000 active members, which are handled by the LRU policy.
     * When the LRU cache exceeds the maximum, it will evict the least recently active member from cache.
     * If the sub-policy, in this case {@link MemberCachePolicy#VOICE}, evaluates to {@code true}, the member is retained in cache.
     * Otherwise, the member is unloaded using {@link Guild#unloadMember(long)}.
     *
     * <p>Note that the LRU policy itself always returns {@code true} for {@link #cacheMember(Member)}, since that makes the member the <b>most recently used</b> instead.
     *
     * @param  maxSize
     *         The maximum cache capacity of the LRU cache
     *
     * @return {@link LRUMemberCachePolicy}
     */",net.dv8tion.jda.api.utils
"public LegacyRoleCreateSpec setColor(Color color) {
        this.color = color.getRGB();
        return this;
    }","/**
     * Sets the color of the created {@link Role}.
     *
     * @param color The role color.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nullable
    public Throwable getFailure()
    {
        return error;
    }","/**
     * Unwraps the error for this result.
     * <br>This will be {@code null} if {@link #isFailure()} is false.
     *
     * @return The error or null
     */",net.dv8tion.jda.api.utils
"public static final Route CHANNEL_PERMISSION_DELETE = Route.delete(""/channels/{channel.id}/permissions/{overwrite.id}"");","/**
     * Delete a channel permission overwrite for a user or role in a channel. Only usable for guild channels. Requires
     * the 'MANAGE_ROLES' permission. Returns a 204 empty response on success. For more information about permissions,
     * see permissions.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#delete-channel-permission"">
     * https://discord.com/developers/docs/resources/channel#delete-channel-permission</a>
     */",discord4j.rest.route
"Mono<MessageData> editFollowupMessage(long messageId, WebhookMessageEditRequest request, boolean wait);","/**
     * Modify the given message by ID using the provided request. This uses a webhook tied to the interaction ID and
     * token.
     *
     * @param messageId the message ID to be modified. You can convert IDs using {@link Snowflake} methods.
     * @param request the message request to be sent as followup
     * @param wait whether to wait until the webhook is sent or fails, influences whether you can get an error
     * through the return {@code Mono}.
     * @return a {@link Mono} where, upon successful completion, emits the edited message. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"public Publisher<?> onThreadMembersUpdateEvent(ThreadMembersUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when anyone is added to or removed from a thread. If the current user does not have the
     * {@link discord4j.gateway.intent.Intent#GUILD_MEMBERS} Gateway Intent, then this event will only be sent if the
     * current user was added to or removed from the thread.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public LegacyNewsChannelEditSpec setParentId(@Nullable Snowflake parentId) {
        requestBuilder.parentId(Possible.of(Optional.ofNullable(parentId).map(Snowflake::asString)));
        return this;
    }","/**
     * Sets the identifier of the parent category of the modified {@link NewsChannel}.
     *
     * @param parentId The parent category identifier.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public LegacyGuildEditSpec setPublicUpdatesChannelId(@Nullable Snowflake publicUpdatesChannelId) {
        requestBuilder.publicUpdatesChannelId(Possible.of(Optional.ofNullable(publicUpdatesChannelId)
            .map(Snowflake::asString)));
        return this;
    }","/**
     * Sets the id of the channel where admins and moderators of Community guilds receive notices from Discord.
     *
     * @param publicUpdatesChannelId The id of the channel where admins and moderators of Community guilds receive
     *                               notices from Discord.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public LegacyGuildCreateFromTemplateSpec setIcon(Image icon) {
        this.icon = Possible.of(icon.getDataUri());
        return this;
    }","/**
     * Sets the icon for the created guild.
     *
     * @param icon The icon of the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static double getDouble(@Nonnull DataArray root, @Nonnull String path)
    {
        Double doubleValue = get(root, path, DataObject::getDouble, DataArray::getDouble);
        if (doubleValue == null)
            pathError(path, ""double"");
        return doubleValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     * <br>If the resulting value is a string, this will parse the string using {@link Double#parseDouble(String)}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The double value at the given path
     */",net.dv8tion.jda.api.utils.data
"public long getParentId()
    {
        return this.parentId;
    }","/**
     * Parent Category id of this TemplateChannel. Channels don't need to have a parent Category.
     * <br>Note that a Category channel will always return {@code -1} for this method
     * as nested categories are not supported.
     *
     * @return The id of the parent Category or {@code -1} if the channel doesn't have a parent Category
     */",net.dv8tion.jda.api.entities.templates
"public SerializedSourceGuildData getSourceGuild() {
        return data.serializedSourceGuild();
    }","/**
     * Gets the guild snapshot of the template.
     *
     * @return The guild snapshot.
     */",discord4j.core.object
"public Publisher<?> onMemberJoin(MemberJoinEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user joins a guild.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
void setFrameLength(GestureLength length) throws IOException;,"/**
     * Set the frame length.
     *
     * @param length
     *            the length
     * @throws IOException
     *             IOexception
     */",jestures.core.tracking
"public InteractionHandlerSpec direct(Function<DirectInteraction, InteractionHandler> directInteractionHandlerFunction) {
        return new InteractionHandlerSpec(guildInteractionHandlerFunction, directInteractionHandlerFunction);
    }","/**
     * Set a direct message (DM) interaction handler function. Any previous DM interaction handling function set will be
     * overridden.
     *
     * @param directInteractionHandlerFunction a function to derive an {@link InteractionHandler} from a
     * {@link DirectInteraction}
     * @return this spec for chaining, call {@link #build()} to produce a complete handler
     */",discord4j.rest.interaction
"public Publisher<?> onInteractionCreate(InteractionCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user starts an interaction.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Mono<Void> deleteScheduledEvent(Snowflake eventId, @Nullable String reason) {
        return restClient.getGuildService().deleteScheduledEvent(id, eventId.asLong(), reason);
    }","/**
     * Requests to delete a scheduled event. Requires the {@link Permission#MANAGE_EVENTS} permission.
     *
     * @param eventId The ID of the event
     * @param reason an optional reason for the audit log
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the event has been deleted.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"String sanitized = MarkdownSanitizer.escape(input, ~MarkdownSanitizer.SPOILER);","/**
     * Escapes already existing spoiler regions in the input
     * and applies spoiler formatting to the entire string.
     * <br>The resulting string will be {@code ""||"" + escaped(input) + ""||""}.
     *
     * @param  input
     *         The input to spoiler
     *
     * @return The resulting output
     */",net.dv8tion.jda.api.utils
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction replyFiles(@Nonnull Collection<? extends FileUpload> files)
    {
        Checks.notEmpty(files, ""File Collection"");
        return deferReply().setFiles(files);
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#REQUEST_ENTITY_TOO_LARGE REQUEST_ENTITY_TOO_LARGE}
     *     <br>If the total sum of uploaded bytes exceeds the guild's {@link Guild#getMaxFileSize() upload limit}</li>
     * </ul>
     *
     * @param  files
     *         The {@link FileUpload FileUploads} to attach to the message
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link ReplyCallbackAction}
     *
     * @see    FileUpload#fromData(InputStream, String)
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nonnull
    String getTitle();","/**
     * The title of this modal
     *
     * @return The title of this modal
     */",net.dv8tion.jda.api.interactions.modals
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction addChoiceStrings(@Nonnull Collection<String> choices)
    {
        return addChoices(choices.stream()
                .map(it -> new Command.Choice(it, it))
                .collect(Collectors.toList()));
    }","/**
     * Add up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * <p>The provided strings will be used as value and name for the {@link net.dv8tion.jda.api.interactions.commands.Command.Choice Choices}.
     *
     * @param  choices
     *         The choice suggestions to present to the user, each limited to {@value OptionData#MAX_CHOICE_NAME_LENGTH} characters
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If any of the choice names are empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the string value of any of the choices is empty or longer than {@value OptionData#MAX_CHOICE_VALUE_LENGTH}</li>
     *         </ul>
     *
     * @return The same callback action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.interactions
"@Nonnull
        public TextInput build()
        {
            if (maxLength < minLength && maxLength != -1)
                throw new IllegalStateException(""maxLength cannot be smaller than minLength!"");

            return new TextInputImpl(id, style, label, minLength, maxLength, required, value, placeholder);
        }","/**
         * Builds a new TextInput from this Builder
         *
         * @throws IllegalStateException
         *         If maxLength is smaller than minLength
         *
         * @return the TextInput instance
         */",net.dv8tion.jda.api.interactions.components.text
"public static final Route MESSAGE_DELETE = Route.delete(""/channels/{channel.id}/messages/{message.id}"");","/**
     * Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the
     * current user, this endpoint requires the 'MANAGE_MESSAGES' permission. Returns a 204 empty response on success.
     * Fires a Message Delete Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#delete-message"">
     * https://discord.com/developers/docs/resources/channel#delete-message</a>
     */",discord4j.rest.route
void remove(int key);,"/**
     * Remove a {@link GatewayClient} from this instance using the given key.
     *
     * @param key the key representing the client to be removed
     */",discord4j.core.shard
Mono<Void> update(CityUpdateDTO dto);,"/**
     * This method is used to update the city entity.
     * Throws NotFoundException if city is not found for the id you provide.
     *
     * @param dto -> CityUpdateDTO comes in and all its fields must be not null
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.service.city
"@Nullable
    default User getUserById(final long id)
    {
        return this.getUserCache().getElementById(id);
    }","/**
     * This returns the {@link net.dv8tion.jda.api.entities.User User} which has the same id as the one provided.
     * <br>If there is no visible user with an id that matches the provided one, this will return {@code null}.
     *
     * @param  id
     *         The id of the requested {@link net.dv8tion.jda.api.entities.User User}.
     *
     * @return Possibly-null {@link net.dv8tion.jda.api.entities.User User} with matching id.
     */",net.dv8tion.jda.api.sharding
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction addChoiceLongs(@Nonnull Collection<Long> choices)
    {
        return addChoices(choices.stream()
                .map(it -> new Command.Choice(String.valueOf(it), it))
                .collect(Collectors.toList()));
    }","/**
     * Add up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * <p>The string values of the provided longs will be used as value and name for the {@link net.dv8tion.jda.api.interactions.commands.Command.Choice Choices}.
     *
     * @param  choices
     *         The choice suggestions to present to the user
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the numeric value of any of the choices is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return The same callback action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.interactions
"@Override
    public Snowflake getId() {
        return Snowflake.of(data.id());
    }","/**
     * Gets the stage instance ID.
     *
     * @return The stage instance ID.
     */",discord4j.core.object.entity
Mono<Long> countStickersInGuild(long guildId);,"/**
     * Counts the number of stickers present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Mono} emitting the sticker count
     * @since 3.2.3
     */",discord4j.common.store.api.layout
"@SuppressWarnings(""unchecked"")
	public static void register(@SuppressWarnings(""rawtypes"") Map tagletMap) {
		WRMqProducerTaglet tag = new WRMqProducerTaglet();
		Taglet t = (Taglet) tagletMap.get(tag.getName());
		if (t != null) {
			tagletMap.remove(tag.getName());
		}
		tagletMap.put(tag.getName(), tag);
	}","/**
	 * Register this Taglet.
	 * 
	 * @param tagletMap
	 *            the map to register this tag to.
	 */",net.winroad.wrdoclet.taglets
"@Deprecated
    public Backoff getBackoff() {
        return backoff;
    }","/**
     * Retrieve the backoff function used for retrying. It uses a RetryContext object to calculate the correct backoff
     * delay.
     *
     * @return a Backoff function
     * @deprecated only select implementations will use this value. Moving forward, consider assuming an exponential
     * backoff function bounded by {@link #getFirstBackoff()} and {@link #getMaxBackoffInterval()}
     */",discord4j.common.retry
"@Nonnull
    @Override
    WebhookManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * <br>Example: {@code manager.reset(WebhookManager.CHANNEL, WebhookManager.NAME);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #AVATAR}</li>
     *     <li>{@link #CHANNEL}</li>
     * </ul>
     *
     * @param  fields
     *         Integer values containing the flags to reset.
     *
     * @return WebhookManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@SuppressWarnings(""unchecked"")
    @Nullable
    public <T> T getOldValue()
    {
        return (T) oldValue;
    }","/**
     * The previous value for the field specified by {@link #getKey()}.
     *
     * @param  <T>
     *         The expected generic type for this value.
     *         <br>This will be used to cast the value.
     *
     * @throws java.lang.ClassCastException
     *         If the type cast to the generic type fails
     *
     * @return The old value
     */",net.dv8tion.jda.api.audit
"public LegacyGuildCreateSpec setAfkChannelId(@Nullable Snowflake id) {
        builder.afkChannelId(id == null ? Possible.absent() : Possible.of(Id.of(id.asLong())));
        return this;
    }","/**
     * Sets the ID of the AFK channel for the created {@link Guild}.
     *
     * @param id id for afk channel
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nullable
    String getMatchedKeyword();","/**
     * The keyword that was found in the {@link #getContent()}.
     *
     * @return The keyword that was found in the content
     */",net.dv8tion.jda.api.entities.automod
"public Optional<Webhook> getWebhookById(Snowflake webhookId) {
        return webhooks.stream()
                .filter(webhook -> webhook.getId().equals(webhookId))
                .findFirst();
    }","/**
     * Gets a webhook involved in the entries of this portion of the audit log by ID.
     *
     * @param webhookId The ID of the webhook.
     * @return The webhook with the given ID, if present.
     */",discord4j.core.object.audit
"void setPresence(@Nullable Activity activity, boolean idle);","/**
     * Sets two presence fields of this session.
     * <br>The third field stays untouched.
     *
     * @param  activity
     *         The {@link net.dv8tion.jda.api.entities.Activity Activity} for this session
     *         (See {@link #setActivity(net.dv8tion.jda.api.entities.Activity)} for more info)
     * @param  idle
     *         Whether to mark this session as idle (useful for client accounts {@link #setIdle(boolean)})
     */",net.dv8tion.jda.api.managers
long getAllowedRaw();,"/**
     * This is the raw binary representation (as a base 10 long) of the permissions <b>allowed</b> by this override.
     * <br>The long relates to the offsets used by each {@link net.dv8tion.jda.api.Permission Permission}.
     *
     * @return Never-negative long containing the binary representation of the allowed permissions of this override.
     */",net.dv8tion.jda.api.entities
"protected void exit() {
    exited = true;
  }","/**
   * Exit this menu.
   */",io.github.augustoravazoli.termenu.core
"@Nonnull
    @CheckReturnValue
    RoleAction setIcon(@Nullable String emoji);","/**
     * Sets the Unicode Emoji of this {@link net.dv8tion.jda.api.entities.Role Role} instead of a custom image.
     * This emoji will be displayed next to the role's name in the members tab and in chat.
     *
     * @param  emoji
     *         The new Unicode emoji for this {@link net.dv8tion.jda.api.entities.Role Role}
     *         or {@code null} to reset
     *
     * @return The current RoleAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    public User getUser()
    {
        return user;
    }","/**
     * The {@link User} responsible for this action.
     *
     * <p>This will not be available for {@link GuildAuditLogEntryCreateEvent}, you can use {@link #getUserIdLong()} instead.
     *
     * @return Possibly-null User instance
     */",net.dv8tion.jda.api.audit
"@Nonnull
    EntitlementPaginationAction skuIds(@Nonnull String... skuIds);","/**
     * Filters {@link Entitlement Entitlement}s by their SKU id
     *
     * @param skuIds
     *        The SKU ids to filter by
     *
     * @throws java.lang.IllegalArgumentException
     *         If any of the provided {@code skuIds} are {@code null}, empty or are not a valid snowflake
     *
     * @return The current {@link EntitlementPaginationAction EntitlementPaginationAction} for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.pagination
"PollAnswer(PollAnswerObject data) {
        this.data = data;
    }","/**
     * Constructs a PollAnswer object.
     *
     * @param data the poll answer object
     */",discord4j.core.object.entity.poll
"public HttpResponseStatus getStatus() {
        return getResponse().status();
    }","/**
     * Return the {@link HttpResponseStatus} with information related to the HTTP error. The actual status code can be
     * obtained through {@link HttpResponseStatus#code()}.
     *
     * @return the HTTP error associated to this exception
     */",discord4j.rest.http.client
"public static <T> T ask(String message, Class<T> clazz) {
    return ask(message, clazz, object -> true);
  }","/**
   * Displays a message and return a parsed value of the provided type. 
   * The following types are supported: Integer, Double, String, and char[].
   *
   * @param  <T>     the return type
   * @param  message the message to be displayed
   * @param  clazz   the type to be parsed
   * @return         the parsed value
   * @throws IllegalArgumentException if the provided type is not supported.
   */",io.github.augustoravazoli.termenu.util
"public static boolean getBoolean(@Nonnull DataArray root, @Nonnull String path)
    {
        Boolean bool = get(root, path, DataObject::getBoolean, DataArray::getBoolean);
        return bool != null && bool;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The boolean value at the given path, if declared as optional this returns false when the value is missing.
     */",net.dv8tion.jda.api.utils.data
boolean isBoost();,"/**
         * Whether this role is the boost role of this guild.
         *
         * @return True, if this role is the boost role
         */",net.dv8tion.jda.api.entities
Flux<PresenceData> getPresencesInGuild(long guildId);,"/**
     * Retrieves data for all presences present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Flux} emitting the presences, or empty if none is present
     */",discord4j.common.store.api.layout
"@Nullable
    String getMatchedContent();","/**
     * The substring match of the user content that triggered this rule.
     *
     * <p>This is empty if {@link GatewayIntent#MESSAGE_CONTENT} is not enabled.
     * However, you can still use {@link #getMatchedKeyword()} regardless.
     *
     * @return The user content substring
     */",net.dv8tion.jda.api.entities.automod
"public static Color of(final int rgb) {
        return new Color(rgb & 0xFFFFFF);
    }","/**
     * Initializes a new instance of {@link Color} using the specified RGB value. The blue value is in bits 0-7, green
     * in bits 8-15, and red in bits 16-23.
     *
     * @param rgb The RGB value.
     */",discord4j.rest.util
GestureLength getFrameLength();,"/**
     * Get the frame length.
     *
     * @return the frame length in frame
     */",jestures.core.tracking
"@Nullable
    public User getUser()
    {
        return api.getUserById(userId);
    }","/**
     * The {@link User User} who subscribed or unsubscribed to the {@link ScheduledEvent ScheduledEvent}.
     * <br>This might be missing if the user was not cached.
     * Use {@link #retrieveUser()} to load the user.
     *
     * @return The added user or null if this information is missing
     */",net.dv8tion.jda.api.events.guild.scheduledevent
"public static CountTotalAction countMessages() {
        return new CountTotalAction(CountableEntity.MESSAGES);
    }","/**
     * Creates an action to count the number of messages present in a store.
     *
     * @return a new {@link CountTotalAction}
     */",discord4j.common.store.action.read
"public long getTime() {
        return time;
    }","/**
     * Get the server time when the ban was issued.
     *
     * @return system timestamp.
     */",com.massivecraft.factions.struct
int getSequence();,"/**
     * Gets the current heartbeat sequence.
     *
     * @return an integer representing the current gateway sequence
     */",discord4j.gateway
"@Nonnull
    IThreadContainerUnion getChannel();","/**
     * The {@link IThreadContainerUnion} for this action
     * <br>This can also be used for casting down to more concrete types.
     *
     * @return {@link IThreadContainerUnion}
     */",net.dv8tion.jda.api.requests.restaction.pagination
"public GuildSticker(GatewayDiscordClient gateway, StickerData data) {
        super(gateway, data);
        this.guildId = data.guildId().toOptional().get().asLong();
    }",/** The ID of the guild this sticker is associated to. */,discord4j.core.object.entity
InteractionResponseData response();,"/**
     * Return the response to be sent to Discord on interaction create.
     *
     * @return the raw data to build an initial interaction response
     */",discord4j.rest.interaction
"public Optional<Integer> getAnswerCountById(int answerId) {
        return Optional.ofNullable(this.answerCountById.get(answerId)).map(PollAnswerCount::getCount);
    }","/**
     * Gets the answer count of the poll result by answer id.
     *
     * @param answerId the answer id
     * @return An {@link Optional} containing the answer count of the poll result by answer id, or
     * {@link Optional#empty()} if the answer id is not present
     */",discord4j.core.object.entity.poll
"public RestGuild restGuild(GuildData data) {
        return RestGuild.create(this, Snowflake.of(data.id()));
    }","/**
     * Requests to retrieve the guild represented by the supplied {@link GuildData}.
     *
     * @param data The data of the guild.
     * @return A {@link RestGuild} as represented by the supplied data.
     */",discord4j.rest
"@Nonnull
    @CheckReturnValue
    default RestAction<Message> retrieveOriginal()
    {
        return retrieveMessageById(""@original"");
    }","/**
     * Retrieves the original reply to this interaction.
     * <br>This doesn't work for ephemeral messages and will always cause an unknown message error response.
     *
     * @return {@link RestAction} - Type: {@link Message}
     */",net.dv8tion.jda.api.interactions
"default Flux<ShardInfo> getShards(int shardCount) {
        return Flux.range(0, shardCount).map(index -> ShardInfo.create(index, shardCount));
    }","/**
     * Return the shard factory used to create a group of sharded clients.
     *
     * @param shardCount the total number of shards
     * @return a shard factory as a sequence of {@link ShardInfo} items.
     */",discord4j.core.shard
"public static MessageDeleteBulkAction messageDeleteBulk(int shardIndex, MessageDeleteBulk dispatch) {
        return new MessageDeleteBulkAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link MessageDeleteBulk} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link MessageDeleteBulkAction}
     */",discord4j.common.store.action.gateway
void reconnect(@Nonnull AudioChannel channel);,"/**
     * Requests to reconnect to the voice channel in the target guild.
     *
     * @param channel
     *        The channel we were connected to
     */",net.dv8tion.jda.api.managers
"public static <L, R> Pair<L, R> of(final L left, final R right) {
        return new ImmutablePair<>(left, right);
    }","/**
     * <p>Obtains an immutable pair of from two objects inferring the generic types.</p>
     *
     * <p>This factory allows the pair to be created using inference to
     * obtain the generic types.</p>
     *
     * @param <L> the left element type
     * @param <R> the right element type
     * @param left  the left element, may be null
     * @param right  the right element, may be null
     * @return a pair formed from the two parameters, not null
     */",net.dv8tion.jda.internal.utils.tuple
"public static GetVoiceStateByIdAction getVoiceStateById(long guildId, long userId) {
        return new GetVoiceStateByIdAction(guildId, userId);
    }","/**
     * Creates an action to retrieve data for the voice state corresponding to the given guild ID and user ID.
     *
     * @param guildId the guild ID
     * @param userId  the user ID
     * @return a new {@link GetVoiceStateByIdAction}
     */",discord4j.common.store.action.read
"public ApplicationService getApplicationService() {
        return applicationService;
    }","/**
     * Access a low-level representation of the API endpoints for the Application resource.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"@Nonnull
    InteractionHook getHook();","/**
     * The {@link InteractionHook} which can be used to send deferred replies or followup messages.
     *
     * @throws UnsupportedOperationException
     *         If this interaction does not support deferred replies and followup messages
     *
     * @return The interaction hook
     */",net.dv8tion.jda.api.interactions.callbacks
"public static final Route GUILD_BAN_CREATE = Route.put(""/guilds/{guild.id}/bans/{user.id}"");","/**
     * Create a guild ban, and optionally delete previous messages sent by the banned user. Requires the 'BAN_MEMBERS'
     * permission. Returns a 204 empty response on success. Fires a Guild Ban Add Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#create-guild-ban"">
     * https://discord.com/developers/docs/resources/guild#create-guild-ban</a>
     */",discord4j.rest.route
CompletableFuture<Optional<E>> connect();,"/**
     * Connects to a database asynchronously
     * @return optional of {@link ConnectionHandler} of the database-connection
     */",io.github.heliumdioxid.database.api
"public static final Route CHANNEL_WEBHOOK_CREATE = Route.post(""/channels/{channel.id}/webhooks"");","/**
     * Create a new webhook. Returns a webhook object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#create-webhook"">
     * https://discord.com/developers/docs/resources/webhook#create-webhook</a>
     */",discord4j.rest.route
"public static CompleteGuildMembersAction completeGuildMembers(long guildId) {
        return new CompleteGuildMembersAction(guildId);
    }","/**
     * Creates an action that allows to signal that the full member list for the specified guild has been received.
     *
     * @param guildId the guild ID
     * @return a new {@link CompleteGuildMembersAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    @CheckReturnValue
    WebhookManager setChannel(@Nonnull TextChannel channel);","/**
     * Sets the {@link TextChannel TextChannel} of the selected {@link net.dv8tion.jda.api.entities.Webhook Webhook}.
     *
     * <p>A webhook channel <b>must not</b> be {@code null} and <b>must</b> be in the same {@link net.dv8tion.jda.api.entities.Guild Guild}!
     *
     * @param  channel
     *         The new {@link TextChannel TextChannel}
     *         for the selected {@link net.dv8tion.jda.api.entities.Webhook Webhook}
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have the Permission {@link net.dv8tion.jda.api.Permission#MANAGE_WEBHOOKS MANAGE_WEBHOOKS}
     *         in the specified TextChannel
     * @throws IllegalArgumentException
     *         If the provided channel is {@code null} or from a different Guild
     *
     * @return WebhookManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public Publisher<?> onAutoModActionExecution(AutoModActionExecutedEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an automod rule action has been executed.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Mono<StickerData> getData() {
        return restClient.getStickerService().getGuildSticker(guildId, id);
    }","/**
     * Retrieve this guild sticker's data upon subscription.
     *
     * @return a {@link Mono} where, upon successful completion, emits the {@link StickerData} belonging to this entity.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"public InvalidTokenException()
    {
        super(""The provided token is invalid!"");
    }","/**
     * Constructs an {@code InvalidTokenException} with no detail message.
     */",net.dv8tion.jda.api.exceptions
"@Nullable
    T getNewValue();","/**
     * The new value
     *
     * @return The new value
     */",net.dv8tion.jda.api.events
"@Nonnull
    public abstract R closeFiles();","/**
     * Closes and removes all {@link net.dv8tion.jda.api.utils.FileUpload FileUploads} added to this builder.
     *
     * <p>This will keep any {@link net.dv8tion.jda.api.utils.AttachmentUpdate AttachmentUpdates} added to this builder, as those do not require closing.
     * You can use {@link MessageEditRequest#setAttachments(AttachedFile...)} to remove them as well.
     *
     * @return The same builder instance for chaining
     */",net.dv8tion.jda.api.utils.messages
"public boolean isSelfMuted() {
        return data.selfMute();
    }","/**
     * Gets whether this user is locally muted.
     *
     * @return {@code true} if this user is locally muted, {@code false} otherwise.
     */",discord4j.core.object
"default boolean isMediaDownloadHidden()
    {
        return getFlags().contains(ChannelFlag.HIDE_MEDIA_DOWNLOAD_OPTIONS);
    }","/**
     * Whether this media channel hides the download option for embeds.
     *
     * @return True, if download option is hidden
     */",net.dv8tion.jda.api.entities.channel.concrete
"@Nonnull
        public B setRequiredRange(int min, int max)
        {
            Checks.check(min <= max, ""Min Values should be less than or equal to Max Values! Provided: [%d, %d]"", min, max);
            return setMinValues(min).setMaxValues(max);
        }","/**
         * The minimum and maximum amount of values a user can select.
         * <br>Default: {@code 1} for both
         *
         * <p>The minimum or maximum must not exceed the amount of available options.
         *
         * @param  min
         *         The min values
         * @param  max
         *         The max values
         *
         * @throws IllegalArgumentException
         *         If the provided amount is not a valid range ({@code 0 <= min <= max})
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.components.selections
"@Nonnull
    public Instant toInstant()
    {
        return Instant.ofEpochMilli(timestamp);
    }","/**
     * Shortcut for {@code Instant.ofEpochMilli(getTimestamp())}.
     *
     * @return The {@link Instant} of this timestamp
     */",net.dv8tion.jda.api.utils
"public Publisher<?> onApplicationCommandCreate(ApplicationCommandCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an application command relevant to the current user is created. Guild ID might be missing
     * if this event fires for a DM channel.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
new DefaultMemberPermissions(0L);,"/**
     * ""Empty"" permissions of a command.
     * <br>Only members with the {@link Permission#ADMINISTRATOR ADMINISTRATOR} permission can see and access this command by default.
     */",net.dv8tion.jda.api.interactions.commands
"public Optional<String> getDescription() {
        return data.description();
    }","/**
     * Gets the description of the template, if present.
     *
     * @return The template description.
     */",discord4j.core.object
"public static GetPresencesInGuildAction getPresencesInGuild(long guildId) {
        return new GetPresencesInGuildAction(guildId);
    }","/**
     * Creates an action to retrieve data for all presences present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link GetPresencesInGuildAction}
     */",discord4j.common.store.action.read
"public Flux<ApplicationCommandData> registerCommands() {
        return bulkOverwriteCommands(commandRequests);
    }","/**
     * Submit the command definitions to Discord to register each application command globally.
     *
     * @return a Flux with each command registration response from Discord if successful
     */",discord4j.rest.interaction
"public static GetStageInstanceByChannelIdAction getStageInstanceByChannelId(long channelId) {
        return new GetStageInstanceByChannelIdAction(channelId);
    }","/**
     * Creates an action to retrieve data for the stage instance corresponding to the given channel ID.
     *
     * @param channelId the channel ID
     * @return a new {@link GetStageInstanceByChannelIdAction}
     */",discord4j.common.store.action.read
"@Nonnull
    public GuildSticker getSticker()
    {
        return sticker;
    }","/**
     * The relevant {@link GuildSticker} for this event
     *
     * @return The sticker
     */",net.dv8tion.jda.api.events.sticker
"@Nonnull
        default JDA getJDA()
        {
            return getGuild().getJDA();
        }","/**
         * Shortcut to access the JDA instance
         *
         * @return The JDA instance
         */",net.dv8tion.jda.api.hooks
"public ApplicationCommand.Type getCommandType() {
        return getInteraction().getCommandInteraction()
                .flatMap(ApplicationCommandInteraction::getApplicationCommandType)
                .orElseThrow(IllegalStateException::new); // should always be present for application commands
    }","/**
     * Gets the type of the invoked command.
     *
     * @return The type of the invoked command.
     */",discord4j.core.event.domain.interaction
boolean isAutoReconnect();,"/**
     * Whether audio connections from this AudioManager automatically reconnect
     *
     * @return Whether audio connections from this AudioManager automatically reconnect
     */",net.dv8tion.jda.api.managers
Mono<Long> countVoiceStatesInGuild(long guildId);,"/**
     * Counts the number of voice states present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Mono} emitting the voice state count
     */",discord4j.common.store.api.layout
"public StageInstanceService getStageInstanceService() {
        return this.stageInstanceService;
    }","/**
     * Access a low-level representation of the API endpoints for the Stage Instance resource. It is recommended you use
     * the {@link #getStageInstance(Snowflake)} method.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"@Nullable
    public AuditLogChange getChangeByKey(@Nullable final AuditLogKey key)
    {
        return key == null ? null : getChangeByKey(key.getKey());
    }","/**
     * Shortcut to <code>{@link #getChanges() getChanges()}.get(key)</code> lookup!
     * <br>This lookup is case-insensitive!
     *
     * @param  key
     *         The {@link net.dv8tion.jda.api.audit.AuditLogKey AuditLogKey} to look for
     *
     * @return Possibly-null value corresponding to the specified key
     */",net.dv8tion.jda.api.audit
"Iterator<Map.Entry<Member, Integer>> activeMemberIterator = this.activeMemberCache.entrySet().iterator();","/**
     * Removes the head of the queue, with a counter equal to 1.
     */",net.dv8tion.jda.api.utils.cache
boolean isIntegration();,"/**
         * Whether this role is managed by an integration.
         * <br>This is usually true for roles such as those created for twitch subscribers.
         *
         * @return True, if this role is managed by an integration
         */",net.dv8tion.jda.api.entities
"public long getOldOwnerIdLong()
    {
        return prevId;
    }","/**
     * The previous owner user id
     *
     * @return The previous owner id
     */",net.dv8tion.jda.api.events.guild.update
"@FXML
    public void initialize() { // NOPMD
        this.initButtons();
        this.initCombos();
        this.initGraphic();
        this.initLiveCanvas();
        this.initUserCanvas();
        this.initChart();
        this.initScrollPane();
        this.initTreeView();
        this.setDisabled();
        this.initProgressBar();
        this.initSliders();
        this.initPopup();
    }","/**
     * Initialize method.
     */",jestures.core.view.screens
"@Nonnull
    @Unmodifiable
    default Map<JDA, Status> getStatuses()
    {
        return Collections.unmodifiableMap(this.getShardCache().stream()
                .collect(Collectors.toMap(Function.identity(), JDA::getStatus)));
    }","/**
     * Gets the current {@link net.dv8tion.jda.api.JDA.Status Status} of all shards.
     *
     * @return All current shard statuses.
     */",net.dv8tion.jda.api.sharding
"@Nonnull
    DataArray toDataArray();","/**
     * Serialized {@link net.dv8tion.jda.api.utils.data.DataArray} for this object.
     *
     * @return {@link net.dv8tion.jda.api.utils.data.DataArray}
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
        public Builder setStyle(TextInputStyle style)
        {
            Checks.notNull(style, ""Style"");
            Checks.check(style != TextInputStyle.UNKNOWN, ""TextInputStyle cannot be UNKNOWN!"");
            this.style = style;
            return this;
        }","/**
         * Sets the style for this TextInput
         * <br>Possible values are:
         * <ul>
         *     <li>{@link TextInputStyle#SHORT}</li>
         *     <li>{@link TextInputStyle#PARAGRAPH}</li>
         * </ul>
         *
         * @param  style
         *         The style to set
         *
         * @throws IllegalArgumentException
         *         If style is null or {@link TextInputStyle#UNKNOWN UNKNOWN}
         *
         * @return The same Builder for chaining convenience.
         */",net.dv8tion.jda.api.interactions.components.text
"@Nonnull
    public String getOldOwnerId()
    {
        return Long.toUnsignedString(prevId);
    }","/**
     * The previous owner user id
     *
     * @return The previous owner id
     */",net.dv8tion.jda.api.events.guild.update
"@Nullable
    public String getReason()
    {
        return reason;
    }","/**
     * The optional reason why this action was executed.
     *
     * @return Possibly-null reason String
     */",net.dv8tion.jda.api.audit
"static EventDispatcher buffering() {
        return builder().build();
    }","/**
     * Create an {@link EventDispatcher} that will buffer incoming events to retain all startup events as each
     * shard connects at the cost of increased memory usage and potential {@link OutOfMemoryError} if events are not
     * consumed. Startup events collected before the first subscription are only forwarded to that subscriber.
     *
     * @return a buffering {@link EventDispatcher} backed by an {@link EmitterProcessor}
     */",discord4j.core.event
"Mono<Void> onGuildRoleCreate(int shardIndex, GuildRoleCreate dispatch);","/**
     * Updates the internal state of the store according to the given {@link GuildRoleCreate} gateway dispatch. This
     * will typically perform an insert operation on the related {@link RoleData}, and add the role ID to the list
     * returned by {@link GuildData#roles()}.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"@Nonnull
    @Unmodifiable
    default List<MediaChannel> getMediaChannelsByName(@Nonnull String name, boolean ignoreCase)
    {
        return getMediaChannelCache().getElementsByName(name, ignoreCase);
    }","/**
     * Gets a list of all {@link MediaChannel MediaChannels}
     * in this Guild that have the same name as the one provided.
     * <br>If there are no channels with the provided name, then this returns an empty list.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  name
     *         The name used to filter the returned {@link MediaChannel MediaChannels}.
     * @param  ignoreCase
     *         Determines if the comparison ignores case when comparing. True - case insensitive.
     *
     * @return Possibly-empty immutable list of all ForumChannel names that match the provided name.
     */",net.dv8tion.jda.api.entities.channel.attribute
"Number min = option.getMinValue(), max = option.getMaxValue();","/**
     * Converts the provided {@link Command.Option} into a OptionData instance.
     *
     * @param  option
     *         The option to convert
     *
     * @throws IllegalArgumentException
     *         If null is provided or the option has illegal configuration
     *
     * @return An instance of OptionData
     */",net.dv8tion.jda.api.interactions.commands.build
"public void reset() {
        attempts.set(1);
        resetCount.incrementAndGet();
    }","/**
     * Reset the attempt count, treating further calls to {@link #next()} as new retry sequences.
     */",discord4j.common.retry
"public Publisher<?> onIntegrationsUpdate(IntegrationsUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when guild integrations are updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"default boolean canReceiveEncoded()
    {
        return false;
    }","/**
     * If this method returns true, then JDA will provide raw OPUS encoded packets to {@link #handleEncodedAudio(OpusPacket)}.
     * <br>This can be used in combination with the other receive methods but will not be combined audio of multiple users.
     *
     * <p>Each user sends their own stream of OPUS encoded audio and each packet is assigned with a user id and SSRC.
     * The decoder will be provided by JDA but need not be used.
     *
     * @return True, if {@link #handleEncodedAudio(OpusPacket)} should receive opus packets.
     *
     * @since  4.0.0
     */",net.dv8tion.jda.api.audio
"public RestEmoji getGuildEmojiById(final Snowflake guildId, final Snowflake emojiId) {
        return RestEmoji.create(this, guildId, emojiId);
    }","/**
     * Requests to retrieve the guild emoji represented by the supplied IDs.
     *
     * @param guildId The ID of the guild.
     * @param emojiId The ID of the emoji.
     * @return A {@link RestEmoji} as represented by the supplied IDs.
     */",discord4j.rest
"@Nonnull
    @CheckReturnValue
    default RestAction<Void> editButton(@Nullable Button newButton)
    {
        Message message = getMessage();
        List<ActionRow> components = new ArrayList<>(message.getActionRows());
        LayoutComponent.updateComponent(components, getComponentId(), newButton);

        if (isAcknowledged())
            return getHook().editMessageComponentsById(message.getId(), components).map(it -> null);
        else
            return editComponents(components).map(it -> null);
    }","/**
     * Update the button with a new button instance.
     *
     * <p>If this interaction is already acknowledged this will use {@link #getHook()}
     * and otherwise {@link #editComponents(Collection)} directly to acknowledge the interaction.
     *
     * @param  newButton
     *         The new button to use, or null to remove this button from the message entirely
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.interactions.components.buttons
"default Flux<ThreadChannel> getPublicArchivedThreads() {
        return getRestChannel()
            .getPublicArchivedThreads()
            .map(ListThreadsData::threads)
            .flatMap(Flux::fromIterable)
            .map(channelData -> new ThreadChannel(getClient(), channelData));
    }","/**
     * Requests to retrieve the public archived threads for this channel.
     *
     * @return A {@link Flux} that continually emits the public archived {@link ThreadChannel threads} of the channel.
     * If an error is received, it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    public ScheduledEvent.Status getOldStatus()
    {
        return getOldValue();
    }","/**
     * The old {@link ScheduledEvent#getStatus() status}.
     *
     * @return The old status
     */",net.dv8tion.jda.api.events.guild.scheduledevent.update
"public Flux<UserGuildData> getGuilds() {
        final Function<Map<String, Object>, Flux<UserGuildData>> makeRequest = params ->
                this.getUserService()
                        .getCurrentUserGuilds(params);

        return PaginationUtil.paginateAfter(makeRequest, data -> Snowflake.asLong(data.id()), 0L, 100);
    }","/**
     * Requests to retrieve the guilds the current client is in.
     *
     * @return A {@link Flux} that continually emits the {@link PartialGuildData guilds} that the current client is
     * in. If an error is received, it is emitted through the {@code Flux}.
     */",discord4j.rest
long getAllowed();,"/**
     * The currently set of allowed permission bits.
     * <br>This value represents all <b>granted</b> permissions
     * in the raw bitwise representation.
     *
     * <p>Use {@link #getAllowedPermissions()} to retrieve a {@link java.util.List List}
     * with {@link net.dv8tion.jda.api.Permission Permissions} for this value
     *
     * @return long value of granted permissions
     */",net.dv8tion.jda.api.requests.restaction
Mono<Long> countChannelsInGuild(long guildId);,"/**
     * Counts the number of channels present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Mono} emitting the channel count
     */",discord4j.common.store.api.layout
"@Nonnull
    @CheckReturnValue
    default R mention(@Nonnull IMentionable... mentions)
    {
        Checks.notNull(mentions, ""Mentions"");
        return mention(Arrays.asList(mentions));
    }","/**
     * Used to provide a whitelist for {@link net.dv8tion.jda.api.entities.User Users}, {@link net.dv8tion.jda.api.entities.Member Members}
     * and {@link net.dv8tion.jda.api.entities.Role Roles} that should be pinged,
     * even when they would not be pinged otherwise according to the Set of allowed mention types.
     * <br>On other types of {@link net.dv8tion.jda.api.entities.IMentionable IMentionable}, this does nothing.
     *
     * <p><b>Note:</b> When a User/Member is whitelisted this way, then parsing of User mentions is automatically disabled (same applies to Roles).
     * <br>Also note that whitelisting users or roles implicitly disables parsing of other mentions, if not otherwise set via
     * {@link #setDefaultMentions(Collection)} or {@link #setAllowedMentions(Collection)}.
     *
     * @param  mentions
     *         Users, Members and Roles that should be explicitly whitelisted to be pingable.
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The same instance for chaining
     *
     * @see    #setAllowedMentions(Collection)
     * @see    #setDefaultMentions(Collection)
     */",net.dv8tion.jda.api.utils.messages
"@Nonnull
    @CheckReturnValue
    default AutoModRuleManager setExemptRoles(@Nonnull Role... roles)
    {
        Checks.noneNull(roles, ""Roles"");
        return setExemptRoles(Arrays.asList(roles));
    }","/**
     * Set which roles can bypass this rule.
     *
     * <p>Roles added to the exemptions will allow all of its members to bypass this rule.
     *
     * @param  roles
     *         The roles to exempt (up to {@value AutoModRule#MAX_EXEMPT_ROLES} roles)
     *
     * @throws IllegalArgumentException
     *         If null is provided or the number of roles exceeds {@value AutoModRule#MAX_EXEMPT_ROLES}
     *
     * @return AutoModRuleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
Publisher<ByteBuf> write(GatewayPayload<?> payload);,"/**
     * Write a given payload to the output buffer.
     *
     * @param payload the output payload
     * @return the publisher of outbound {@code ByteBuf}
     */",discord4j.gateway.payload
"public static final Route GUILD_SCHEDULED_EVENTS_GET = Route.get(""/guilds/{guild.id}/scheduled-events"");","/**
     * Returns a list of all scheduled events for a guild.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild"">
     * https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild</a>
     */",discord4j.rest.route
"public static ThreadMemberUpdateAction threadMemberUpdate(int shardIndex, ThreadMemberUpdate dispatch) {
        return new ThreadMemberUpdateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link ThreadMemberUpdate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link ThreadMemberUpdateAction}
     */",discord4j.common.store.action.gateway
"public Publisher<?> onReconnect(ReconnectEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when subsequent reconnections to the Gateway, either through resumption or full retry.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Publisher<?> onStoreChannelCreate(StoreChannelCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild store channel is created.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    InviteAction setUnique(@Nullable final Boolean unique);","/**
     * Sets whether discord should reuse a similar invite. Default is {@code false}.
     *
     * @param  unique
     *         Whether discord should reuse a similar invite or {@code null} to use the default value.
     *
     * @return The current InviteAction for chaining.
     */",net.dv8tion.jda.api.requests.restaction
"public static ClientActivity competing(String name) {
        return of(Activity.Type.COMPETING, name, null);
    }","/**
     * Creates a {@link Activity.Type#COMPETING competing} activity.
     *
     * @param name the name of the activity
     * @return a competing activity with the given name
     */",discord4j.core.object.presence
int getSortBucket();,"/**
     * The sorting bucket for this order action.
     * <br>Multiple different {@link ChannelType ChannelTypes} can
     * share a common sorting bucket.
     *
     * @return The sorting bucket
     */",net.dv8tion.jda.api.requests.restaction.order
"@Nonnull
    List<Channel> getChannels();","/**
     * The channels shown in the welcome screen.
     *
     * @return Possibly-empty, unmodifiable list of the channels shown in the welcome screen
     */",net.dv8tion.jda.api.entities
"@Nonnull
    public OffsetDateTime getTimestamp()
    {
        return timestamp;
    }","/**
     * The time when the user started typing
     *
     * @return The time when the typing started
     */",net.dv8tion.jda.api.events.user
"@Nullable
    @SuppressWarnings(""unchecked"")
    public <T> T getOptionByName(@Nullable String name)
    {
        return (T) options.get(name);
    }","/**
     * Shortcut to <code>{@link #getOptions() getOptions()}.get(name)</code> lookup!
     * <br>This lookup is case-insensitive!
     *
     * @param  <T>
     *         The expected type for this option <br>Will be used for casting
     * @param  name
     *         The field name to look for
     *
     * @throws java.lang.ClassCastException
     *         If the type-cast failed for the generic type.
     *
     * @return Possibly-null value corresponding to the specified key
     */",net.dv8tion.jda.api.audit
"@Nonnull
    public ThreadChannel getThreadChannel()
    {
        return thread;
    }","/**
     * The {@link ThreadChannel} representing the post.
     * <br>This will use the name provided to {@link ForumChannel#createForumPost(String, MessageCreateData)}.
     *
     * @return The forum post thread channel
     */",net.dv8tion.jda.api.entities.channel.forums
"@Nonnull
    @Unmodifiable
    default List<VoiceChannel> getVoiceChannels()
    {
        return getGuild().getVoiceChannelCache().applyStream(stream ->
            stream.filter(channel -> equals(channel.getParentCategory()))
                  .sorted()
                  .collect(Helpers.toUnmodifiableList())
        );
    }","/**
     * All {@link VoiceChannel VoiceChannels}
     * listed for this Category
     *
     * @return Immutable list of all child VoiceChannels
     */",net.dv8tion.jda.api.entities.channel.concrete
"@Nullable
    public String getOldAvatarUrl()
    {
        return previous == null ? null : String.format(User.AVATAR_URL, getUser().getId(), previous, previous.startsWith(""a_"") ? ""gif"" : ""png"");
    }","/**
     * The previous avatar url
     *
     * @return The previous avatar url
     */",net.dv8tion.jda.api.events.user.update
"@Nonnull
    public JDA.Status getOldStatus()
    {
        return oldStatus;
    }","/**
     * The previous status
     *
     * @return The previous status
     */",net.dv8tion.jda.api.events
"@Nonnull
    MessageCreateAction setMessageReference(@Nullable String messageId);","/**
     * Message reference used for a reply.
     * <br>The client will show this message as a reply to the target message.
     *
     * <p>You can only reply to messages from the same channel.
     * By default, this will mention the author of the target message, this can be disabled using {@link #mentionRepliedUser(boolean)}.
     *
     * <p>This also requires {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY Permission.MESSAGE_HISTORY} in the channel.
     * If this permission is missing, you receive {@link net.dv8tion.jda.api.requests.ErrorResponse#REPLY_FAILED_MISSING_MESSAGE_HISTORY_PERM ErrorResponse.REPLY_FAILED_MISSING_MESSAGE_HISTORY_PERM}.
     *
     * <p>If the target message does not exist, this will result in {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE ErrorResponse.UNKNOWN_MESSAGE}.
     * You can use {@link #failOnInvalidReply(boolean)} to allow unknown or deleted messages.
     *
     * @param  messageId
     *         The target message id to reply to
     *
     * @throws IllegalArgumentException
     *         If the message id is not a valid snowflake
     *
     * @return The same instance for chaining
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoice(@Nonnull String name, long value)
    {
        return replyChoices(new Command.Choice(name, value));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * @param  name
     *         The choice name to show to the user, 1-{@value OptionData#MAX_CHOICE_NAME_LENGTH} characters
     * @param  value
     *         The choice value, must be between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the choice name is empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the value of is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"public Mono<User> getTargetUser() {
        return getClient().getUserById(getTargetId());
    }","/**
     * Requests to retrieve the targeted User.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link User} targeted by the user.
     * If an error is received, it is emitted through the Mono.
     */",discord4j.core.event.domain.interaction
"public GatewayResources(Store store, EventDispatcher eventDispatcher,
                            ShardCoordinator shardCoordinator, MemberRequestFilter memberRequestFilter,
                            GatewayReactorResources gatewayReactorResources,
                            VoiceReactorResources voiceReactorResources,
                            ReconnectOptions voiceReconnectOptions, IntentSet intents) {
        this.store = store;
        this.eventDispatcher = eventDispatcher;
        this.shardCoordinator = shardCoordinator;
        this.memberRequestFilter = memberRequestFilter;
        this.gatewayReactorResources = gatewayReactorResources;
        this.voiceReactorResources = voiceReactorResources;
        this.voiceReconnectOptions = voiceReconnectOptions;
        this.intents = intents;
    }","/**
     * Create a new {@link GatewayResources} with the given parameters.
     *
     * @param store an entity cache
     * @param eventDispatcher an event bus dedicated to distribute {@link Event} instances
     * @param shardCoordinator a middleware component to coordinate multiple shard-connecting efforts
     * @param memberRequestFilter a strategy to determine whether guild members should be requested
     * @param gatewayReactorResources a custom set of Reactor resources targeting Gateway operations
     * @param voiceReactorResources a set of Reactor resources targeting Voice Gateway operations
     * @param voiceReconnectOptions a reconnection policy for Voice Gateway connections
     * @param intents a set of events to subscribe when connecting to the Gateway
     */",discord4j.core
"@Nonnull
    @Override
    public AutoModTriggerType getType()
    {
        return type;
    }","/**
     * The type of trigger this config applies to.
     *
     * @return {@link AutoModTriggerType}
     */",net.dv8tion.jda.api.entities.automod.build
Mono<PermissionSet> getEffectivePermissions(Member member);,"/**
     * Gets the permissions for the given member, taking into account permission overwrites in this channel.
     *
     * @param member The member to get permissions for.
     * @return The permissions for the given member.
     */",discord4j.core.object.entity.channel
"@GetMapping(path = {"""", ""/""}","/**
	 * get to entry point
	 * @return home
	 */",com.pfa.app.controller.web
"@Override
    public int getMinTimeSeparation() {
        return this.minTimeSeparation;
    }","/**
     * Get the minimum time separation between two gestures.
     * <p>
     * If the time is too short a long gesture can be recognized multiple time according to update rate value
     *
     * @return the time separation in milliseconds, a value usually between 0 and 1000.
     */",jestures.core.recognition.gesturedata
"default Mono<ThreadMemberData> getThreadMemberById(long threadId, long userId) {
        return Mono.empty();
    }","/**
     * Retrieves data for the thread member corresponding to the given thread ID and user ID.
     *
     * @param threadId the thread ID
     * @param userId the user ID
     * @return A {@link Mono} emitting the thread member data, or empty if not found
     * @since 3.3.0
     */",discord4j.common.store.api.layout
"@Nonnull
    public String getUrl(int width, int height)
    {
        Checks.positive(width, ""Image width"");
        Checks.positive(height, ""Image height"");

        return IOUtil.addQuery(getUrl(), ""width"", width, ""height"", height);
    }","/**
     * Returns the attachment URL for the specified width and height.
     * <br>The width and height is a best-effort resize from Discord.
     *
     * @param  width
     *         The width of the image
     * @param  height
     *         The height of the image
     *
     * @return URL of the attachment with the specified width and height
     */",net.dv8tion.jda.api.utils
"void setPresence(@Nullable OnlineStatus status, @Nullable Activity activity, boolean idle);","/**
     * Sets all presence fields of this session.
     *
     * @param  status
     *         The {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} for this session
     *         (See {@link #setStatus(OnlineStatus)})
     * @param  activity
     *         The {@link net.dv8tion.jda.api.entities.Activity Activity} for this session
     *         (See {@link #setActivity(net.dv8tion.jda.api.entities.Activity)} for more info)
     * @param  idle
     *         Whether to mark this session as idle (useful for client accounts {@link #setIdle(boolean)})
     *
     * @throws java.lang.IllegalArgumentException
     *         If the specified OnlineStatus is {@link net.dv8tion.jda.api.OnlineStatus#UNKNOWN UNKNOWN}
     */",net.dv8tion.jda.api.managers
"public Publisher<?> onApplicationCommandDelete(ApplicationCommandDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an application command relevant to the current user is deleted. Guild ID might be missing
     * if this event fires for a DM channel.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
Mono<Void> updateWeather(CityWeatherUpdateDTO dto);,"/**
     * This method is used to update weather the city entity.
     * Throws NotFoundException if city is not found for the id you provide.
     * Throws an InvalidValidationException if the dto info field you provide is invalid
     *
     * @param dto -> CityWeatherUpdateDTO comes in and all its fields must be not null
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.service.city
"public ContextView getContext() {
        return context;
    }","/**
     * Return the Reactor {@link ContextView} providing metadata about this exception.
     *
     * @return a Reactor context instance
     */",discord4j.common.close
"@Nonnull
    default String getGateway()
    {
        return ""wss://gateway.discord.gg/"";
    }","/**
     * Discord's gateway URL, which is used to receive events.
     *
     * <p>Called by JDA when starting a new gateway session (Connecting, Reconnecting).
     *
     * @return The gateway endpoint
     */",net.dv8tion.jda.api.utils
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction reply(@Nonnull MessageCreateData message)
    {
        Checks.notNull(message, ""Message"");
        ReplyCallbackActionImpl action = (ReplyCallbackActionImpl) deferReply();
        return action.applyData(message);
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     * </ul>
     *
     * @param  message
     *         The {@link MessageCreateData} to send
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link ReplyCallbackAction}
     *
     * @see    net.dv8tion.jda.api.utils.messages.MessageCreateBuilder MessageCreateBuilder
     */",net.dv8tion.jda.api.interactions.callbacks
"public Mono<NewsChannel> getNewsChannel(EntityRetrievalStrategy retrievalStrategy) {
        return gateway.withRetrievalStrategy(retrievalStrategy)
                .getChannelById(Snowflake.of(data.channelId()))
                .cast(NewsChannel.class);
    }","/**
     * Requests to retrieve the news channel that has been followed, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the news channel
     * @return A {@link Mono} where, upon successful completion, emits the {@link NewsChannel news channel} that has
     * been followed. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
    @CheckReturnValue
    InviteAction setTemporary(@Nullable final Boolean temporary);","/**
     * Sets whether the invite should only grant temporary membership. Default is {@code false}.
     *
     * @param  temporary
     *         Whether the invite should only grant temporary membership or {@code null} to use the default value.
     *
     * @return The current InviteAction for chaining.
     */",net.dv8tion.jda.api.requests.restaction
"public boolean confirm(String message) {
    write(message + "" (y/n) "");
    while (true) {
      var value = readLine().trim().toLowerCase();
      if (value.equals(""y"")) {
        return true;
      }
      if (value.equals(""n"")) {
        return false;
      }
    }
  }","/**
   * Displays a message and ask confirmation.
   *
   * @param message the message
   * @return <code>true</code> if yes;
   *         <code>false</code> if no.
   */",io.github.augustoravazoli.termenu.io
"public Function<RestInteraction, InteractionHandler> build() {
        return interaction -> {
            if (interaction.getData().guildId().isAbsent()) {
                return directInteractionHandlerFunction.apply((DirectInteraction) interaction);
            } else {
                return guildInteractionHandlerFunction.apply((GuildInteraction) interaction);
            }
        };
    }","/**
     * Produce an interaction handler function to be used in a method such as
     * {@link Interactions#onGlobalCommand(ApplicationCommandRequest, Function)} and will route to the appropriate
     * guild or direct message interaction handler.
     *
     * @return a mapper to convert an {@link RestInteraction} into an {@link InteractionHandler}
     */",discord4j.rest.interaction
"@Deprecated
    public JacksonResources(Function<ObjectMapper, ObjectMapper> mapper) {
        this.objectMapper = INITIALIZER.andThen(mapper).apply(new ObjectMapper());
    }","/**
     * Create a custom {@link ObjectMapper}, based on the defaults given by {@link #JacksonResources()}.
     *
     * @param mapper a Function to customize the ObjectMapper to be created
     * @deprecated use one of the static factories and then call {@link #withMapperFunction(Function)}
     */",discord4j.common
"public static VoiceStateUpdateDispatchAction voiceStateUpdateDispatch(int shardIndex,
                                                                          VoiceStateUpdateDispatch dispatch) {
        return new VoiceStateUpdateDispatchAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link VoiceStateUpdateDispatch} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link VoiceStateUpdateDispatchAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    @CheckReturnValue
    default CommandEditAction addOptions(@Nonnull Collection<? extends OptionData> options)
    {
        Checks.noneNull(options, ""Options"");
        return addOptions(options.toArray(new OptionData[0]));
    }","/**
     * Adds up to 25 options to this command.
     * <br>This will replace any existing options/subcommands/groups on the command.
     *
     * <p>Required options must be added before non-required options!
     *
     * @param  options
     *         The {@link OptionData Options} to add
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If you try to mix subcommands/options/groups in one command.</li>
     *             <li>If the option type is {@link OptionType#SUB_COMMAND} or {@link OptionType#SUB_COMMAND_GROUP}.</li>
     *             <li>If this option is required and you already added a non-required option.</li>
     *             <li>If more than 25 options are provided.</li>
     *             <li>If null is provided</li>
     *         </ul>
     *
     * @return The CommandEditAction instance, for chaining
     */",net.dv8tion.jda.api.requests.restaction
"public Optional<String> getNonce() {
        return Optional.ofNullable(nonce);
    }","/**
     * Gets the nonce used in the Guild Members Request, if present.
     *
     * @return The nonce used in the Guild Members Request, if present.
     */",discord4j.core.event.domain.guild
"public static final Route GUILD_ROLE_DELETE = Route.delete(""/guilds/{guild.id}/roles/{role.id}"");","/**
     * Delete a guild role. Requires the 'MANAGE_ROLES' permission. Returns a 204 empty response on success. Fires a
     * Guild Role Delete Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#delete-guild-role"">
     * https://discord.com/developers/docs/resources/guild#delete-guild-role</a>
     */",discord4j.rest.route
"public static double getDouble(@Nonnull DataObject root, @Nonnull String path, double fallback)
    {
        Double doubleValue = get(root, path, (obj, key) -> obj.getDouble(key, fallback), (arr, index) -> arr.getDouble(index, fallback));
        return doubleValue == null ? fallback : doubleValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     * <br>If the resulting value is a string, this will parse the string using {@link Double#parseDouble(String)}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The double value at the given path, returning the fallback if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    @Override
    TemplateManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * <br>Example: {@code manager.reset(TemplateManager.NAME, TemplateManager.DESCRIPTION);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #DESCRIPTION}</li>
     * </ul>
     *
     * @param  fields
     *         Integer values containing the flags to reset.
     *
     * @return TemplateManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @Unmodifiable
    default List<Category> getCategories()
    {
        return getCategoryCache().asList();
    }","/**
     * Gets all {@link Category Categories} in the cache.
     * <br>In {@link Guild} cache, channels are sorted according to their position and id.
     *
     * <p>This copies the backing store into a list. This means every call
     * creates a new list with O(n) complexity. It is recommended to store this into
     * a local variable or use {@link #getCategoryCache()} and use its more efficient
     * versions of handling these values.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return An immutable list of all {@link Category Categories} in this Guild.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Snowflake getId() {
        return Snowflake.of(user.id());
    }","/**
     * Gets the ID of this member.
     *
     * @return The ID of this member;
     */",discord4j.core.object.command
"public long asLong() {
        return id;
    }","/**
     * Gets the <i>unsigned</i> ID of this {@code Snowflake} as a primitive long.
     *
     * @return The <i>unsigned</i> ID of this {@code Snowflake} as a primitive long.
     */",discord4j.common.util
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction replyEmbeds(@Nonnull Collection<? extends MessageEmbed> embeds)
    {
        return deferReply().addEmbeds(embeds);
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     * </ul>
     *
     * @param  embeds
     *         The {@link MessageEmbed MessageEmbeds} to send
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link ReplyCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nonnull
    @CheckReturnValue
    ThreadChannelManager setPinned(boolean pinned);","/**
     * Sets the pinned state of this ThreadChannel.
     *
     * <p>This property can only be set on forum post threads.
     *
     * @param  pinned
     *         The new pinned state for the selected {@link ThreadChannel}
     *
     * @throws IllegalStateException
     *         If the selected {@link ThreadChannel} is not a forum post thread
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account is not the thread owner or does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_THREADS MANAGE_THREADS} permission.
     *
     * @return this ThreadChannelManager for chaining convenience.
     *
     * @see ThreadChannel#isPinned()
     */",net.dv8tion.jda.api.managers.channel.concrete
Mono<CityGetDTO> get(Integer id);,"/**
     * This method is used to get the CityGetDTO.
     * Throws NotFoundException if city is not found for the given id.
     *
     * @param id -> Incoming id cannot be less than one.
     * @return Mono<CityGetDTO>
     * @since 1.0
     */",org.khasanof.citiesapi.service.city
"public static final Route GUILD_INTEGRATION_CREATE = Route.post(""/guilds/{guild.id}/integrations"");","/**
     * Attach an integration object from the current user to the guild. Requires the 'MANAGE_GUILD' permission. Returns
     * a 204 empty response on success. Fires a Guild Integrations Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#create-guild-integration"">
     * https://discord.com/developers/docs/resources/guild#create-guild-integration</a>
     */",discord4j.rest.route
"public ThreadMember(final GatewayDiscordClient gateway, final ThreadMemberData data) {
        this.gateway = Objects.requireNonNull(gateway);
        this.data = Objects.requireNonNull(data);
    }","/**
     * Constructs a {@code ThreadMember} with an associated {@link GatewayDiscordClient} and Discord data.
     *
     * @param gateway The {@link GatewayDiscordClient} associated to this object, must be non-null.
     * @param data The raw data as represented by Discord, must be non-null.
     */",discord4j.core.object.entity
"public DiscordWebRequest basicAuth(String base64EncodedValue) {
        this.authorizationScheme = AuthorizationScheme.BASIC;
        this.authorizationValue = base64EncodedValue;
        return this;
    }","/**
     * Use the given value as basic authentication.
     *
     * @param base64EncodedValue the base64 encoded value to use
     * @return this request
     */",discord4j.rest.request
"@Nonnull
        public EnumSet<Permission> getInherit()
        {
            return Permission.getPermissions(getInheritRaw());
        }","/**
         * EnumSet of all {@link net.dv8tion.jda.api.Permission Permission} that are unaffected by this override.
         * <br><u>Changes to the returned set do not affect this entity directly.</u>
         *
         * @return Possibly-empty set of unaffected {@link net.dv8tion.jda.api.Permission Permissions}.
         */",net.dv8tion.jda.api.entities.templates
"public ObjectMapper getObjectMapper() {
        return restClient.getRestResources().getJacksonResources().getObjectMapper();
    }","/**
     * Return the Jackson {@link ObjectMapper} tied to this instance for JSON handling purposes.
     *
     * @return an object that can provide JSON processing
     */",discord4j.oauth2
"public Publisher<?> onUserUpdate(UserUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when one or more user's properties were updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    default GuildStickerManager setTags(@Nonnull String... tags)
    {
        Checks.noneNull(tags, ""Tags"");
        return setTags(Arrays.asList(tags));
    }","/**
     * Sets the <b><u>tags</u></b> of the sticker.
     * <br>These are used for auto-complete when sending a message in the client, and for the sticker picker menu.
     *
     * <p>The combined list of sticker tags <b>must</b> at most be 200 characters long!
     *
     * <p><b>Example</b>: {@code catDance} or {@code dogWave}
     *
     * @param  tags
     *         The new tags for the sticker (up to 200 characters)
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code tags} is {@code null}</li>
     *             <li>If {@code tags} is empty</li>
     *             <li>If {@code tags} contains {@code null} or empty strings</li>
     *             <li>If the concatenated tags are more than 200 characters long (including commas between tags)</li>
     *         </ul>
     *
     * @return GuildStickerManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"event is not cancelled by factions
            Entity damagee = sub.getEntity();","/**
     * Who can I hurt? I can never hurt members or allies. I can always hurt enemies. I can hurt neutrals as long as
     * they are outside their own territory.
     */",com.massivecraft.factions.listeners
public abstract Set<FCommand> fCommandsToRegister();,"/**
     * Method to define FCommands you want to register. You don't need to register them.
     * @return Set of commands you want to register.
     */",com.massivecraft.factions.addon
"default Flux<Message> getPinnedMessages() {
        return getClient().getRestClient().getChannelService()
                .getPinnedMessages(getId().asLong())
                .map(data -> new Message(getClient(), data));
    }","/**
     * Requests to retrieve all the pinned messages for this channel.
     *
     * @return A {@link Flux} that continually emits all the pinned messages for this channel. If an error is received,
     * it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
"public Optional<ReactionEmoji> getEmoji() {
        return this.data.data().emoji().toOptional().map(ReactionEmoji::of);
    }","/**
     * Gets the emoji of the poll answer.
     *
     * @return An {@link Optional} containing the emoji of the poll answer, or {@link Optional#empty()} if not present
     */",discord4j.core.object.entity.poll
"public Mono<GuildUpdateData> modify(GuildModifyRequest request, @Nullable String reason) {
        return restClient.getGuildService().modifyGuild(id, request, reason);
    }","/**
     * Modify a guild's settings. Requires the {@link Permission#MANAGE_GUILD} permission. Returns the updated guild
     * object on success.
     *
     * @param request the modify request body
     * @param reason an optional reason for the audit log
     * @return a {@link Mono} where, upon subscription, emits the updated {@link GuildUpdateData} on success. If an
     * error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
void setOnJointTracked(JointListener listener);,"/**
     * Attache the listener.
     *
     * @param listener
     *            the listener
     */",jestures.core.tracking
"public boolean isAvailable() {
            return available;
        }","/**
         * Whether or not the Guild has been made available via a
         * {@link discord4j.core.event.domain.guild.GuildCreateEvent}
         *
         * @return Whether or not the Guild has been made available yet.
         */",discord4j.core.event.domain.lifecycle
"public Publisher<?> onApplicationCommandInteraction(ApplicationCommandInteractionEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user starts an application command interaction.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Override
    public void setMinDtwThreashold(final int minDTWThreashold) {
        if (minDTWThreashold >= 0) {
            this.minDTWThreashold = minDTWThreashold;
        } else {
            throw new IllegalStateException(""Min threshold must be greater than 0"");
        }
    }","/**
     * Set the threshold for gesture minimum acceptance.
     * <p>
     * Only gestures, that have a feature vector distance (by DTW) lower than minThreashold, are accepted.
     *
     *
     * @param minDTWThreashold
     *            represents the minimum distance above which a feature vector is accepted
     */",jestures.core.recognition.gesturedata
"@Nonnull
    @Override
    public String getPropertyIdentifier()
    {
        return channelField.getFieldName();
    }","/**
     * The identifier of the {@link Channel Channel's} field that has just been updated.
     *
     * @return The identifier of the {@link Channel Channel's} field that has just been updated.
     */",net.dv8tion.jda.api.events.channel.update
"public TemplateData getData() {
        return data;
    }","/**
     * Gets the data of the template.
     *
     * @return The data of the template.
     */",discord4j.core.object
"@Nonnull
    public SelfUser getSelfUser()
    {
        return api.getSelfUser();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.SelfUser SelfUser}
     *
     * @return The {@link net.dv8tion.jda.api.entities.SelfUser SelfUser}
     */",net.dv8tion.jda.api.events.self
default void handleUserAudio(@Nonnull UserAudio userAudio) {},"/**
     * If {@link #canReceiveUser()} returns true, JDA will provide a {@link net.dv8tion.jda.api.audio.UserAudio UserAudio}
     * object to this method <b>every time the user speaks.</b> Continuing with the last statement: This method is only fired
     * when discord provides us audio data which is very different from the scheduled firing time of
     * {@link #handleCombinedAudio(CombinedAudio)}.
     * <p>
     * The {@link net.dv8tion.jda.api.audio.UserAudio UserAudio} object provided to this method will contain the
     * {@link net.dv8tion.jda.api.entities.User User} that spoke along with <b>only</b> the audio data sent by the specific user.
     * <p>
     * The main use of this method is for listening to specific users. Whether that is for audio recording,
     * custom mixing (possibly for user muting), or even voice recognition, this is the method you will want.
     * <p>
     * If you are wanting to do audio recording, please consider {@link #handleCombinedAudio(CombinedAudio)} as it was created
     * just for that reason.
     * <p>
     * Output audio format: 48KHz 16bit stereo signed BigEndian PCM
     * <br>and is defined by: {@link net.dv8tion.jda.api.audio.AudioReceiveHandler#OUTPUT_FORMAT AudioRecieveHandler.OUTPUT_FORMAT}
     *
     * @param  userAudio
     *         The user audio data
     */",net.dv8tion.jda.api.audio
"@Nonnull
    public ChannelUnion getChannel()
    {
        return (ChannelUnion) this.channel;
    }","/**
     * The {@link Channel} the event was fired from.
     *
     * @return The {@link ChannelType} of the channel the event was fired from.
     */",net.dv8tion.jda.api.events.channel
Duration getResponseTime();,"/**
     * Gets the amount of time it last took Discord to respond to a heartbeat with an ack.
     *
     * @return the duration which Discord took to respond to the last heartbeat with an ack.
     */",discord4j.gateway
"public Publisher<?> onThreadChannelDeleteEvent(ThreadChannelDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a thread relevant to the current user is deleted.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
private static final BigInteger ALL_ONES = BigIntegerHelper.getAllOnes();,"/**
 * Copyright (c) 2016 Constantin Roganov
 * <p/>
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the ""Software""), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p/>
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * <p/>
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */",threegpp.milenage.biginteger
"@Nonnull
    public ScheduledEvent getScheduledEvent()
    {
        return scheduledEvent;
    }","/**
     * The {@link ScheduledEvent}
     *
     * @return The Scheduled Event
     */",net.dv8tion.jda.api.events.guild.scheduledevent
"public boolean wasHoisted()
    {
        return getOldValue();
    }","/**
     * Whether the role was hoisted
     *
     * @return True, if the role was hoisted before this update
     */",net.dv8tion.jda.api.events.role.update
"public int getMinLength()
        {
            return minLength;
        }","/**
         * The minimum length. This is -1 if none has been set.
         *
         * @return Minimum length or -1
         */",net.dv8tion.jda.api.interactions.components.text
"@Nonnull
    MessageChannelUnion getChannel();","/**
     * The targeted {@link net.dv8tion.jda.api.entities.channel.middleman.MessageChannel MessageChannel}
     *
     * @return The MessageChannel instance
     */",net.dv8tion.jda.api.requests.restaction.pagination
"@Nonnull
    @Unmodifiable
    List<PermissionOverride> getPermissionOverrides();","/**
     * Gets all of the {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides} that are part
     * of this {@link GuildChannel GuildChannel}.
     * <br>This combines {@link net.dv8tion.jda.api.entities.Member Member} and {@link net.dv8tion.jda.api.entities.Role Role} overrides.
     * If you would like only {@link net.dv8tion.jda.api.entities.Member Member} overrides or only {@link net.dv8tion.jda.api.entities.Role Role}
     * overrides, use {@link #getMemberPermissionOverrides()} or {@link #getRolePermissionOverrides()} respectively.
     *
     * <p>This requires {@link net.dv8tion.jda.api.utils.cache.CacheFlag#MEMBER_OVERRIDES CacheFlag.MEMBER_OVERRIDES} to be enabled!
     * Without that CacheFlag, this list will only contain overrides for the currently logged in account and roles.
     *
     * @return Possibly-empty immutable list of all {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides}
     *         for this {@link GuildChannel GuildChannel}.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    @CheckReturnValue
    default RoleAction createCopy()
    {
        return createCopy(getGuild());
    }","/**
     * Creates a new {@link net.dv8tion.jda.api.entities.Role Role} in this {@link net.dv8tion.jda.api.entities.Guild Guild}
     * with the same settings as the given {@link net.dv8tion.jda.api.entities.Role Role}.
     * <br>The position of the specified Role does not matter in this case!
     * <br><b>If this {@link Role} has an {@link RoleIcon Icon} set, only its emoji can be copied over.</b>
     *
     * <p>It will be placed at the bottom (just over the Public Role) to avoid permission hierarchy conflicts.
     * <br>For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.api.Permission#MANAGE_ROLES MANAGE_ROLES} Permission
     * and all {@link net.dv8tion.jda.api.Permission Permissions} the given {@link net.dv8tion.jda.api.entities.Role Role} has.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The role could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_ROLES_PER_GUILD MAX_ROLES_PER_GUILD}
     *     <br>There are too many roles in this Guild</li>
     * </ul>
     *
     * @throws net.dv8tion.jda.api.exceptions.PermissionException
     *         If the logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_ROLES} Permission and every Permission the provided Role has
     *
     * @return {@link RoleAction RoleAction}
     *         <br>RoleAction with already copied values from the specified {@link net.dv8tion.jda.api.entities.Role Role}
     */",net.dv8tion.jda.api.entities
"public void setLeft(final L left) {
        this.left = left;
    }","/**
     * Sets the left element of the pair.
     *
     * @param left  the new value of the left element, may be null
     */",net.dv8tion.jda.internal.utils.tuple
"public Optional<ErrorResponse> getErrorResponse() {
        return Optional.ofNullable(errorResponse);
    }","/**
     * Return the HTTP response body in the form of a Discord {@link ErrorResponse}, if present. {@link ErrorResponse}
     * is a common object that contains an internal status code and messages, and could be used to further clarify
     * the source of the API error.
     *
     * @return the Discord error response, if present
     */",discord4j.rest.http.client
"public Optional<Instant> getExpiration() {
        return maxAge > 0 ? Optional.of(getCreation().plus(maxAge, ChronoUnit.SECONDS)): Optional.empty();
    }","/**
     * Gets the instant this invite expires, if possible.
     *
     * @return The instant this invite expires, if possible.
     */",discord4j.core.event.domain
int getSelectedPosition();,"/**
     * The currently selected position
     * that is in focus for all modification operations of this OrderAction instance
     *
     * @return The currently selected index, or -1 if no position has been selected yet
     */",net.dv8tion.jda.api.requests.restaction.order
int number();,"/**
   * The option number to be readed from keyboard.
   *
   * @return the number
   */",io.github.augustoravazoli.termenu.core
"@Nonnull
    @CheckReturnValue
    default RestAction<Void> deleteOriginal()
    {
        return deleteMessageById(""@original"");
    }","/**
     * Delete the original reply.
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.interactions
"public static final Route LIST_SKUS = Route.get(""/applications/{application.id}/skus"");","/**
     * Returns a list of SKUs for a given application.
     *
     * @see <a href=""https://discord.com/developers/docs/monetization/skus#list-skus"">Docs</a>
     */",discord4j.rest.route
"@Override
	public List<ProjectCommit> findByProjectId(final Integer projectId) {
		return this.rep.findByProjectId(projectId);
	}","/**
	 * @param projectId
	 * @return list of ProjectCommit
	 */",com.pfa.app.service.impl
"public Optional<String> getOptionAsString(final String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asString);
    }","/**
     * Gets the value of the option corresponding to the provided name, if present, as a string.
     *
     * @param name The name of the option.
     * @return An {@link Optional} containing the value of the option corresponding to the provided name, if present, or empty otherwise.
     * @throws IllegalArgumentException If the option is present but its value cannot be converted to a string.
     */",discord4j.core.event.domain.interaction
"public String asFormat() {
        return '<' + (isAnimated() ? ""a"" : """") + ':' + getName() + ':' + getId().asString() + '>';
    }","/**
     * Gets the formatted version of this emoji (i.e., to display in the client).
     *
     * @return The formatted version of this emoji (i.e., to display in the client).
     */",discord4j.core.object.entity
Mono<UserData> getUserById(long userId);,"/**
     * Retrieves data for the user corresponding to the given user ID.
     *
     * @param userId the user ID
     * @return A {@link Mono} emitting the user, or empty if not found
     */",discord4j.common.store.api.layout
"public boolean isDeafened()
    {
        return deafened;
    }","/**
     * Whether the member was deafened in this event.
     *
     * @return True, if the member was deafened with this event
     *         <br>False, if the member was un-deafened in this event
     */",net.dv8tion.jda.api.events.guild.voice
"public LegacyGuildEmojiEditSpec setRoles(Set<Snowflake> roles) {
        this.roles = Possible.of(roles.stream().map(Snowflake::asString).collect(Collectors.toList()));
        return this;
    }","/**
     * Sets the list of roles for which the modified {@link GuildEmoji} will be whitelisted.
     *
     * @param roles The set of role identifiers.
     * @return This spec.
     */",discord4j.core.spec.legacy
long getClassic();,"/**
         * The current global rate-limit reset time.
         * <br>This is the rate-limit applied on the bot token.
         *
         * @return The timestamp when the global rate-limit expires (unix timestamp in milliseconds)
         */",net.dv8tion.jda.api.requests
"public static int hashCode(final Entity entity) {
        return entity.getId().hashCode();
    }","/**
     * A utility that gets the hash code of an entity.
     *
     * @param entity The entity to get a hash code from.
     * @return The hash code of the entity.
     */",discord4j.core.util
"public CompletableFuture<Optional<Document>> getDocument(final String collection, final String fieldName, final Object value) {
        return getCollection(collection).thenApplyAsync(optionalMongoCollection -> optionalMongoCollection.map(mongoCollection -> mongoCollection.find(Filters.eq(fieldName, value)).first()));
    }","/**
     * Gets the first {@link Document} of a MongoCollection with the given filter asynchronously
     * @param collection name of the collection
     * @param fieldName name of the field in the collection
     * @param value value of the given field in the collection
     * @return first found {@link Document}
     */",io.github.heliumdioxid.database.mongo
"public Snowflake getMessageId() {
        return this.messageId;
    }","/**
     * Get the {@link Snowflake} ID of the message where the poll is.
     *
     * @return The ID of the message where the poll is.
     */",discord4j.core.event.domain.poll
"@Nonnull
    ThreadChannel getThread();","/**
     * The {@link ThreadChannel} this thread member is subscribed to.
     *
     * @return The {@link ThreadChannel} this thread member is subscribed to.
     */",net.dv8tion.jda.api.entities
"public int getOldBoostCount()
    {
        return getOldValue();
    }","/**
     * The old boost count
     *
     * @return The old boost count
     */",net.dv8tion.jda.api.events.guild.update
"SensorException() {
        super(""A sensor has encountered an error. Please check the configuration or the sensor"");
    }","/**
     * The @link{SensorException.java} constructor.
     */",jestures.sensor
Mono<MessageData> editInitialResponse(WebhookMessageEditRequest request);,"/**
     * Return a {@link Mono} that upon subscription, will modify the initial response sent when accepting this
     * interaction with the given raw request content.
     *
     * @param request the raw request to be sent as new initial response content
     * @return a {@link Mono} where, upon successful completion, emits the updated message. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"public static ActionRow of(ActionComponent... components) {
        return of(Arrays.asList(components));
    }","/**
     * Creates an {@code ActionRow} with the given components.
     *
     * @param components The child components of the row.
     * @return An {@code ActionRow} containing the given components.
     */",discord4j.core.object.component
"@Nonnull
        List<Member> getMembers();","/**
         * Gets a list of all members in the channel
         * 
         * @return never-null, possibly-empty list of members in the channel
         */",net.dv8tion.jda.api.entities
"@Nonnull
    @Override
    GuildManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * <br>Example: {@code manager.reset(GuildManager.NAME, GuildManager.ICON);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #ICON}</li>
     *     <li>{@link #SPLASH}</li>
     *     <li>{@link #AFK_CHANNEL}</li>
     *     <li>{@link #AFK_TIMEOUT}</li>
     *     <li>{@link #SYSTEM_CHANNEL}</li>
     *     <li>{@link #RULES_CHANNEL}</li>
     *     <li>{@link #COMMUNITY_UPDATES_CHANNEL}</li>
     *     <li>{@link #MFA_LEVEL}</li>
     *     <li>{@link #NOTIFICATION_LEVEL}</li>
     *     <li>{@link #EXPLICIT_CONTENT_LEVEL}</li>
     *     <li>{@link #VERIFICATION_LEVEL}</li>
     *     <li>{@link #BOOST_PROGRESS_BAR_ENABLED}</li>
     *     <li>{@link #FEATURES}</li>
     * </ul>
     *
     * @param  fields
     *         Integer values containing the flags to reset.
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public MemberRequestFilter getMemberRequestFilter() {
        return memberRequestFilter;
    }","/**
     * Return a {@link MemberRequestFilter} indicating whether this shard group should be requesting guild members.
     *
     * @return the {@link MemberRequestFilter} configured in this {@link GatewayResources}
     */",discord4j.core
"public static final Route AUTO_MOD_RULES_GET = Route.get(""/guilds/{guild.id}/auto-moderation/rules"");","/**
     * Get a list of all rules currently configured for guild. Returns a list of auto moderation rule objects for the given guild. Requires the 'MANAGE_GUILD' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/auto-moderation#list-auto-moderation-rules-for-guild"">
     * https://discord.com/developers/docs/resources/auto-moderation#list-auto-moderation-rules-for-guild</a>
     */",discord4j.rest.route
"public Mono<User> getTargetUser(EntityRetrievalStrategy retrievalStrategy) {
        return getClient().withRetrievalStrategy(retrievalStrategy)
                .getUserById(getTargetId());
    }","/**
     * Requests to retrieve the targeted User.
     *
     * @param retrievalStrategy The strategy to use to get the target User
     * @return A {@link Mono} where, upon successful completion, emits the {@link User} targeted by the user.
     * If an error is received, it is emitted through the Mono.
     */",discord4j.core.event.domain.interaction
"@Nonnull
    @CheckReturnValue
    AutoModRuleManager setTriggerConfig(@Nonnull TriggerConfig config);","/**
     * Change the {@link TriggerConfig} for this rule.
     *
     * @param  config
     *         The new config
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return AutoModRuleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static Function<GatewayDiscordClient, Mono<Void>> noopDestroyHandler() {
        return gateway -> Mono.empty();
    }","/**
     * Destroy handler that doesn't perform any cleanup task.
     *
     * @return a noop destroy handler
     */",discord4j.core.shard
"@Nonnull
    AuditableRestAction<T> reason(@Nullable String reason);","/**
     * Applies the specified reason as audit-log reason field.
     * <br>When the provided reason is empty or {@code null} it will be treated as not set.
     * If the provided reason is longer than {@value #MAX_REASON_LENGTH} characters, it will be truncated to fit the limit.
     *
     * <p>Reasons for any AuditableRestAction may be retrieved
     * via {@link net.dv8tion.jda.api.audit.AuditLogEntry#getReason() AuditLogEntry.getReason()}
     * in iterable {@link AuditLogPaginationAction AuditLogPaginationActions}
     * from {@link net.dv8tion.jda.api.entities.Guild#retrieveAuditLogs() Guild.retrieveAuditLogs()}!
     * For {@link net.dv8tion.jda.api.entities.Guild#ban(UserSnowflake, int, TimeUnit) guild bans}, this is also accessible via {@link Guild.Ban#getReason()}.
     *
     * <p>This will specify the reason via the {@code X-Audit-Log-Reason} Request Header.
     *
     * @param  reason
     *         The reason for this action which should be logged in the Guild's AuditLogs (up to {@value #MAX_REASON_LENGTH} characters)
     *
     * @return The current AuditableRestAction instance for chaining convenience
     *
     * @see    ThreadLocalReason
     */",net.dv8tion.jda.api.requests.restaction
"public Mono<ChannelData> createChannel(ChannelCreateRequest request, @Nullable String reason) {
        return restClient.getGuildService().createGuildChannel(id, request, reason);
    }","/**
     * Create a new channel object for the guild. Requires the {@link Permission#MANAGE_CHANNELS} permission. Returns
     * the new channel object on success.
     *
     * @param request the request body
     * @param reason an optional reason for the audit log
     * @return a {@link Mono} where, upon subscription, emits the created {@link ChannelData} on success. If an error
     * is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"@Nullable
    public String getNewAvatarUrl()
    {
        return next == null ? null : String.format(Member.AVATAR_URL, getMember().getGuild().getId(), getMember().getId(), next, next.startsWith(""a_"") ? ""gif"" : ""png"");
    }","/**
     * The url of the new avatar
     *
     * @return The url of the new avatar
     */",net.dv8tion.jda.api.events.guild.member.update
"public long getCommandIdLong()
    {
        return getTargetIdLong();
    }","/**
     * The id of the command whose privileges have been changed.
     *
     * @return id of the command whose privileges have been changed.
     */",net.dv8tion.jda.api.events.interaction.command
"public IntegrationApplicationData getData() {
        return data;
    }","/**
     * Gets the data of the account.
     *
     * @return The data of the account.
     */",discord4j.core.object.entity
"public CoreResources getCoreResources() {
        return coreResources;
    }","/**
     * Obtain the {@link CoreResources} associated with this {@link DiscordClient}.
     *
     * @return the current {@link CoreResources} for this client
     */",discord4j.core
"public PrivateChannel getChannel() {
        return channel;
    }","/**
     * Gets the {@link PrivateChannel} that was deleted in this event.
     *
     * @return The {@link PrivateChannel} that was deleted.
     */",discord4j.core.event.domain.channel
"public static GetMessageByIdAction getMessageById(long channelId, long messageId) {
        return new GetMessageByIdAction(channelId, messageId);
    }","/**
     * Creates an action to retrieve data for the message corresponding to the given channel ID and message ID.
     *
     * @param channelId the channel ID
     * @param messageId the message ID
     * @return a new {@link GetMessageByIdAction}
     */",discord4j.common.store.action.read
"@Nonnull
    OnlineStatus getStatus();","/**
     * The current OnlineStatus for this session.
     * <br>This might not be what the Discord Client displays due to session clashing!
     *
     * @return The {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus}
     *         of the current session
     */",net.dv8tion.jda.api.managers
"@Nonnull
    public Interaction getInteraction()
    {
        return interaction;
    }","/**
     * The {@link Interaction} instance.
     * <br>Note that this event is a delegate which implements the same interface.
     *
     * @return The {@link Interaction}
     */",net.dv8tion.jda.api.events.interaction
"public Mono<OnboardingData> modifyOnboarding(OnboardingEditData request, @Nullable String reason) {
        return this.restClient.getGuildService().modifyOnboarding(this.id, request, reason);
    }","/**
     * Request to modify the onboarding of the guild. Requires the {@link Permission#MANAGE_GUILD} and
     * {@link Permission#MANAGE_ROLES} permissions.
     *
     * @param request the request body
     * @param reason an optional reason for the audit log
     * @return A {@link Mono} where, upon successful completion, emits the modified {@link OnboardingData}.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"public static GuildRoleUpdateAction guildRoleUpdate(int shardIndex, GuildRoleUpdate dispatch) {
        return new GuildRoleUpdateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildRoleUpdate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildRoleUpdateAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    PermissionOverride getPermissionOverride();","/**
     * The target {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     * that will be modified by this Manager
     *
     * @return The target {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @Override
    PermOverrideManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * <br>Example: {@code manager.reset(PermOverrideManager.ALLOWED, PermOverrideManager.DENIED);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #DENIED}</li>
     *     <li>{@link #ALLOWED}</li>
     *     <li>{@link #PERMISSIONS}</li>
     * </ul>
     *
     * @param  fields
     *         Integer values containing the flags to reset.
     *
     * @return PermOverrideManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Override
    public void register(@Nonnull Object listener)
    {
        if (!(listener instanceof EventListener))
        {
            throw new IllegalArgumentException(""Listener must implement EventListener"");
        }
        listeners.add((EventListener) listener);
    }","/**
     * {@inheritDoc}
     *
     * @throws IllegalArgumentException
     *         If the provided listener does not implement {@link net.dv8tion.jda.api.hooks.EventListener EventListener}
     */",net.dv8tion.jda.api.hooks
"@Nullable
    VoiceChannel getVoiceChannelById(long id);","/**
     * Gets a voice channel with the given ID, or {@code null} if the voice channel is not found
     *
     * @param  id
     *         the ID of the voice channel
     *
     * @throws IllegalStateException
     *         If the widget is not {@link #isAvailable() available}
     *
     * @return possibly-null VoiceChannel with the given ID.
     */",net.dv8tion.jda.api.entities
String capacityValue = System.getProperty(OUTBOUND_CAPACITY_PROPERTY);,"/**
     * JVM property that allows modifying the number of outbound payloads permitted before activating the
     * rate-limiter and delaying every following payload for 60 seconds. Default value: 115 permits
     */",discord4j.gateway
"@Nonnull
    default IWebhookContainerUnion getChannel()
    {
        return getWebhook().getChannel();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.channel.attribute.IWebhookContainer channel} that this Manager's
     * {@link net.dv8tion.jda.api.entities.Webhook Webhook} is in.
     * <br>This is logically the same as calling {@code getWebhook().getChannel()}
     *
     * @return The parent {@link net.dv8tion.jda.api.entities.channel.attribute.IWebhookContainer} instance.
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoiceStrings(@Nonnull String... choices)
    {
        return replyChoices(Arrays.stream(choices)
                .map(it -> new Command.Choice(it, it))
                .collect(Collectors.toList()));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * <p>The provided strings will be used as value and name for the {@link net.dv8tion.jda.api.interactions.commands.Command.Choice Choices}.
     *
     * @param  choices
     *         The choice suggestions to present to the user, each limited to {@value OptionData#MAX_CHOICE_NAME_LENGTH} characters
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If any of the choice names are empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the string value of any of the choices is empty or longer than {@value OptionData#MAX_CHOICE_VALUE_LENGTH}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nonnull
    static CustomKeywordTriggerConfig patternFilter(@Nonnull Collection<String> patterns)
    {
        return new CustomKeywordTriggerConfig().addPatterns(patterns);
    }","/**
     * Trigger on messages containing certain keywords regex patterns.
     * <br>Keyword patterns are matched case-insensitively, and may also contain whitespace.
     *
     * <p>Patterns may use anything supported by the rust regex crate.
     * You can use a validator such as <a href=""https://rustexp.lpil.uk/"" target=""_blank"">Rustexp</a> to validate your pattern.
     *
     * <p>You can also use simple substring keywords using {@link #keywordFilter(String...)} or {@link CustomKeywordTriggerConfig#addKeywords(String...)}.
     *
     * @param  patterns
     *         The keyword patterns to match
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any of the patterns are empty, blank, or null</li>
     *             <li>If more than {@value AutoModRule#MAX_PATTERN_AMOUNT} patterns are added</li>
     *             <li>If any of the patterns is longer than {@value AutoModRule#MAX_PATTERN_LENGTH} characters</li>
     *         </ul>
     *
     * @return {@link CustomKeywordTriggerConfig}
     */",net.dv8tion.jda.api.entities.automod.build
"@Nonnull
    public Throwable getCause()
    {
        return throwable;
    }","/**
     * The cause Throwable for this event
     *
     * @return The cause
     */",net.dv8tion.jda.api.events
default void onStatusChange(@Nonnull ConnectionStatus status) {},"/**
     * Called when the status of the audio channel changes. Used to track the connection state of the audio connection
     * for easy debug and status display for clients.
     *
     * @param  status
     *         The new {@link net.dv8tion.jda.api.audio.hooks.ConnectionStatus ConnectionStatus} of the audio connection.
     */",net.dv8tion.jda.api.audio.hooks
"public boolean isMoveEvent() {
        if(old == null) {
            return false;
        }
        return !current.getChannelId().flatMap(current -> old.getChannelId().map(current::equals)).orElse(true);
    }","/**
     * Gets whether this event is a voice channel move event.
     *
     * @return {@code true} if this is a voice channel move event, {@code false} otherwise.
     */",discord4j.core.event.domain
long getInheritRaw();,"/**
     * This is the raw binary representation (as a base 10 long) of the permissions <b>not affected</b> by this override.
     * <br>The long relates to the offsets used by each {@link net.dv8tion.jda.api.Permission Permission}.
     *
     * @return Never-negative long containing the binary representation of the unaffected permissions of this override.
     */",net.dv8tion.jda.api.entities
"@Nullable
    default String getBannerUrl()
    {
        String bannerId = getBannerId();
        return bannerId == null ? null : String.format(BANNER_URL, bannerId, ""png"");
    }","/**
     * The url for the pack banner.
     * <br>This is shown when you at the top of the pack pop-out in the client.
     *
     * @return The banner id, or {@code null} if there is no banner
     */",net.dv8tion.jda.api.entities.sticker
"public Optional<Message> getMessage(Snowflake messageId) {
        return data.messages().toOptional()
                .map(messages -> messages.get(messageId.asString()))
                .map(data -> new Message(gateway, data));
    }","/**
     * Gets the resolved message with the given ID, if present.
     *
     * @param messageId the ID of the message to get
     * @return the resolved message, if present
     */",discord4j.core.object.command
"ScheduledFuture<?> future = executor.schedule(mapping.apply(handle), delay, unit);","/**
     * Creates a new DelayedCompletableFuture scheduled on the supplied executor.
     *
     * @param  executor
     *         The {@link ScheduledExecutorService} to use for scheduling
     * @param  delay
     *         The delay of the task
     * @param  unit
     *         Conversion {@link TimeUnit} for the delay
     * @param  mapping
     *         Conversion function which calls {@link #complete(Object)} of the future it receives
     * @param  <E>
     *         The result type of the scheduled task
     *
     * @return DelayedCompletableFuture for the specified runnable
     */",net.dv8tion.jda.api.utils.concurrent
"@Nonnull
    @CheckReturnValue
    M putRolePermissionOverride(long roleId, long allow, long deny);","/**
     * Adds an override for the specified role with the provided raw bitmasks as allowed and denied permissions.
     * If the role already had an override on this channel it will be replaced instead.
     *
     * @param  roleId
     *         The ID of the role to set permissions for
     * @param  allow
     *         The bitmask to grant
     * @param  deny
     *         The bitmask to deny
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         in this channel, or tries to set permissions it does not have without having {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS} explicitly for this channel through an override.
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    #putRolePermissionOverride(long, Collection, Collection)
     * @see    Permission#getRaw(Permission...) Permission.getRaw(Permission...)
     */",net.dv8tion.jda.api.managers.channel.attribute
"public static GuildStickersUpdateAction guildStickersUpdate(int shardIndex, GuildStickersUpdate dispatch) {
        return new GuildStickersUpdateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildStickersUpdate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildStickersUpdateAction}
     */",discord4j.common.store.action.gateway
Mono<Void> handle(GatewayPayload<T> context);,"/**
     * Perform an action on a payload together with its context, which allows access to various gateway resources.
     *
     * @param context the payload's gateway context
     */",discord4j.gateway
"public T get()
    {
        if (isFailure())
            throw new IllegalStateException(error);
        return value;
    }","/**
     * Unwraps the success value of this result.
     * <br>This only works if {@link #isSuccess()} is true and throws otherwise.
     *
     * @throws IllegalStateException
     *         If the result is not successful
     *
     * @return The result value
     */",net.dv8tion.jda.api.utils
"public static final Route GUILD_PRUNE_BEGIN = Route.post(""/guilds/{guild.id}/prune"");","/**
     * Begin a prune operation. Requires the 'KICK_MEMBERS' permission. Returns an object with one 'pruned' key
     * indicating the number of members that were removed in the prune operation. Fires multiple Guild Member Remove
     * Gateway events.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#begin-guild-prune"">
     * https://discord.com/developers/docs/resources/guild#begin-guild-prune</a>
     */",discord4j.rest.route
"public static HttpClient newHttpClient(ConnectionProvider provider, LoopResources resources) {
        return HttpClient.create(provider).runOn(resources).compress(true).followRedirect(true).secure();
    }","/**
     * Create a Reactor Netty {@link HttpClient} using the given connection pool and event loop threads.
     * <p>Use this in case you want dedicated resources for a particular client or clients instead of the global
     * default.
     *
     * @param provider the connection pool provider to use
     * @param resources the set of event loop threads to use
     * @return an {@link HttpClient} configured with custom resources
     */",discord4j.common
void handle(@Nonnull GenericEvent event);,"/**
     * Handles the provided {@link net.dv8tion.jda.api.events.GenericEvent GenericEvent}.
     * <br>How this is handled is specified by the implementation.
     *
     * <p>An implementation should not throw exceptions.
     *
     * @param event
     *        The event to handle
     */",net.dv8tion.jda.api.hooks
"public long getOldPing()
    {
        return prev;
    }","/**
     * The previous ping for the current JDA session
     *
     * @return The previous ping in milliseconds, or -1 if no ping was available yet
     */",net.dv8tion.jda.api.events
"public Builder resumeSession(@Nullable SessionInfo resumeSession) {
            this.resumeSession = resumeSession;
            return this;
        }","/**
         * Set information about a Gateway session to be resumed. If not specified, a normal authentication is
         * performed, creating a fresh session to the Gateway.
         *
         * @param resumeSession a {@link SessionInfo} for resumption, or {@code null} if not using this capability
         * @return this builder
         */",discord4j.gateway
"@Nonnull
    @CheckReturnValue
    default CommandEditAction addOption(@Nonnull OptionType type, @Nonnull String name, @Nonnull String description, boolean required)
    {
        return addOptions(new OptionData(type, name, description).setRequired(required));
    }","/**
     * Adds an option to this command.
     * <br>This will replace any existing options/subcommands/groups on the command.
     *
     * <p>Required options must be added before non-required options!
     *
     * @param  type
     *         The {@link OptionType}
     * @param  name
     *         The lowercase option name, 1-32 characters
     * @param  description
     *         The option description, 1-100 characters
     * @param  required
     *         Whether this option is required (See {@link OptionData#setRequired(boolean)})
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If you try to mix subcommands/options/groups in one command.</li>
     *             <li>If the option type is {@link OptionType#SUB_COMMAND} or {@link OptionType#SUB_COMMAND_GROUP}.</li>
     *             <li>If this option is required and you already added a non-required option.</li>
     *             <li>If more than 25 options are provided.</li>
     *             <li>If null is provided</li>
     *         </ul>
     *
     * @return The CommandEditAction instance, for chaining
     */",net.dv8tion.jda.api.requests.restaction
"public boolean isSelfMuted()
    {
        return selfMuted;
    }","/**
     * Whether the member muted itself in this event
     *
     * @return True, if the member muted itself,
     *         <br>False, if the member un-muted itself
     */",net.dv8tion.jda.api.events.guild.voice
"@Nonnull
    String getToken();","/**
     * The interaction token used for responding to an interaction.
     *
     * @return The interaction token
     */",net.dv8tion.jda.api.interactions
"public Publisher<?> onReconnectStart(ReconnectStartEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a resumption or reconnection attempt has begun.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nullable
    default ModalMapping getValue(@Nonnull String id)
    {
        Checks.notNull(id, ""ID"");
        return getValues().stream()
                .filter(mapping -> mapping.getId().equals(id))
                .findFirst().orElse(null);
    }","/**
     * Convenience method to get a {@link net.dv8tion.jda.api.interactions.modals.ModalMapping ModalMapping} by its id from the List of {@link net.dv8tion.jda.api.interactions.modals.ModalMapping ModalMappings}
     *
     * <p>Returns null if no component with that id has been found
     *
     * @param  id
     *         The custom id
     *
     * @throws IllegalArgumentException
     *         If the provided id is null
     *
     * @return ModalMapping with this id, or null if not found
     *
     * @see    #getValues()
     */",net.dv8tion.jda.api.interactions.modals
"@Nullable
    public Guild getGuild()
    {
        return getType().isGuild() ? member.getGuild() : null;
    }","/**
     * {@link net.dv8tion.jda.api.entities.Guild Guild} in which this users started typing,
     * or {@code null} if this was not in a Guild.
     *
     * @return Possibly-null {@link net.dv8tion.jda.api.entities.Guild Guild}
     */",net.dv8tion.jda.api.events.user
"public Mono<Member> getMember() {
        return getClient().getMemberById(getGuildId(), getMemberId());
    }","/**
     * Requests to retrieve the {@link Member} involved in the event.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link Member} that has been updated.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.guild
"@Nullable
    public TextChannel getNewSystemChannel()
    {
        return getNewValue();
    }","/**
     * The new system channel.
     *
     * @return The new system channel
     */",net.dv8tion.jda.api.events.guild.update
"default Optional<Snowflake> getCategoryId() {
        return Possible.flatOpt(getData().parentId())
                .map(Snowflake::of);
    }","/**
     * Gets the ID of the category for this channel, if present.
     *
     * @return The ID of the category for this channel, if present.
     */",discord4j.core.object.entity.channel
"@Nonnull
    default S getSelectMenu()
    {
        return getComponent();
    }","/**
     * The {@link SelectMenu} this interaction belongs to.
     *
     * @return The {@link SelectMenu}
     *
     * @see    #getComponentId()
     */",net.dv8tion.jda.api.interactions.components.selections
"@Nonnull
    public AuditLogEntry getEntry()
    {
        return entry;
    }","/**
     * The {@link AuditLogEntry} that was added to the {@link Guild}
     *
     * @return The added entry
     */",net.dv8tion.jda.api.events.guild
"@Nonnull
    Task<T> onSuccess(@Nonnull Consumer<? super T> callback);","/**
     * Provide a callback for success handling.
     * <br>This is an asynchronous operation.
     *
     * @param  callback
     *         The success callback
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The current Task instance for chaining
     */",net.dv8tion.jda.api.utils.concurrent
"public LegacyWebhookExecuteSpec setUsername(String username) {
        this.username = Possible.of(username);
        return this;
    }","/**
     * Sets a username that overrides the default username of the {@link discord4j.core.object.entity.Webhook}.
     *
     * @param username The webhook username.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
        ImageProxy getDefaultAvatar();","/**
         * Returns an {@link ImageProxy} for this user's default avatar image.
         *
         * @return Never-null {@link ImageProxy} of this user's default avatar image
         *
         * @see    #getDefaultAvatarUrl()
         */",net.dv8tion.jda.api.entities
"public RestUser restUser(UserData data) {
        return RestUser.create(this, Snowflake.of(data.id()));
    }","/**
     * Requests to retrieve the user represented by the supplied {@link UserData}.
     *
     * @param data The data of the user.
     * @return A {@link RestUser} as represented by the supplied data.
     */",discord4j.rest
"public <T> Mono<T> bodyToMono(Class<T> responseClass) {
        return responseMono.flatMap(res -> res.bodyToMono(responseClass))
                .publishOn(reactorResources.getBlockingTaskScheduler());
    }","/**
     * Read the response body and extract it to a single object according to the {@code responseType} given. If the
     * response has an HTTP error (status codes 4xx and 5xx) the produced object will be a {@link ClientException}.
     *
     * @param responseClass the target type this response body should be converted into
     * @param <T> the response type
     * @return a {@link Mono} containing the response body extracted into the given {@code T} type. If a network or
     * read error had occurred, it will be emitted through the {@link Mono}.
     */",discord4j.rest.request
"public Mono<Role> getRole(EntityRetrievalStrategy retrievalStrategy) {
        return Mono.justOrEmpty(getRoleId())
                .flatMap(id -> gateway.withRetrievalStrategy(retrievalStrategy)
                        .getRoleById(getGuildId(), id));
    }","/**
     * Requests to retrieve the role this overwrite is associated to, if present, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the role
     * @return A {@link Mono} where, upon successful completion, emits the {@link Role} this overwrite is associated to,
     * if present. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
    @Unmodifiable
    List<T> getElementsByName(@Nonnull String name, boolean ignoreCase);","/**
     * Creates an immutable list of all elements matching the given name.
     * <br>For a {@link net.dv8tion.jda.api.utils.cache.MemberCacheView MemberCacheView} this will
     * check the {@link net.dv8tion.jda.api.entities.Member#getEffectiveName() Effective Name} of the cached members.
     *
     * @param  name
     *         The name to check
     * @param  ignoreCase
     *         Whether to ignore case when comparing names
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided name is {@code null}
     *
     * @return Immutable list of elements with the given name
     */",net.dv8tion.jda.api.utils.cache
"public List<AuditLogEntry> getEntries() {
        return entries;
    }","/**
     * Gets the entries in this portion of the audit log.
     *
     * @return The entries in this portion of the audit log.
     */",discord4j.core.object.audit
"public Publisher<?> onRoleDelete(RoleDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a role is deleted from a guild.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
Mono<Duration> getRemaining();,"/**
     * Returns the {@link Duration} remaining until the current global rate limit is completed. Can be negative or
     * zero if there is no currently active global rate limit.
     *
     * @return a positive {@link Duration} indicating the remaining time a global rate limit is being applied. Zero
     * or negative if no global rate limit is currently active.
     */",discord4j.rest.request
Mono<MessageData> createFollowupMessage(String content);,"/**
     * Create a new followup message with the given content. This uses a webhook tied to the interaction ID and token.
     *
     * @param content the text content included in the followup
     * @return a {@link Mono} where, upon successful completion, emits the sent message. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"@Nonnull
    SnowflakeCacheView<MediaChannel> getMediaChannelCache();","/**
     * {@link SnowflakeCacheView SnowflakeCacheView} of {@link MediaChannel}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return {@link SnowflakeCacheView SnowflakeCacheView}
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    @CheckReturnValue
    RoleManager setIcon(@Nullable Icon icon);","/**
     * Sets the {@link net.dv8tion.jda.api.entities.Icon Icon} of this {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * @param  icon
     *         The new icon for this {@link net.dv8tion.jda.api.entities.Role Role}
     *         or {@code null} to reset
     *
     * @return RoleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
default void onPing(long ping) {},"/**
     * Called when JDA send a heartbeat packet to Discord and Discord sends an acknowledgement. The time difference
     * between sending and receiving the acknowledgement is calculated as the ping.
     *
     * @param  ping
     *         The time, in milliseconds, for round-trip packet travel to discord.
     */",net.dv8tion.jda.api.audio.hooks
"public LegacyGuildCreateSpec addEveryoneRole(Consumer<? super LegacyRoleCreateSpec> legacyroleSpec) {
        final LegacyRoleCreateSpec mutatedSpec = new LegacyRoleCreateSpec();
        legacyroleSpec.accept(mutatedSpec);
        roles.add(0, mutatedSpec.asRequest());
        return this;
    }","/**
     * Sets the default @everyone role for the created {@link Guild}. This shifts all other roles in the list, if
     * present, down by one. It does not replace other @everyone roles already set.
     * <p>
     * When creating a guild, Discord automatically takes the first role in the role array as the default @everyone
     * role. See this limitation and others at {@link LegacyGuildCreateSpec}.
     *
     * @param legacyroleSpec The default @everyone role spec to add to the list of roles.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static ClientActivity playing(String name) {
        return of(Activity.Type.PLAYING, name, null);
    }","/**
     * Creates a {@link Activity.Type#PLAYING playing} activity.
     *
     * @param name the name of the activity
     * @return a playing activity with the given name
     */",discord4j.core.object.presence
"public LegacyRoleCreateSpec setPermissions(PermissionSet permissions) {
        this.permissions = permissions.getRawValue();
        return this;
    }","/**
     * Sets the enabled/disabled permissions, in the form of a {@link PermissionSet} for the created {@link Role}.
     *
     * @param permissions The role permissions.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Mono<InviteData> getInvite(final String inviteCode) {
        return inviteService.getInvite(inviteCode);
    }","/**
     * Requests to retrieve an invite.
     *
     * @param inviteCode The code for the invite (e.g. ""xdYkpp"").
     * @return A {@link Mono} where, upon successful completion, emits the {@link InviteData} as represented by the
     * supplied invite code. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest
long getDeniedRaw();,"/**
     * This is the raw binary representation (as a base 10 long) of the permissions <b>denied</b> by this override.
     * <br>The long relates to the offsets used by each {@link net.dv8tion.jda.api.Permission Permission}.
     *
     * @return Never-negative long containing the binary representation of the denied permissions of this override.
     */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    default RestAction<Void> editSelectMenu(@Nullable SelectMenu newMenu)
    {
        Message message = getMessage();
        List<ActionRow> components = new ArrayList<>(message.getActionRows());
        LayoutComponent.updateComponent(components, getComponentId(), newMenu);

        if (isAcknowledged())
            return getHook().editMessageComponentsById(message.getId(), components).map(it -> null);
        else
            return editComponents(components).map(it -> null);
    }","/**
     * Update the select menu with a new select menu instance.
     *
     * <p>If this interaction is already acknowledged this will use {@link #getHook()}
     * and otherwise {@link #editComponents(Collection)} directly to acknowledge the interaction.
     *
     * @param  newMenu
     *         The new select menu to use, or null to remove this menu from the message entirely
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.interactions.components.selections
String getString() throws Exception;,"/**
         * This method is used by {@link #getLazyString(LazyEvaluation)}
         * when SLF4J requests String construction.
         * <br>The String returned by this is used to construct the log message.
         *
         * @throws Exception
         *         To allow lazy evaluation of methods that might throw exceptions
         *
         * @return The String for log message
         */",net.dv8tion.jda.internal.utils
"public static GetMembersAction getMembers() {
        return new GetMembersAction();
    }","/**
     * Creates an action to retrieve data for all members present in a store.
     *
     * @return a new {@link GetMembersAction}
     */",discord4j.common.store.action.read
"@Nonnull
    @CheckReturnValue
    CustomEmojiManager setName(@Nonnull String name);","/**
     * Sets the <b><u>name</u></b> of the selected {@link RichCustomEmoji}.
     *
     * <p>An emoji name <b>must</b> be between 2-32 characters long!
     * <br>Emoji names may only be populated with alphanumeric (with underscore and dash).
     *
     * <p><b>Example</b>: {@code tatDab} or {@code fmgSUP}
     *
     * @param  name
     *         The new name for the selected {@link RichCustomEmoji}
     *
     * @throws IllegalArgumentException
     *         If the provided name is {@code null} or not between 2-32 characters long
     *
     * @return CustomEmojiManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public PermissionException(String reason)
    {
        this(Permission.UNKNOWN, reason);
    }","/**
     * Creates a new PermissionException instance
     *
     * @param reason
     *        The reason for this Exception
     */",net.dv8tion.jda.api.exceptions
"public static ActionMapper aggregate(ActionMapper... mappers) {
        Objects.requireNonNull(mappers);
        if (mappers.length == 0) return EMPTY;
        if (mappers.length == 1) return mappers[0];
        return new ActionMapper(Arrays.stream(mappers)
                .flatMap(mapper -> mapper.mappings.entrySet().stream())
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); // throws ISE if duplicates
    }","/**
     * Aggregates the mappings contained in the given {@link ActionMapper mappers} into a single {@link ActionMapper}
     * instance. All mappers must be defining distinct sets of actions, any conflicts will cause an
     * {@link IllegalStateException} to be thrown.
     *
     * @param mappers the mappers to aggregate
     * @return an aggregated {@link ActionMapper}
     * @throws IllegalStateException if two or more mappers define a mapping for the same action type
     */",discord4j.common.store.api
"@Nonnull
    static ShardCacheView allShards(@Nonnull Supplier<? extends Stream<? extends ShardCacheView>> generator)
    {
        Checks.notNull(generator, ""Generator"");
        return new ShardCacheViewImpl.UnifiedShardCacheViewImpl(generator);
    }","/**
     * Creates a combined {@link ShardCacheView ShardCacheView}
     * for all provided ShardCacheView implementations.
     *
     * @param  generator
     *         Stream generator of {@link ShardCacheView ShardCacheView} implementations
     *
     * @return Combined ShardCacheView spanning over all provided implementation instances
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoiceDoubles(@Nonnull Collection<Double> choices)
    {
        return replyChoices(choices.stream()
                .map(it -> new Command.Choice(String.valueOf(it), it))
                .collect(Collectors.toList()));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * <p>The string values of the provided doubles will be used as value and name for the {@link net.dv8tion.jda.api.interactions.commands.Command.Choice Choices}.
     *
     * @param  choices
     *         The choice suggestions to present to the user
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the numeric value of any of the choices is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"Mono<VoiceStateData> getVoiceStateById(long guildId, long userId);","/**
     * Retrieves data for the voice state corresponding to the given guild ID and user ID.
     *
     * @param guildId the guild ID
     * @param userId  the user ID
     * @return A {@link Mono} emitting the voice state, or empty if not found
     */",discord4j.common.store.api.layout
"public Builder setMaxBackoffInterval(Duration maxBackoffInterval) {
            if (maxBackoffInterval.minus(firstBackoff).isNegative()) {
                throw new IllegalArgumentException(""maxBackoffInterval must be at least the same as firstBackoff"");
            }
            this.maxBackoffInterval = maxBackoffInterval;
            return this;
        }","/**
         * Set the maximum {@link Duration} to be applied when computing a backoff. Defaults to 30 seconds.
         *
         * @param maxBackoffInterval the maximum duration to be applied as backoff
         * @return this builder
         */",discord4j.common.retry
"public ClientException(ClientRequest request, HttpClientResponse response, @Nullable ErrorResponse errorResponse) {
        super(request.getMethod().toString() + "" "" + request.getUrl() + "" returned "" + response.status().toString() +
                (errorResponse != null ? "" with response "" + errorResponse.getFields() : """"));
        this.request = request;
        this.response = response;
        this.errorResponse = errorResponse;
    }","/**
     * Create a new {@link ClientException} with the given HTTP request and response details.
     *
     * @param request the original {@link ClientRequest} that caused this exception
     * @param response the failing {@link HttpClientResponse}
     * @param errorResponse the response body converted to an {@link ErrorResponse}, or {@code null} if not available
     */",discord4j.rest.http.client
"@Nonnull
    @CheckReturnValue
    CommandEditAction addSubcommandGroups(@Nonnull SubcommandGroupData... groups);","/**
     * Add up to 25 {@link SubcommandGroupData Subcommand-Groups} to this command.
     * <br>This will replace any existing options/subcommands/groups on the command.
     *
     * @param  groups
     *         The subcommand groups to add
     *
     * @throws IllegalArgumentException
     *         If null is provided, or more than 25 subcommand groups are provided.
     *         Also throws if you try to mix subcommands/options/groups in one command.
     *
     * @return The CommandEditAction instance, for chaining
     */",net.dv8tion.jda.api.requests.restaction
"public static long getUnsignedLong(@Nonnull DataObject root, @Nonnull String path)
    {
        Long longValue = get(root, path, DataObject::getUnsignedLong, DataArray::getUnsignedLong);
        if (longValue == null)
            throw pathError(path, ""unsigned long"");
        return longValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     * <br>If the resulting value is a string, this will parse the string using {@link Long#parseUnsignedLong(String)}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The unsigned long value at the given path
     */",net.dv8tion.jda.api.utils.data
private static final Logger LOG = Logger.getLogger(KinectAdapter.class);,"/*******************************************************************************
 * Copyright (c) 2018 Giulianini Luca
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/",jestures.sensor.kinect
"@Nonnull
    @CheckReturnValue
    PermissionOverrideAction setDenied(long denyBits);","/**
     * Sets the value of explicitly denied permissions
     * using the bitwise representation of a set of {@link net.dv8tion.jda.api.Permission Permissions}.
     * <br>This value can be retrieved through {@link net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...) Permissions.getRaw(Permission...)}!
     * <br><b>Note: Permissions not marked as {@link net.dv8tion.jda.api.Permission#isChannel() isChannel()} will have no affect!</b>
     *
     * <p>All newly denied permissions will be removed from the currently set allowed permissions.
     * <br>{@code deny = denyBits; allow = allow & ~denyBits;}
     *
     * @param  denyBits
     *         The <b>positive</b> bits representing the denied
     *         permissions for the new PermissionOverride
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     *
     * @see    #setDenied(java.util.Collection) setDeny(Collection)
     * @see    #setDenied(net.dv8tion.jda.api.Permission...) setDeny(Permission...)
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @CheckReturnValue
    R mentionRoles(@Nonnull Collection<String> roleIds);","/**
     * Used to provide a whitelist of {@link net.dv8tion.jda.api.entities.Role Roles} that should be pinged,
     * even when they would not be pinged otherwise according to the Set of allowed mention types.
     *
     * <p><b>Note:</b> When a Role is whitelisted this way, then parsing of Role mentions is automatically disabled.
     * <br>Also note that whitelisting users or roles implicitly disables parsing of other mentions, if not otherwise set via
     * {@link #setDefaultMentions(Collection)} or {@link #setAllowedMentions(Collection)}.
     *
     * @param  roleIds
     *         Ids of Roles that should be explicitly whitelisted to be pingable.
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The same instance for chaining
     *
     * @see    #setAllowedMentions(Collection)
     * @see    #setDefaultMentions(Collection)
     */",net.dv8tion.jda.api.utils.messages
int getSortValue();,"/**
     * The sticker's sort order within its pack
     *
     * @return The sort order value
     */",net.dv8tion.jda.api.entities.sticker
"static void setPermissionChecksEnabled(boolean enable)
    {
        ManagerBase.setPermissionChecksEnabled(enable);
    }","/**
     * Enables internal checks for missing permissions
     * <br>When this is disabled the chances of hitting a
     * {@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS ErrorResponse.MISSING_PERMISSIONS} is increased significantly,
     * otherwise JDA will check permissions and cancel the execution using
     * {@link net.dv8tion.jda.api.exceptions.InsufficientPermissionException InsufficientPermissionException}.
     * <br><b>Default: true</b>
     *
     * @param enable
     *        True, if JDA should perform permissions checks internally
     *
     * @see   #isPermissionChecksEnabled()
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @Override
    GuildStickerManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * <br>Example: {@code manager.reset(GuildStickerManager.NAME, GuildStickerManager.TAGS);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #DESCRIPTION}</li>
     *     <li>{@link #TAGS}</li>
     * </ul>
     *
     * @param  fields
     *         Integer value containing the flags to reset.
     *
     * @return GuildStickerManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static final Route USER_CONNECTIONS_GET = Route.get(""/users/@me/connections"");","/**
     * Returns a list of connection objects. Requires the connections OAuth2 scope.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/user#get-user-connections"">
     * https://discord.com/developers/docs/resources/user#get-user-connections</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    CommandEditAction addSubcommands(@Nonnull SubcommandData... subcommands);","/**
     * Add up to 25 {@link SubcommandData Subcommands} to this command.
     * <br>This will replace any existing options/subcommands/groups on the command.
     *
     * @param  subcommands
     *         The subcommands to add
     *
     * @throws IllegalArgumentException
     *         If null is provided, or more than 25 subcommands are provided.
     *         Also throws if you try to mix subcommands/options/groups in one command.
     *
     * @return The CommandEditAction instance, for chaining
     */",net.dv8tion.jda.api.requests.restaction
"public Mono<InviteData> getData() {
        return restClient.getInviteService().getInvite(code);
    }","/**
     * Retrieve the contents of this REST entity from Discord API.
     *
     * @return a Mono with the {@link InviteData} contents if successful, otherwise an error Mono
     */",discord4j.rest.entity
"public LegacyInviteCreateSpec setTargetUserId(Snowflake targetUserId) {
        requestBuilder.targetUserId(targetUserId.asString());
        return this;
    }","/**
     * Sets the id of the user whose stream to display for this invite, required if `target_type` is 1,
     * the user must be streaming in the channel.
     *
     * @param targetUserId The id of the user whose stream to display for this invite.
     * @return This spec.
     */",discord4j.core.spec.legacy
Flux<GatewayConnection.State> stateEvents();,"/**
     * Return a sequence of the {@link GatewayConnection.State} transitions this client receives.
     *
     * @return a {@link Flux} of state elements
     */",discord4j.gateway
"public long getOldInheritedRaw()
    {
        return ~(oldAllow | oldDeny);
    }","/**
     * The old inherited permissions as a raw bitmask.
     *
     * @return The old inherited permissions
     */",net.dv8tion.jda.api.events.guild.override
"public static Predicate<Throwable> isStatusCode(int code) {
        return t -> {
            if (t instanceof ClientException) {
                ClientException e = (ClientException) t;
                return e.getStatus().code() == code;
            }
            return false;
        };
    }","/**
     * {@link Predicate} helper to further classify a {@link ClientException} depending on the underlying HTTP status
     * code.
     *
     * @param code the status code for which this {@link Predicate} should return {@code true}
     * @return a {@link Predicate} that returns {@code true} if the given {@link Throwable} is a {@link ClientException}
     * containing the given HTTP status code
     */",discord4j.rest.http.client
"public Mono<Message> getMessage() {
        return super.getClient().getMessageById(this.channelId, this.messageId);
    }","/**
     * Get the {@link Message} where the poll is.
     *
     * @return The message where the poll is.
     */",discord4j.core.event.domain.poll
"public boolean isTemporary() {
        return temporary;
    }","/**
     * Gets whether this invite only grants temporary membership.
     *
     * @return {@code true} if this invite only grants temporary membership
     */",discord4j.core.event.domain
"default void setStatusProvider(@Nullable final IntFunction<OnlineStatus> statusProvider)
    {
        this.getShardCache().forEach(jda -> jda.getPresence().setStatus(statusProvider == null ? null : statusProvider.apply(jda.getShardInfo().getShardId())));
    }","/**
     * Sets the provider that provides the {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} for all shards.
     *
     * <p>This will also change the provider for shards that are created in the future.
     *
     * @param  statusProvider
     *         The {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus}
     *         to be used (OFFLINE/null {@literal ->} INVISIBLE)
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided OnlineStatus is {@link net.dv8tion.jda.api.OnlineStatus#UNKNOWN UNKNOWN}
     */",net.dv8tion.jda.api.sharding
Flux<UserData> getUsers();,"/**
     * Retrieves data for all users present in the store.
     *
     * @return A {@link Flux} emitting the users, or empty if none is present
     */",discord4j.common.store.api.layout
"public boolean isDeaf() {
        return data.deaf();
    }","/**
     * Gets whether this user is deafened by the server.
     *
     * @return {@code true} if the user is deafened by the server, {@code false} otherwise.
     */",discord4j.core.object
"@Nonnull
    String getFullCommandName();","/**
     * Returns the full command name, including possible subcommand name and subcommand group name.
     * <br>This is the name shown on messages or when writing the command in the text input.
     *
     * <p>Examples:
     * <ul>
     *     <li>When used on a normal base command,  the full name is the name itself, as in the name {@code ""ban""} is equal to the full name {@code ""ban""}.</li>
     *     <li>When used on a subcommand {@code ""ban""}, of the base command {@code ""mod""}, the full name resolves to {@code ""mod ban""}</li>
     *     <li>When the subcommand is part of a subcommand group, {@code ""action""} it resolves to {@code ""mod action ban""}</li>
     * </ul>
     *
     * @return the full command name
     */",net.dv8tion.jda.api.interactions.commands
"@Nonnull
    public RestConfig setUserAgentSuffix(@Nullable String suffix)
    {
        if (suffix == null || Helpers.isBlank(suffix))
            this.userAgent = USER_AGENT;
        else
            this.userAgent = USER_AGENT + "" "" + suffix;
        return this;
    }","/**
     * Provide a custom User-Agent suffix which is appended to {@link #USER_AGENT}.
     * <br>You can theoretically replace the User-Agent entirely with {@link #setCustomBuilder(Consumer)},
     * however this is not recommended as Discord blocks requests with invalid or misbehaving User-Agents.
     *
     * @param  suffix
     *         The suffix to append to the User-Agent, null to unset
     *
     * @return The current RestConfig for chaining convenience
     */",net.dv8tion.jda.api.requests
"@Nonnull
    T getChannel();","/**
     * The {@link GuildChannel GuildChannel} that will
     * be modified by this Manager instance
     *
     * @return The {@link GuildChannel GuildChannel}
     */",net.dv8tion.jda.api.managers.channel
"public static final Route GUILD_TEMPLATE_DELETE = Route.delete(""/guilds/{guild.id}/templates/{template.code}"");","/**
     * Deletes the template. Requires the MANAGE_GUILD permission. Returns the deleted template object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/template#delete-guild-template"">
     *         https://discord.com/developers/docs/resources/template#delete-guild-template</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    default MessageEditAction editMessageAttachmentsById(long messageId, @Nonnull AttachedFile... attachments)
    {
        return editMessageAttachmentsById(Long.toUnsignedString(messageId), attachments);
    }","/**
     * Attempts to edit a message by its id in this MessageChannel.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#REQUEST_ENTITY_TOO_LARGE REQUEST_ENTITY_TOO_LARGE}
     *     <br>If any of the provided files is bigger than {@link Guild#getMaxFileSize()}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_AUTHOR_EDIT INVALID_AUTHOR_EDIT}
     *     <br>Attempted to edit a message that was not sent by the currently logged in account.
     *         Discord does not allow editing of other users' Messages!</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The request was attempted after the account lost access to the {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed, or after {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}
     *         was revoked in the {@link GuildMessageChannel}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
     *         the message it referred to has already been deleted. This might also be triggered for ephemeral messages.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>The request was attempted after the channel was deleted.</li>
     * </ul>
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * @param  messageId
     *         The message id. For interactions this supports {@code ""@original""} to edit the source message of the interaction.
     * @param  attachments
     *         The new attachments of the message (Can be {@link FileUpload FileUploads} or {@link net.dv8tion.jda.api.utils.AttachmentUpdate AttachmentUpdates})
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link MessageEditAction} that can be used to further update the message
     *
     * @see    AttachedFile#fromAttachment(Message.Attachment)
     * @see    FileUpload#fromData(InputStream, String)
     */",net.dv8tion.jda.api.entities.channel.middleman
"public LegacyWebhookExecuteSpec setAvatarUrl(String avatarUrl) {
        this.avatarUrl = Possible.of(avatarUrl);
        return this;
    }","/**
     * Sets an avatar that overrides the default avatar of the {@link discord4j.core.object.entity.Webhook}.
     *
     * @param avatarUrl The url to the avatar.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public long getOldAllowRaw()
    {
        return oldAllow;
    }","/**
     * The old allowed permissions as a raw bitmask.
     *
     * @return The old allowed permissions
     */",net.dv8tion.jda.api.events.guild.override
"public static final Route GUILD_STICKER_MODIFY = Route.patch(""/guilds/{guild.id}/stickers/{sticker.id}"");","/**
     * Modify the given sticker. Requires the MANAGE_EMOJIS_AND_STICKERS permission. Returns the updated sticker object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/sticker#modify-guild-sticker"">
     * https://discord.com/developers/docs/resources/sticker#modify-guild-sticker</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction replyComponents(@Nonnull Collection<? extends LayoutComponent> components)
    {
        return deferReply().setComponents(components);
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     * </ul>
     *
     * @param  components
     *         The {@link LayoutComponent LayoutComponents} to send, such as {@link ActionRow}
     *
     * @throws IllegalArgumentException
     *         If null is provided or more than {@value Message#MAX_COMPONENT_COUNT} component layouts are provided
     *
     * @return {@link ReplyCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nonnull
    @CheckReturnValue
    WebhookMessageCreateAction<T> setEphemeral(boolean ephemeral);","/**
     * Set whether this message should be visible to other users.
     * <br>When a message is ephemeral, it will only be visible to the user that used the interaction.
     *
     * <p>Ephemeral messages have some limitations and will be removed once the user restarts their client.
     * <br>Limitations:
     * <ul>
     *     <li>Cannot be reacted to</li>
     *     <li>Cannot be retrieved</li>
     * </ul>
     *
     * <p>This only works on {@link InteractionHook InteractionHooks}!
     * For a {@link IReplyCallback#deferReply() deferred reply}, this is not supported. When a reply is deferred,
     * the very first message sent through the {@link InteractionHook}, inherits the ephemeral state of the initial reply.
     * To send an ephemeral deferred reply, you must use {@link IReplyCallback#deferReply(boolean) deferReply(true)} instead.
     *
     * @param  ephemeral
     *         True, if this message should be invisible for other users
     *
     * @throws IllegalStateException
     *         If this is not an interaction webhook
     *
     * @return The same message action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public int getMaxValues()
        {
            return maxValues;
        }","/**
         * The maximum amount of values a user can select at once.
         *
         * @return The max values
         */",net.dv8tion.jda.api.interactions.components.selections
"@Nonnull
    @CheckReturnValue
    ReplyCallbackAction setEphemeral(boolean ephemeral);","/**
     * Set whether this message should be visible to other users.
     * <br>When a message is ephemeral, it will only be visible to the user that used the interaction.
     *
     * <p>Ephemeral messages have some limitations and will be removed once the user restarts their client.
     * <br>Limitations:
     * <ul>
     *     <li>Cannot contain any files/attachments</li>
     *     <li>Cannot be reacted to</li>
     *     <li>Cannot be retrieved</li>
     * </ul>
     *
     * @param  ephemeral
     *         True, if this message should be invisible for other users
     *
     * @return The same reply action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.interactions
"@Override
    public void setDtwRadius(final double dtwRadius) {
        if (dtwRadius < 1 && dtwRadius >= 0) {
            this.dtwRadius = dtwRadius;
        } else {
            throw new IllegalStateException(""Radius must be between 0 and 1"");
        }
    }","/**
     * Set the {@link DynamicTimeWarping} radius.
     *
     * @param dtwRadius
     *            the window width of Sakoe-Chiba band in terms of percentage of sequence length.
     */",jestures.core.recognition.gesturedata
"public LegacyGuildEditSpec setDefaultMessageNotificationsLevel(Guild.NotificationLevel notificationsLevel) {
        requestBuilder.defaultMessageNotificationsOrNull(notificationsLevel.getValue());
        return this;
    }","/**
     * Sets the default message notification level for the modified {@link Guild}.
     *
     * @param notificationsLevel The default notification level for the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public LegacyGuildEditSpec setAfkTimeout(int afkTimeout) {
        requestBuilder.afkTimeout(afkTimeout);
        return this;
    }","/**
     * Sets the AFK timeout, in seconds, for this {@link Guild}.
     *
     * @param afkTimeout The AFK timeout, in seconds.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public boolean wasMfaEnabled()
    {
        return getOldValue();
    }","/**
     * Whether MFA was previously enabled or not
     *
     * @return True, if the account had MFA enabled prior to this event
     */",net.dv8tion.jda.api.events.self
"@Nonnull
        public ScheduledExecutorService getScheduler()
        {
            return scheduler;
        }","/**
         * The {@link ScheduledExecutorService} used to schedule rate-limit tasks.
         *
         * @return The {@link ScheduledExecutorService}
         */",net.dv8tion.jda.api.requests
Optional<E> getConnectionHandler();,"/**
     * Gets the {@link ConnectionHandler} of an active database-connection
     * @return {@link ConnectionHandler} of an active database-connection
     */",io.github.heliumdioxid.database.api
"public Publisher<?> onReady(ReadyEvent event) {
        return Mono.empty();
    }","/**
     * Invoked as Discord has established a fresh Gateway session. This event can be used to track the bot connection
     * details and contains the initial state required to operate with the real-time Gateway. See {@link ReadyEvent}
     * and Discord documentation for more details about this event.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public LegacyUserEditSpec setUsername(String username) {
        this.username = Possible.of(username);
        return this;
    }","/**
     * Sets the user's username. May cause the discriminator to be randomized.
     *
     * @param username The user's username.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Optional<Status> getStatus(Status.Platform platform) {
        switch (platform) {
            case DESKTOP: return data.clientStatus().desktop().toOptional().map(Status::of);
            case MOBILE: return data.clientStatus().mobile().toOptional().map(Status::of);
            case WEB: return data.clientStatus().web().toOptional().map(Status::of);
            // TODO: Remove in Java 12+. The switch is exhaustive assuming Platform is not compiled separately.
            default: throw new IllegalArgumentException(""Unhandled platform "" + platform);
        }
    }","/**
     * Get the user's status for the given platform, if present.
     *
     * @param platform the platform to obtain a user status
     * @return an {@link Optional} with the user's status for a given platform, or empty if not present.
     */",discord4j.core.object.presence
"public FollowedChannelData getData() {
        return data;
    }","/**
     * Gets the data of the channel that has been followed.
     *
     * @return The data of the channel that has been followed.
     */",discord4j.core.object
"public TemplateService getTemplateService() {
        return templateService;
    }","/**
     * Access a low-level representation of the API endpoints for the Template resource. It is recommended you use
     * methods like {@link #getTemplate(String)}, or {@link RestGuildTemplate#create(RestClient, String)}.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"public static IdentifyOptions create(ShardInfo shardInfo) {
        return builder(shardInfo).build();
    }","/**
     * Create a default {@link IdentifyOptions} using the given shard information.
     *
     * @param shardInfo the shard index and count to be used when authenticating
     * @return a default authentication policy
     */",discord4j.gateway
"@Nonnull
    @CheckReturnValue
    public RestAction<Void> declineSpeaker()
    {
        return getVoiceState().declineSpeaker();
    }","/**
     * Reject this members {@link GuildVoiceState#getRequestToSpeakTimestamp() request to speak}.
     * <p>This requires a non-null {@link #getNewTime()}.
     * The member will have to request to speak again.
     *
     * <p>This does nothing if the member is not connected to a {@link StageChannel}.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#VOICE_MUTE_OTHERS Permission.VOICE_MUTE_OTHERS}
     *         in the associated {@link StageChannel}
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.events.guild.voice
"public GlobalRateLimiter getGlobalRateLimiter() {
        return globalRateLimiter;
    }","/**
     * Returns the currently configured {@link GlobalRateLimiter}.
     *
     * @return the configured {@link GlobalRateLimiter}
     */",discord4j.rest.request
"@Nonnull
    default ImageProxy getImage()
    {
        return new ImageProxy(getImageUrl());
    }","/**
     * Returns an {@link ImageProxy} for this emoji's image.
     *
     * @return Never-null {@link ImageProxy} of this emoji's image
     *
     * @see    #getImageUrl()
     */",net.dv8tion.jda.api.entities.emoji
"static MemberRequestFilter withGuilds(Snowflake... guildIds) {
        return data -> Flux.fromArray(guildIds).hasElement(Snowflake.of(data.id()));
    }","/**
     * Request guild members for the given guild {@link Snowflake} IDs.
     *
     * @return a {@link MemberRequestFilter} requesting members from the given guilds
     */",discord4j.core.shard
"public LegacyWebhookEditWithTokenSpec setAvatar(@Nullable Image avatar) {
        this.avatar = avatar == null ? Possible.absent() : Possible.of(avatar.getDataUri());
        return this;
    }","/**
     * Sets the image of the modified {@link discord4j.core.object.entity.Webhook}.
     *
     * @param avatar The webhook image.
     * @return This spec.
     */",discord4j.core.spec.legacy
"static <U extends DataAccessor & GatewayDataUpdater> StoreLayout create(EnumSet<StoreFlag> enabledStoreFlags, U delegate) {
        return new SelectiveStoreLayout(enabledStoreFlags, delegate, delegate);
    }","/**
     * Create a new store layout that can partially enable entity stores depending on passed {@code enabledStoreFlags}.
     * Refer to {@link StoreFlag} values to understand each affected store operation.
     *
     * @param enabledStoreFlags a set of values indicating how to partially enable the delegate capabilities
     * @param delegate a delegate for store queries and updates
     */",discord4j.common.store.impl
"public Mono<Void> delete(@Nullable final String reason) {
        return restClient.getGuildService().deleteScheduledEvent(guildId, id, reason);
    }","/**
     * Requests to delete this event while optionally specifying the reason.
     *
     * @param reason The reason, if present.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the event was deleted.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"public long getNewPing()
    {
        return next;
    }","/**
     * The new ping for the current JDA session
     *
     * @return The new ping in milliseconds
     */",net.dv8tion.jda.api.events
"public Optional<Instant> getPremiumTime() {
        return Possible.flatOpt(data.premiumSince())
                .map(timestamp -> DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(timestamp, Instant::from));
    }","/**
     * Gets when the user started boosting the server, if present.
     *
     * @return When the user started boosting the server, if present.
     */",discord4j.core.object.command
"public static final Route GUILD_MEMBER_ADD = Route.put(""/guilds/{guild.id}/members/{user.id}"");","/**
     * Adds a user to the guild, provided you have a valid oauth2 access token for the user with the guilds.join scope.
     * Returns a 201 Created with the guild member as the body. Fires a Guild Member Add Gateway event. Requires the
     * bot to have the CREATE_INSTANT_INVITE permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#add-guild-member"">
     * https://discord.com/developers/docs/resources/guild#add-guild-member</a>
     */",discord4j.rest.route
"public Snowflake getGuildId() {
        return current.getGuildId();
    }","/**
     * Gets the {@link Snowflake} ID of the {@link Guild} involved in the event.
     *
     * @return the ID of the {@link Guild}.
     */",discord4j.core.event.domain.guild
"@Nonnull
        public B setPlaceholder(@Nullable String placeholder)
        {
            if (placeholder != null)
            {
                Checks.notEmpty(placeholder, ""Placeholder"");
                Checks.notLonger(placeholder, PLACEHOLDER_MAX_LENGTH, ""Placeholder"");
            }
            this.placeholder = placeholder;
            return (B) this;
        }","/**
         * Configure the placeholder which is displayed when no selections have been made yet.
         *
         * @param  placeholder
         *         The placeholder or null
         *
         * @throws IllegalArgumentException
         *         If the provided placeholder is empty or longer than {@value #PLACEHOLDER_MAX_LENGTH} characters
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.components.selections
"public Builder setFirstBackoff(Duration firstBackoff) {
            if (firstBackoff.minus(Duration.ofSeconds(2)).isNegative()) {
                throw new IllegalArgumentException(""firstBackoff duration must be at least 2 seconds"");
            }
            this.firstBackoff = firstBackoff;
            return this;
        }","/**
         * Set the first {@link Duration} to be applied when computing a backoff. Defaults to 2 seconds.
         *
         * @param firstBackoff the minimum duration to be applied as backoff
         * @return this builder
         */",discord4j.common.retry
"@Nonnull
    @CheckReturnValue
    ModalCallbackAction replyModal(@Nonnull Modal modal);","/**
     * Acknowledgement of this interaction with a {@link Modal Modal}.
     *
     * <p>This will open a popup on the target user's Discord client.
     *
     * <p>Interactions can only be acknowledged once.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     *
     * @param  modal 
     *         The Modal to send
     *
     * @throws IllegalArgumentException
     *         If the provided modal is null
     *        
     * @return ModalCallbackAction
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nonnull
    public Guild.NotificationLevel getNewNotificationLevel()
    {
        return getNewValue();
    }","/**
     * The new {@link net.dv8tion.jda.api.entities.Guild.NotificationLevel NotificationLevel}
     *
     * @return The new NotificationLevel
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    @Blocking
    T get();","/**
     * Blocks the current thread until the result is ready.
     * <br>This will not work on the default JDA event thread because it might depend on other events to be processed,
     * which could lead to a deadlock.
     *
     * @throws UnsupportedOperationException
     *         If this is called on the default JDA event thread
     * @throws java.util.concurrent.CompletionException
     *         If some exception occurred (such as {@link java.util.concurrent.TimeoutException}).
     * @throws java.util.concurrent.CancellationException
     *         If the request was cancelled
     *
     * @return The result value
     */",net.dv8tion.jda.api.utils.concurrent
"@Nonnull
    Set<String> getMentionedRoles();","/**
     * The IDs for roles which are allowed to be mentioned, or an empty list.
     *
     * @return The role IDs which are mention whitelisted
     */",net.dv8tion.jda.api.utils.messages
"Mono<List<ThreadMemberData>> onThreadMembersUpdate(int shardIndex, ThreadMembersUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link ThreadMembersUpdate} gateway dispatch. This
     * will typically perform a delete operation on a related {@link ThreadMemberData} that is already present in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * list of {@link ThreadMemberData} before the deletion
     */",discord4j.common.store.api.layout
Mono<Integer> getShardCount(RestClient restClient);,"/**
     * Return the shard count used to create a group of sharded clients.
     *
     * @param restClient a handle to consume REST API resources, typically to retrieve the number of recommended shards
     * @return a shard count as a {@link Mono} to obtain this number asynchronously.
     */",discord4j.core.shard
Permissable perm = player.getFaction() == this ? player.getRole() : player.getFaction().getRelationTo(this);,"/**
     * Get the Access of a player. Will use player's Role if they are a faction member. Otherwise, uses their Relation.
     *
     * @param player
     * @param permissableAction
     * @return
     */",com.massivecraft.factions.zcore.persist
"default boolean canReceiveCombined()
    {
        return false;
    }","/**
     * If this method returns true, then JDA will generate combined audio data and provide it to the handler.
     * <br><b>Only enable if you specifically want combined audio because combining audio is costly if unused.</b>
     *
     * @return If true, JDA enables subsystems to combine all user audio into a single provided data packet.
     */",net.dv8tion.jda.api.audio
"private Mono<Void> onComplete() {
        return Mono.defer(this::notifier);
    }","/**
     * Returns a {@link Mono} indicating that the rate limit has ended.
     *
     * @return a {@link Mono} that completes when the currently set limit has completed
     */",discord4j.rest.request
"public int getOldMaxMembers()
    {
        return getOldValue();
    }","/**
     * The old max members for this guild
     *
     * @return The old max members for this guild
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    M selectPosition(@Nonnull T selectedEntity);","/**
     * Selects a new current entity based on the index of
     * the specified entity in the {@link #getCurrentOrder() current order}
     * <br>This is a convenience function that uses {@link #selectPosition(int)} internally
     *
     * @param  selectedEntity
     *         The entity for the new position that will be in focus for all modification
     *         operations
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    #selectPosition(int)
     * @see    #getSelectedPosition()
     * @see    #getSelectedEntity()
     */",net.dv8tion.jda.api.requests.restaction.order
"public static final Route GUILD_STICKER_DELETE = Route.delete(""/guilds/{guild.id}/stickers/{sticker.id}"");","/**
     * Delete the given sticker. Requires the MANAGE_EMOJIS_AND_STICKERS permission. Returns 204 No Content on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/sticker#delete-guild-sticker"">
     * https://discord.com/developers/docs/resources/sticker#delete-guild-sticker</a>
     */",discord4j.rest.route
"public Publisher<?> onButtonInteraction(ButtonInteractionEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user interacts with a button component.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    AuditableRestAction<Void> deleteWebhookById(@Nonnull String id);","/**
     * Deletes a {@link net.dv8tion.jda.api.entities.Webhook Webhook} attached to this channel
     * by the {@code id} specified.
     *
     * <p>Possible ErrorResponses include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_WEBHOOK}
     *     <br>The provided id does not refer to a WebHook present in this channel, either due
     *         to it not existing or having already been deleted.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>if this channel was deleted</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>if we were removed from the guild</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The send request was attempted after the account lost
     *         {@link net.dv8tion.jda.api.Permission#MANAGE_WEBHOOKS Permission.MANAGE_WEBHOOKS} in the channel.</li>
     * </ul>
     *
     * @param  id
     *         The not-null id for the target Webhook.
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided {@code id} is {@code null} or empty.
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have
     *         {@link net.dv8tion.jda.api.Permission#MANAGE_WEBHOOKS Permission.MANAGE_WEBHOOKS} in this channel.
     *
     * @return {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction}
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nullable
    OffsetDateTime getRequestToSpeakTimestamp();","/**
     * The time at which the user requested to speak.
     * <br>This is used for {@link StageChannel StageChannels} and can only be approved by members with {@link net.dv8tion.jda.api.Permission#VOICE_MUTE_OTHERS Permission.VOICE_MUTE_OTHERS} on the channel.
     *
     * @return The request to speak timestamp, or null if this user didn't request to speak
     */",net.dv8tion.jda.api.entities
"public GatewayReactorResources getGatewayReactorResources() {
        return gatewayReactorResources;
    }","/**
     * Return the {@link GatewayReactorResources} used to perform Gateway-related operations.
     *
     * @return the Gateway Reactor resources
     */",discord4j.core
Flux<PresenceData> getPresences();,"/**
     * Retrieves data for all presences present in the store.
     *
     * @return A {@link Flux} emitting the presences, or empty if none is present
     */",discord4j.common.store.api.layout
"public static StoreLayout create(EnumSet<StoreFlag> enabledFlags,
                                     DataAccessor dataAccessor,
                                     GatewayDataUpdater gatewayDataUpdater) {
        return new SelectiveStoreLayout(enabledFlags, dataAccessor, gatewayDataUpdater);
    }","/**
     * Create a new store layout that can partially enable entity stores depending on passed {@code enabledStoreFlags}.
     * Refer to {@link StoreFlag} values to understand affected store operations.
     *
     * @param enabledFlags a set of values indicating how to partially enable the delegate capabilities
     * @param dataAccessor a delegate for store queries
     * @param gatewayDataUpdater a delegate for store updates
     */",discord4j.common.store.impl
"public Snowflake getGuildId() {
        return permissions.getGuildId();
    }","/**
     * Gets the {@link Snowflake} ID of the {@link Guild} involved in the event.
     *
     * @return The ID of the guild involved.
     */",discord4j.core.event.domain.command
void onDistanceFromStartingJoint(Vector2D distance);,"/**
     * Distance between starting joint position and actual joint position. Starting position depends on
     * {@link GestureLength}
     * <p>
     * Vector values [-1000, 1000]
     *
     * @param distance
     *            the {@link Vector2D} distance
     */",jestures.core.tracking
"public Optional<String> getReason() {
        return closeStatus.getReason();
    }","/**
     * Return a websocket close reason, if present.
     *
     * @return an {@link Optional} containing a close reason if present, or empty otherwise
     */",discord4j.common.close
"@Nullable
    default GuildChannel getGuildChannelById(long id)
    {
        C channel = getChannelCache().getElementById(id);
        return channel instanceof GuildChannel ? (GuildChannel) channel : null;
    }","/**
     * Get {@link GuildChannel GuildChannel} for the provided ID.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * <p>To get more specific channel types you can use one of the following:
     * <ul>
     *     <li>{@link #getChannelById(Class, long)}</li>
     *     <li>{@link #getTextChannelById(long)}</li>
     *     <li>{@link #getNewsChannelById(long)}</li>
     *     <li>{@link #getStageChannelById(long)}</li>
     *     <li>{@link #getVoiceChannelById(long)}</li>
     *     <li>{@link #getCategoryById(long)}</li>
     *     <li>{@link #getForumChannelById(long)}</li>
     * </ul>
     *
     * @param  id
     *         The ID of the channel
     *
     * @return The GuildChannel or null
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Deprecated
    public String getNicknameMention() {
        return ""<@!"" + getId().asString() + "">"";
    }","/**
     * Gets the <i>raw</i> nickname mention. This is the format utilized to directly mention another user (assuming the
     * user exists in context of the mention).
     *
     * @return The <i>raw</i> nickname mention.
     * @deprecated This type of ping has been deprecated in the Discord API.
     */",discord4j.core.object.command
"@Nonnull
    @CheckReturnValue
    public RestAction<Member> retrieveMember()
    {
        if (!getChannel().getType().isGuild())
            throw new IllegalStateException(""Cannot retrieve member for a vote that happened outside of a guild"");
        return getGuild().retrieveMemberById(getUserIdLong());
    }","/**
     * Retrieves the voting {@link Member}.
     *
     * <p>Note that banning a member will also fire {@link MessagePollVoteRemoveEvent} and no member will be available
     * in those cases. An {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MEMBER UNKNOWN_MEMBER} error response
     * should be the failure result.
     *
     * @throws IllegalStateException
     *         If this event is not from a guild
     *
     * @return {@link RestAction} - Type: {@link Member}
     */",net.dv8tion.jda.api.events.message.poll
"@Nonnull
    List<Member> getElementsById(long id);","/**
     * Retrieves all member represented by the provided ID.
     *
     * @param  id
     *         The ID of the members
     *
     * @return Possibly-empty unmodifiable list of member for the specified ID
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    @CheckReturnValue
    ThreadChannelPaginationAction retrieveArchivedPrivateJoinedThreadChannels();","/**
     * Retrieves the archived private {@link ThreadChannel ThreadChannels} for this channel, that the bot has previously joined or been added to.
     * <br>Unlike {@link #retrieveArchivedPrivateThreadChannels()}, this only checks for threads which the bot has joined, and thus does not require permissions to manage threads.
     *
     * <p>You can use {@link #retrieveArchivedPrivateThreadChannels()}, to get all <em>private</em> archived threads.
     *
     * <p>Note that {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels} cannot have private threads.
     *
     * @throws InsufficientPermissionException
     *         If the bot does not have {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY Permission.MESSAGE_HISTORY} in this channel
     *
     * @return {@link ThreadChannelPaginationAction} to iterate over all joined private archived ThreadChannels
     */",net.dv8tion.jda.api.entities.channel.attribute
"public boolean isStream()
    {
        return stream;
    }","/**
     * True if this user started streaming. False if the user stopped streaming.
     *
     * @return True, if the stream started
     */",net.dv8tion.jda.api.events.guild.voice
void setGestureLengthLabel(GestureLength length);,"/**
     * Set the frame Length.
     *
     * @param length
     *            the {@link GestureLength}
     */",jestures.core.view
"public Mono<ClientResponse> mono() {
        return responseMono;
    }","/**
     * Return the underlying {@link Mono} of {@link ClientResponse}.
     *
     * @return the original {@link Mono} this response wrapper accesses
     */",discord4j.rest.request
boolean isVerified();,"/**
     * The status of this account's verification.
     * (Have you accepted the verification email)
     *
     * @return True, if this account is verified.
     */",net.dv8tion.jda.api.entities
"public static final Route OTHERS_VOICE_STATE_MODIFY = Route.patch(""/guilds/{guild.id}/voice-states/{user.id}"");","/**
     * Updates another user's voice state.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#update-others-voice-state"">
     * https://discord.com/developers/docs/resources/guild#update-others-voice-state</a>
     */",discord4j.rest.route
"public InteractionFollowupCreateMono createFollowup(String content) {
        return createFollowup().withContent(content);
    }","/**
     * Creates a follow-up message to this interaction with the given message content.
     *
     * @param content a string to populate the followup message with
     * @return a {@link InteractionFollowupCreateMono} where, upon successful completion, emits the resulting follow-up
     * message. If an error is received, it is emitted through the {@code InteractionApplicationCommandCallbackMono}.
     */",discord4j.core.event.domain.interaction
"@Nonnull
    Button getButton();","/**
     * The {@link Button} this interaction belongs to.
     *
     * @return The {@link Button}
     *
     * @see    #getComponentId()
     */",net.dv8tion.jda.api.interactions.components.buttons
"public static void showNotificationPopup(final String title, final String message,
            final NotificationType.Duration secondsDuration, final NotificationType notiType,
            final EventHandler<NotificationEvent> ev) { // _____________________________PATTERN STRATEGY

        final Notification.Notifier no = Notification.Notifier.INSTANCE;
        final Notification notification = new Notification(title, message);

        no.setPopupLifetime(Duration.seconds(secondsDuration.getValue()));
        switch (notiType) {
        case ERROR:
            no.notifyError(title, message);
            break;
        case WARNING:
            no.notifyWarning(title, message);
            break;
        case SUCCESS:
            no.notifySuccess(title, message);
            break;
        case INFO:
            no.notifyInfo(title, message);
            break;
        default:
            no.notify(notification);
            break;
        }
        no.setOnNotificationPressed(ev);
    }","/**
     * Show a {@link Notification} popup into the main windows of the operating system.
     *
     * @param title
     *            the String title of the {@link Notification}
     * @param message
     *            the String text of the {@link Notification}
     * @param secondsDuration
     *            the number of {@link Duration} of the {@link Notification}
     * @param notiType
     *            the {@link NotificationType} of the {@link Notification}
     * @param ev
     *            the {@link EventHandler} ev, lalmba
     */",jestures.core.view.utils
"public static GlobalCommandRegistrar create(RestClient restClient,
                                                List<ApplicationCommandRequest> commandRequests) {
        return new GlobalCommandRegistrar(restClient, commandRequests);
    }","/**
     * Create a registrar using a list of {@link ApplicationCommandRequest} entries. Run the command registration
     * process by subscribing to {@link #registerCommands()}.
     *
     * @param restClient a Discord web client to perform API requests
     * @param commandRequests a list of command definitions
     * @return a registrar that can register application commands by subscribing to {@link #registerCommands()}
     */",discord4j.rest.interaction
"@Nullable
    public String getOldSplashId()
    {
        return getOldValue();
    }","/**
     * The old splash id
     *
     * @return The old splash id, or null
     */",net.dv8tion.jda.api.events.guild.update
"private void initProxy(ScheduledFuture<?> future)
    {
        if (this.future == null)
            this.future = future;
        else
            throw new IllegalStateException(""Cannot initialize twice"");
    }","/**
     * Initializes the backing scheduled task for this promise.
     *
     * <p>The provided future will be cancelled when {@link #cancel(boolean)} is invoked
     * and is used as provider for {@link #getDelay(TimeUnit)}.
     *
     * @param  future
     *         The future that should be cancelled when this task is cancelled
     *
     * @throws IllegalStateException
     *         If this was already initialized
     */",net.dv8tion.jda.api.utils.concurrent
"InteractionApplicationCommandCallbackData data = InteractionApplicationCommandCallbackData.builder()
                .choices(choices)
                .build();","/**
     * Requests to respond to the interaction with a list of suggested choices.
     *
     * @param choices The list of suggested choices.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the interaction response has
     * been sent. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.interaction
"public FLocation getLocation() {
        return this.location;
    }","/**
     * Get the FLocation involved in this event.
     *
     * @return the FLocation (also a chunk) involved in this event.
     */",com.massivecraft.factions.event
"@Nonnull
    public OnlineStatus getNewOnlineStatus()
    {
        return getNewValue();
    }","/**
     * The new status
     *
     * @return The new status
     */",net.dv8tion.jda.api.events.user.update
"@Nonnull
    @CheckReturnValue
    M setUserLimit(int userLimit);","/**
     * Sets the <b><u>user-limit</u></b> of the selected {@link AudioChannel}.
     * <br>Provide {@code 0} to reset the user-limit of the {@link AudioChannel}
     *
     * <p>A channel user-limit <b>must not</b> be negative nor greater than {@value VoiceChannel#MAX_USERLIMIT} for {@link VoiceChannel}
     * and not greater than {@value StageChannel#MAX_USERLIMIT} for {@link StageChannel}!
     * <br><b>This is only available to {@link AudioChannel AudioChannels}</b>
     *
     * @param  userLimit
     *         The new user-limit for the selected {@link AudioChannel}
     *
     * @throws IllegalStateException
     *         If the selected channel is not an {@link AudioChannel}
     * @throws IllegalArgumentException
     *         If the provided user-limit is negative or greater than the permitted maximum
     *
     * @return ChannelManager for chaining convenience
     */",net.dv8tion.jda.api.managers.channel.middleman
"@Nonnull
    @CheckReturnValue
    default MessageEditCallbackAction editMessageEmbeds(@Nonnull MessageEmbed... embeds)
    {
        Checks.noneNull(embeds, ""MessageEmbed"");
        return deferEdit().setEmbeds(embeds);
    }","/**
     * Acknowledgement of this interaction with a message update.
     * <br>You can use {@link #getHook()} to edit the message further.
     *
     * <p><b>You can only use deferEdit() or editMessage() once per interaction!</b> Use {@link #getHook()} for any additional updates.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     *
     * @param  embeds
     *         The new message embeds to include in the message
     *
     * @throws IllegalArgumentException
     *         If null or more than {@value Message#MAX_EMBED_COUNT} embeds are provided
     *
     * @return {@link MessageEditCallbackAction} that can be used to further update the message
     */",net.dv8tion.jda.api.interactions.callbacks
"public int getSuper() {
        return this.data.burst();
    }","/**
     * Count of super reactions
     *
     * @return Count of super reactions
     */",discord4j.core.object.reaction
"public static RouteMatcher route(Route route, Predicate<Map<String, String>> requestVariableMatcher) {
        return new RouteMatcher(route.newRequest(), requestVariableMatcher);
    }","/**
     * Create a new {@link RouteMatcher} that matches every request made for the given {@link Route} that also match
     * a given {@link Predicate} of URI variables.
     * <p>
     * The given predicate will receive a {@link Map} of {@code String} URI template parameters as keys and {@code
     * String} values used to compile the URI for a {@link DiscordWebRequest}. This means you would expect keys as
     * {@code guild.id}, {@code channel.id}, {@code message.id}, {@code user.id}, among others. Refer to the actual
     * {@link Route} instances declared in the {@link Routes} class for the exact template keys used in the requests
     * you want to match.
     *
     * @param route the {@link Route} to be matched by this instance
     * @param requestVariableMatcher a {@link Map} of {@code String} keys and values representing the URI template and
     * the completed value for a given {@link DiscordWebRequest}, respectively
     * @return a new {@link RouteMatcher}
     */",discord4j.rest.request
"@Nonnull
    @CheckReturnValue
    ChannelAction<T> setRegion(@Nullable Region region);","/**
     * Sets the voice region for the new AudioChannel
     *
     * @param  region
     *         The region for the new AudioChannel, or {@code null} to set to {@link Region#AUTOMATIC}
     *
     * @throws UnsupportedOperationException
     *         If this ChannelAction is not for an AudioChannel
     *
     * @return The current ChannelAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public static final Route TEMPLATE_GUILD_CREATE = Route.post(""/guilds/templates/{template.code}"");","/**
     * Create a new guild from template. Returns a guild object on success. Fires a Guild Create Gateway event.
     *
     * By default this endpoint can be used only by bots in less than 10 guilds.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/template#create-guild-from-template"">
     *         https://discord.com/developers/docs/resources/template#create-guild-from-template</a>
     */",discord4j.rest.route
"@Nonnull
    public static SubcommandGroupData fromGroup(@Nonnull Command.SubcommandGroup group)
    {
        Checks.notNull(group, ""Subcommand Group"");
        SubcommandGroupData data = new SubcommandGroupData(group.getName(), group.getDescription());
        data.setNameLocalizations(group.getNameLocalizations().toMap());
        data.setDescriptionLocalizations(group.getDescriptionLocalizations().toMap());
        group.getSubcommands()
                .stream()
                .map(SubcommandData::fromSubcommand)
                .forEach(data::addSubcommands);
        return data;
    }","/**
     * Converts the provided {@link Command.SubcommandGroup} into a SubcommandGroupData instance.
     *
     * @param  group
     *         The subcommand group to convert
     *
     * @throws IllegalArgumentException
     *         If null is provided or the subcommand group has illegal configuration
     *
     * @return An instance of SubcommandGroupData
     */",net.dv8tion.jda.api.interactions.commands.build
"Epoch time (seconds since 00:00:00 UTC on January 1, 1970) at which the rate limit resets */
    String RESET_HEADER = ""X-RateLimit-Reset"";
    /** The number of requests that can be made */
    String LIMIT_HEADER = ""X-RateLimit-Limit"";
    /** The number of remaining requests that can be made */
    String REMAINING_HEADER = ""X-RateLimit-Remaining"";
    /** Returned only on HTTP 429 responses if the rate limit encountered is the global rate limit (not per-route) */
    String GLOBAL_HEADER = ""X-RateLimit-Global"";
    /** A unique string denoting the rate limit being encountered (non-inclusive of top-level resources in the path) */
    String HASH_HEADER = ""X-RateLimit-Bucket"";
    /** The number of seconds to wait before submitting another request */
    String RETRY_AFTER_HEADER = ""Retry-After"";
    /** Returned only on HTTP 429 responses. Value can be user (per bot or user limit), global (per bot or user global limit), or shared (per resource limit) */
    String SCOPE_HEADER = ""X-RateLimit-Scope"";

    /**
     * Enqueue a new request.
     *
     * <p>Use {@link Work#getRoute()}",/** Total time (in seconds) of when the current rate limit bucket will reset. Can have decimals to match previous millisecond ratelimit precision */,net.dv8tion.jda.api.requests
"Mono<ChannelData> onThreadUpdate(int shardIndex, ThreadUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link ThreadUpdate} gateway dispatch. This
     * will typically perform an update operation on a related {@link ChannelData} that is already present in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link ChannelData} before the update
     */",discord4j.common.store.api.layout
"Disposable create(Scheduler scheduler, Consumer<Boolean> speakingSender, Consumer<ByteBuf> voiceSender,
                      AudioProvider provider, PacketTransformer transformer);","/**
     * Create a task that is capable of handling outbound audio packets.
     *
     * @param scheduler a dedicated {@link Scheduler} that can be used to run the task
     * @param speakingSender a sink capable to signaling speaking status to Discord
     * @param voiceSender a sink capable of sending outbound audio to Discord
     * @param provider a strategy to produce audio packets that can be encoded
     * @param transformer a strategy to encode a packet into a raw buffer
     * @return a task that can process audio and send it
     */",discord4j.voice
final EntityBuilder builder = api.getEntityBuilder();,"/**
     * Creates a new PaginationAction instance
     *
     * @param reaction
     *        The target {@link net.dv8tion.jda.api.entities.MessageReaction MessageReaction}
     */",net.dv8tion.jda.internal.requests.restaction.pagination
"@Nonnull
    public Guild.Timeout getOldAfkTimeout()
    {
        return getOldValue();
    }","/**
     * The old {@link net.dv8tion.jda.api.entities.Guild.Timeout AFK-Timeout}
     *
     * @return The old AFK-Timeout
     */",net.dv8tion.jda.api.events.guild.update
"default Flux<ThreadMemberData> getMembersInThread(long threadId) {
        return Flux.empty();
    }","/**
     * Retrieves data for all thread members present in the store for the given thread ID.
     *
     * @param threadId the thread ID
     * @return A {@link Flux} emitting the thread members, or empty if none is present
     * @since 3.3.0
     */",discord4j.common.store.api.layout
Flux<StickerData> getStickers();,"/**
     * Retrieves data for all stickers present in the store.
     *
     * @return A {@link Flux} emitting the stickers, or empty if none is present
     * @since 3.2.3
     */",discord4j.common.store.api.layout
"@Nonnull
    @CheckReturnValue
    RoleAction setHoisted(@Nullable Boolean hoisted);","/**
     * Sets whether or not the new role should be hoisted
     *
     * @param  hoisted
     *         Whether the new role should be hoisted (grouped). Default is {@code false}
     *
     * @return The current RoleAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public int getUserLimit()
    {
        return this.userLimit;
    }","/**
     * The maximum amount of {@link net.dv8tion.jda.api.entities.Member Members} that can be in this
     * voice channel at once.
     *
     * <br>0 - No limit
     *
     * @return The maximum amount of members allowed in this channel at once.
     */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    public List<String> getMessageIds()
    {
        return messageIds;
    }","/**
     * List of messages that have been deleted.
     *
     * @return The list of message ids
     */",net.dv8tion.jda.api.events.message
"public Mono<GuildSticker> edit(GuildStickerEditSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(
                () -> gateway.getRestClient().getStickerService()
                    .modifyGuildSticker(getGuildId().asLong(), getId().asLong(), spec.asRequest(),
                        spec.reason()))
            .map(data -> new GuildSticker(gateway, data, getGuildId().asLong()));
    }","/**
     * Requests to edit this guild sticker.
     *
     * @param spec an immutable object that specifies how to edit this sticker
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link GuildSticker}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"default Mono<Integer> getPosition() {
        return getGuild()
                .flatMapMany(Guild::getChannels)
                .transform(OrderUtil::orderGuildChannels)
                .collectList()
                .map(channels -> channels.indexOf(this));
    }","/**
     * Requests to retrieve the position of the channel relative to other channels in the guild.
     * <p>
     * This is determined by the index of this channel in the {@link OrderUtil#orderGuildChannels(Flux) sorted} list of channels of the guild.
     * <p>
     * Warning: Because this method must sort the guild channels, it is inefficient to make repeated invocations for the
     * same set of channels (meaning that channels haven't been added or removed). For example, instead of writing:
     * <pre>
     * {@code
     * guild.getChannels()
     *   .flatMap(c -> c.getPosition().map(pos -> c.getName() + "" : "" + pos))
     * }
     * </pre>
     * It would be much more efficient to write:
     * <pre>
     * {@code
     * guild.getChannels()
     *   .transform(OrderUtil::orderGuildChannels)
     *   .index((pos, c) -> c.getName() + "" : "" + pos)
     * }
     * </pre>
     *
     * @return A {@link Mono} where, upon successful completion, emits the position of the channel. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    default ChannelType getChannelType()
    {
        Channel channel = getChannel();
        return channel != null ? channel.getType() : ChannelType.UNKNOWN;
    }","/**
     * The {@link ChannelType} for the channel this interaction came from.
     * <br>If {@link #getChannel()} is null, this returns {@link ChannelType#UNKNOWN}.
     *
     * @return The {@link ChannelType}
     */",net.dv8tion.jda.api.interactions
"public Optional<String> getReason() {
        return data.reason();
    }","/**
     * Gets the reason for the ban.
     *
     * @return The reason for the ban.
     */",discord4j.core.object
Mono<Long> countUsers();,"/**
     * Counts the number of users present in the store.
     *
     * @return A {@link Mono} emitting the user count
     */",discord4j.common.store.api.layout
"@Nullable
    String getReason();","/**
     * Returns the current audit log reason set on the spec.
     *
     * @return The current audit log reason.
     */",discord4j.core.spec.legacy
"public Publisher<?> onReconnectFail(ReconnectFailEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a resumption or reconnection attempt has failed but can be retried.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    default MessageEditAction editMessageAttachmentsById(long messageId, @Nonnull Collection<? extends AttachedFile> attachments)
    {
        return editMessageAttachmentsById(Long.toUnsignedString(messageId), attachments);
    }","/**
     * Attempts to edit a message by its id in this MessageChannel.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#REQUEST_ENTITY_TOO_LARGE REQUEST_ENTITY_TOO_LARGE}
     *     <br>If any of the provided files is bigger than {@link Guild#getMaxFileSize()}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_AUTHOR_EDIT INVALID_AUTHOR_EDIT}
     *     <br>Attempted to edit a message that was not sent by the currently logged in account.
     *         Discord does not allow editing of other users' Messages!</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The request was attempted after the account lost access to the {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed, or after {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}
     *         was revoked in the {@link GuildMessageChannel}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
     *         the message it referred to has already been deleted. This might also be triggered for ephemeral messages.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>The request was attempted after the channel was deleted.</li>
     * </ul>
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * @param  messageId
     *         The message id. For interactions this supports {@code ""@original""} to edit the source message of the interaction.
     * @param  attachments
     *         The new attachments of the message (Can be {@link FileUpload FileUploads} or {@link net.dv8tion.jda.api.utils.AttachmentUpdate AttachmentUpdates})
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link MessageEditAction} that can be used to further update the message
     *
     * @see    AttachedFile#fromAttachment(Message.Attachment)
     * @see    FileUpload#fromData(InputStream, String)
     */",net.dv8tion.jda.api.entities.channel.middleman
"public void setTranslations(@Nonnull Map<DiscordLocale, String> map)
    {
        Checks.notNull(map, ""Map"");

        map.forEach((discordLocale, localizedString) ->
        {
            checkConsumer.accept(localizedString);
            putTranslation(discordLocale, localizedString);
        });
    }","/**
     * Adds all the translations from the supplied map into this LocalizationMap.
     *
     * @param  map
     *         The map containing the localized strings
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If the map is null</li>
     *             <li>If the map contains an {@link DiscordLocale#UNKNOWN} key</li>
     *             <li>If the map contains a localized string which does not pass the corresponding attribute check</li>
     *         </ul>
     */",net.dv8tion.jda.api.interactions.commands.localization
"public long getOldPermissionsRaw()
    {
        return oldPermissionsRaw;
    }","/**
     * The old permissions
     *
     * @return The old permissions
     */",net.dv8tion.jda.api.events.role.update
"@Nonnull
    M selectPosition(int selectedPosition);","/**
     * Selects a new current entity at the specified index
     * <br>This index is in correlation to the {@link #getCurrentOrder() current order}
     *
     * @param  selectedPosition
     *         The index for the new position that will be in focus for all modification
     *         operations
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided position is out-of-bounds
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    #getSelectedPosition()
     * @see    #getSelectedEntity()
     */",net.dv8tion.jda.api.requests.restaction.order
"public CloseException(CloseStatus closeStatus, ContextView context) {
        this(closeStatus, context, null);
    }","/**
     * Create a {@link CloseException} with the given status and Reactor context.
     *
     * @param closeStatus the {@link CloseStatus} representing this exception
     * @param context a {@link ContextView} instance representing metadata related to this exception
     */",discord4j.common.close
Sinks.Empty<Void> cancelSink = Sinks.empty();,"/**
     * Create a Discord API bucket-aware {@link Router} configured with the given options.
     *
     * @param routerOptions the options that configure this {@link Router}
     */",discord4j.rest.request
"public Optional<String> getNewGlobalName() {
        return Possible.flatOpt(user.globalName());
    }","/**
     * Gets the {@link User}'s new global name, if present. This may not exist if the {@code user}'s global
     * name has not been changed.
     *
     * @return The {@link User}'s new global name, if present.
     */",discord4j.core.event.domain
"public String asString() {
        return String.valueOf(data.value());
    }","/**
     * Gets the value of this choice as a string.
     *
     * @return The value of this choice as a string.
     */",discord4j.core.object.command
"@Nonnull
    public IPostContainer getChannel()
    {
        return channel;
    }","/**
     * The {@link IPostContainer} which has been updated.
     *
     * @return The {@link IPostContainer}
     */",net.dv8tion.jda.api.events.channel.forum
"public Mono<Void> acceptRequest() {
        return getMember().flatMap(PartialMember::inviteToStageSpeakers);
    }","/**
     * Requests to invite the {@code member} who made the initial request to join stage speakers.
     *
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the member
     *         has been invited to the speakers. If an error is received, it is emitted through the
     *         {@code Mono}.
     */",discord4j.core.event.domain
"@Nonnull
    @CheckReturnValue
    M clearOverridesAdded();","/**
     * Clears the overrides added via {@link #putPermissionOverride(IPermissionHolder, Collection, Collection)}.
     *
     * @return ChannelManager for chaining convenience
     */",net.dv8tion.jda.api.managers.channel.attribute
private Duration firstBackoff = Duration.ofSeconds(2);,"/**
     * Create a default {@link ReconnectOptions}.
     *
     * @return a new reconnect options configured with all defaults
     */",discord4j.common.retry
"@Nonnull
    @Unmodifiable
    List<ModalMapping> getValues();","/**
     * Returns a List of {@link net.dv8tion.jda.api.interactions.modals.ModalMapping ModalMappings} representing the values input by the user for each field when the modal was submitted.
     *
     * @return Immutable List of {@link net.dv8tion.jda.api.interactions.modals.ModalMapping ModalMappings}
     *
     * @see    #getValue(String)
     */",net.dv8tion.jda.api.interactions.modals
"@Nonnull
    public String getJumpUrl()
    {
        return Helpers.format(Message.JUMP_URL, isFromGuild() ? getGuild().getId() : ""@me"", getChannel().getId(), getMessageId());
    }","/**
     * Returns the jump-to URL for the received message.
     * <br>Clicking this URL in the Discord client will cause the client to jump to the specified message.
     *
     * @return A String representing the jump-to URL for the message
     */",net.dv8tion.jda.api.events.message
"public LegacyGuildCreateSpec setSystemChannelId(@Nullable Snowflake id) {
        builder.systemChannelId(id == null ? Possible.absent() : Possible.of(Id.of(id.asLong())));
        return this;
    }","/**
     * Sets the id of the channel where guild notices such as welcome messages and boost events are posted for the
     * created {@link Guild}.
     *
     * @param id The id of the channel where guild notices such as welcome messages and boost events are posted.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static final Route USER_APPLICATIONS_ROLE_CONNECTION_GET = Route.get(""/users/@me/applications/{application.id}/role-connection"");","/**
     * Returns the application role connection for the user. Requires an OAuth2 access token with role_connections.write scope for the application specified in the path.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/user#get-current-user-application-role-connection"">
     * https://discord.com/developers/docs/resources/user#get-current-user-application-role-connection</a>
     */",discord4j.rest.route
"public Optional<ApplicationCommandInteractionOption> getOption(final String name) {
        return data.options().toOptional().orElse(Collections.emptyList()).stream()
                .filter(option -> option.name().equals(name))
                .findFirst()
                .map(data -> new ApplicationCommandInteractionOption(gateway, data, guildId,
                        this.data.resolved().toOptional().orElse(null)));
    }","/**
     * Gets the option corresponding to the provided name, if present.
     *
     * @param name The name of the option.
     * @return The option corresponding to the provided name, if present.
     */",discord4j.core.object.command
"public boolean isFocused() {
        return data.focused().toOptional().orElse(false);
    }","/**
     * Whether this option is currently focused or not.
     * <p>
     * This will always return false unless this option is from an autocomplete interaction.
     * @return Whether this option is currently focused or not.
     */",discord4j.core.object.command
"public boolean isFromType(ChannelType type)
    {
        return getChannelType() == type;
    }","/**
     * Used to determine if this event was received from a {@link Channel}
     * of the {@link net.dv8tion.jda.api.entities.channel.ChannelType ChannelType} specified.
     *
     * <p>Useful for restricting functionality to a certain type of channels.
     *
     * @param  type
     *         The {@link ChannelType ChannelType} to check against.
     *
     * @return True if the {@link net.dv8tion.jda.api.entities.channel.ChannelType ChannelType} which this message was received
     *         from is the same as the one specified by {@code type}.
     */",net.dv8tion.jda.api.events.channel
"public Publisher<?> onDeferrableInteraction(DeferrableInteractionEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user starts a deferrable interaction.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    public EnumSet<User.UserFlag> getNewFlags()
    {
        return getNewValue();
    }","/**
     * Gets the new {@link net.dv8tion.jda.api.entities.User.UserFlag UserFlags} of the User as {@link EnumSet}.
     *
     * @return The new {@code EnumSet<{@link net.dv8tion.jda.api.entities.User.UserFlag UserFlag}>} representation of the User's flags.
     */",net.dv8tion.jda.api.events.user.update
"static EmptyResponseTransformer emptyOnErrorStatus(RouteMatcher routeMatcher, Integer... codes) {
        return new EmptyResponseTransformer(routeMatcher, ClientException.isStatusCode(codes));
    }","/**
     * Transforms the given <strong>error</strong> status codes caused by requests matching the given
     * {@link RouteMatcher}, effectively suppressing the {@link ClientException} that would be forwarded otherwise.
     * <p>
     * Only a subset of HTTP status codes is supported, like all the ones from 400 and 500 series, except for the 429
     * (Too Many Requests) error that is handled upstream.
     *
     * @param routeMatcher the {@link RouteMatcher} determining whether to match a particular request
     * @param codes the list of HTTP status codes to match when applying this transformation
     * @return a {@link ResponseFunction} that transforms matching requests and response statuses into an empty sequence
     */",discord4j.rest.response
"public void setTranslation(@Nonnull DiscordLocale locale, @Nonnull String localizedString)
    {
        Checks.notNull(locale, ""Locale"");
        Checks.notNull(localizedString, ""Localized string"");

        checkConsumer.accept(localizedString);
        putTranslation(locale, localizedString);
    }","/**
     * Sets the given localized string to be used for the specified locale.
     *
     * @param  locale
     *         The locale on which to apply the localized string
     *
     * @param  localizedString
     *         The localized string to use
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If the locale is null</li>
     *             <li>If the localized string is null</li>
     *             <li>If the locale is {@link DiscordLocale#UNKNOWN}</li>
     *             <li>If the localized string does not pass the corresponding attribute check</li>
     *         </ul>
     */",net.dv8tion.jda.api.interactions.commands.localization
"public static PermissionSet computeBasePermissions(PermissionSet everyonePerms, List<PermissionSet> rolePerms) {
        return rolePerms.stream().reduce(everyonePerms, PermissionSet::or);
    }","/**
     * Computes the permissions granted by a member's roles.
     *
     * @param everyonePerms The permissions granted by the everyone role.
     * @param rolePerms The list of permissions granted by each of the member's other roles.
     * @return The combined permissions of everyonePerms and rolePerms.
     *
     * @see discord4j.core.object.entity.Member#getBasePermissions() Member#getBasePermissions()
     */",discord4j.core.util
"public Optional<Snowflake> getTargetId() {
        return data.targetId().toOptional()
                .map(Snowflake::of);
    }","/**
     * Gets the ID of the user or message targeted by a user or message command.
     *
     * @return The id of the user or message targeted.
     */",discord4j.core.object.command
"@Nonnull
        @CheckReturnValue
        public Task<E> subscribe(@Nonnull Consumer<E> callback)
        {
            final Once<E> once = new Once<>(jda, eventType, filters, timeoutCallback, timeout, timeoutPool);
            jda.addEventListener(once);
            return once.task.onSuccess(callback);
        }","/**
         * Starts listening for the event, once.
         *
         * <p>The task will be completed after all {@link #filter(Predicate) filters} return {@code true}.
         *
         * <p>Exceptions thrown in {@link Task#get() blocking} and {@link Task#onSuccess(Consumer) async} contexts includes:
         * <ul>
         *     <li>{@link CancellationException} - When {@link Task#cancel()} is called</li>
         *     <li>{@link TimeoutException} - When the listener has expired</li>
         *     <li>Any exception thrown by the {@link #timeout(Duration, Runnable) timeout callback}</li>
         * </ul>
         *
         * @throws IllegalArgumentException
         *         If the callback is null
         *
         * @return {@link Task} returning an event satisfying all preconditions
         *
         * @see Task#onSuccess(Consumer)
         * @see Task#get()
         */",net.dv8tion.jda.api.utils
"public static void say(Object object) {
    Terminal.getInstance().writeLine(object.toString());
  }","/**
   * Displays an object.
   *
   * @param object the object
   */",io.github.augustoravazoli.termenu.util
"public CompletableFuture<Optional<UpdateResult>> updateDocuments(final String collection, final String fieldName, final Object value, final Bson operation) {
        return getCollection(collection).thenApplyAsync(optionalMongoCollection -> optionalMongoCollection.map(mongoCollection -> mongoCollection.updateMany(Filters.eq(fieldName, value), operation)));
    }","/**
     * Updates a list of {@link Document} of a MongoCollection asynchronously
     * @param collection name of the collection
     * @param fieldName name of the field in the collection
     * @param value value of the given field in the collection
     * @param operation {@link Bson}
     * @return {@link UpdateResult} of the update
     */",io.github.heliumdioxid.database.mongo
"@Nullable
    public String get(@Nonnull DiscordLocale locale)
    {
        Checks.notNull(locale, ""Locale"");

        return map.get(locale);
    }","/**
     * Gets the localized string for the specified {@link DiscordLocale}.
     *
     * @param  locale
     *         The locale from which to get the localized string
     *
     * @return Possibly-null localized string
     */",net.dv8tion.jda.api.interactions.commands.localization
"@Nullable
    default ImageProxy getBanner()
    {
        String url = getBannerUrl();
        return url == null ? null : new ImageProxy(url);
    }","/**
     * The {@link ImageProxy} for the pack banner.
     * <br>This is shown when you at the top of the pack pop-out in the client.
     *
     * @return The banner proxy, or {@code null} if there is no banner
     */",net.dv8tion.jda.api.entities.sticker
"public boolean isNSFW()
    {
        return this.nsfw;
    }","/**
     * Whether or not this channel is considered as ""NSFW"" (Not-Safe-For-Work).
     * <br>If the {@link ChannelType ChannelType}
     * <b>is not {@link ChannelType#TEXT TEXT}</b>, this returns {@code false}.
     *
     * @return Whether this TextChannel is considered NSFW or {@code false} if the channel is not a text channel
     */",net.dv8tion.jda.api.entities.templates
"@Nullable
    public EmojiUnion getNewEmoji()
    {
        return getNewValue();
    }","/**
     * The new {@link EmojiUnion} for the {@link ForumTag}
     *
     * @return The new {@link EmojiUnion}
     */",net.dv8tion.jda.api.events.channel.forum.update
"public static RestScheduledEvent create(RestClient restClient, Snowflake guildId, Snowflake id) {
        return new RestScheduledEvent(restClient, guildId.asLong(), id.asLong());
    }","/**
     * Create a {@link RestScheduledEvent} for the given parameters. This method does not perform any API request.
     *
     * @param restClient The client to make API requests.
     * @param guildId The ID of the guild this entity belongs to.
     * @param id the ID of this entity.
     * @return A {@code RestGuildScheduledEvent} represented by the given parameters.
     */",discord4j.rest.entity
"@Nonnull
    @CheckReturnValue
    default MessageEditCallbackAction editMessageAttachments(@Nonnull AttachedFile... attachments)
    {
        Checks.noneNull(attachments, ""Attachments"");
        return deferEdit().setAttachments(attachments);
    }","/**
     * Acknowledgement of this interaction with a message update.
     * <br>You can use {@link #getHook()} to edit the message further.
     *
     * <p><b>You can only use deferEdit() or editMessage() once per interaction!</b> Use {@link #getHook()} for any additional updates.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * @param  attachments
     *         The new attachments of the message (Can be {@link FileUpload FileUploads} or {@link net.dv8tion.jda.api.utils.AttachmentUpdate AttachmentUpdates})
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link MessageEditCallbackAction} that can be used to further update the message
     *
     * @see    AttachedFile#fromAttachment(Message.Attachment)
     * @see    FileUpload#fromData(InputStream, String)
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nonnull
    @CheckReturnValue
    RestAction<Void> declineSpeaker();","/**
     * Reject this members {@link #getRequestToSpeakTimestamp() request to speak}
     * or moves a {@link StageInstance#getSpeakers() speaker} back to the {@link StageInstance#getAudience() audience}.
     * <p>This requires a non-null {@link #getRequestToSpeakTimestamp()}.
     * The member will have to request to speak again.
     *
     * <p>This does nothing if the member is not connected to a {@link StageChannel}.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#VOICE_MUTE_OTHERS Permission.VOICE_MUTE_OTHERS}
     *         in the associated {@link StageChannel}
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.entities
"public int getOldFlagsRaw()
    {
        return User.UserFlag.getRaw(previous);
    }","/**
     * Gets the old {@link net.dv8tion.jda.api.entities.User.UserFlag UserFlags} of the user and returns it as bitmask representation.
     * 
     * @return The old bitmask representation of the {@link net.dv8tion.jda.api.entities.User.UserFlag UserFlags}.
     */",net.dv8tion.jda.api.events.user.update
"public CompletableFuture<Optional<Connection>> getConnection() {
        return CompletableFuture.supplyAsync(() -> {
            try {
                return Optional.of(this.hikariDataSource.getConnection());
            } catch (SQLException exception) {
                exception.printStackTrace();
                return Optional.empty();
            }
        });
    }","/** Gets the {@link Connection} of the {@link MySQLDatabaseConnection#getHikariDataSource()} asynchronously
     * @return optional of the connection
     */",io.github.heliumdioxid.database.mysql
"public static GatewayReactorResources create() {
        return new GatewayReactorResources(new ReactorResources());
    }","/**
     * Create a default set of Gateway resources.
     *
     * @return a new {@link GatewayReactorResources} using all default properties
     */",discord4j.gateway
"@Nullable
    public String getOldNickname()
    {
        return getOldValue();
    }","/**
     * The old nickname
     *
     * @return The old nickname
     */",net.dv8tion.jda.api.events.guild.member.update
"@Nonnull
    public abstract PrivilegeTargetType getTargetType();","/**
     * The target {@link PrivilegeTargetType Type}.
     *
     * <p>This can either be:
     * <ul>
     *     <li>{@link PrivilegeTargetType#INTEGRATION INTEGRATION} - If the privileges have been changed on the integration-level.</li>
     *     <li>{@link PrivilegeTargetType#COMMAND COMMAND} - If the privileges have been changed on a command.</li>
     * </ul>
     *
     * @return The target type.
     */",net.dv8tion.jda.api.events.interaction.command
"@Nonnull
    @CheckReturnValue
    ThreadChannelAction createThreadChannel(@Nonnull String name, boolean isPrivate);","/**
     * Creates a new {@link ThreadChannel} with the parent channel being this {@link IThreadContainer}.
     *
     * <p>The resulting {@link ThreadChannel ThreadChannel} may be one of:
     * <ul>
     *     <li>{@link ChannelType#GUILD_PUBLIC_THREAD}</li>
     *     <li>{@link ChannelType#GUILD_NEWS_THREAD}</li>
     *     <li>{@link ChannelType#GUILD_PRIVATE_THREAD}</li>
     * </ul>
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_CHANNELS MAX_CHANNELS}
     *     <br>The maximum number of channels were exceeded</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_ACTIVE_THREADS}
     *     <br>The maximum number of active threads has been reached, and no more may be created.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS}
     *     <br>Due to missing private thread permissions.</li>
     * </ul>
     *
     * @param  name
     *         The name of the new ThreadChannel (up to {@value Channel#MAX_NAME_LENGTH} characters).
     * @param  isPrivate
     *         The public/private status of the new ThreadChannel. If true, the new ThreadChannel will be private.
     *
     * @throws IllegalArgumentException
     *         If the provided name is null, blank, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters.
     * @throws IllegalStateException
     *         If the guild does have the feature flag {@code ""PRIVATE_THREADS""} enabled.
     * @throws UnsupportedOperationException
     *         If this is a forum channel.
     *         You must use {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel#createForumPost(String, MessageCreateData) createForumPost(...)} instead.
     * @throws InsufficientPermissionException
     *         <ul>
     *             <li>If the bot does not have {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}</li>
     *             <li>If the thread is {@code private}, and the bot does not have {@link net.dv8tion.jda.api.Permission#CREATE_PRIVATE_THREADS Permission.CREATE_PRIVATE_THREADS}</li>
     *             <li>If the thread is not {@code private}, and the bot does not have {@link net.dv8tion.jda.api.Permission#CREATE_PUBLIC_THREADS Permission.CREATE_PUBLIC_THREADS}</li>
     *         </ul>
     *
     * @return A specific {@link ThreadChannelAction} that may be used to configure the new ThreadChannel before its creation.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nullable
    public String getOldVanityUrl()
    {
        return getOldVanityCode() == null ? null : ""https://discord.gg/"" + getOldVanityCode();
    }","/**
     * The old vanity url
     *
     * @return The old vanity url
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    M moveTo(int position);","/**
     * Moves the currently selected entity to the specified
     * position (0 based index). All entities are moved in the
     * direction of the left <i>hole</i> to fill the gap.
     *
     * @param  position
     *         The new not-negative position for the currently selected entity
     *
     * @throws java.lang.IllegalStateException
     *         If no entity has been selected yet, use {@link #selectPosition(Object)}
     * @throws java.lang.IllegalArgumentException
     *         If the specified position is out-of-bounds
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    #moveDown(int)
     * @see    #moveUp(int)
     * @see    #moveBelow(Object)
     * @see    #moveAbove(Object)
     */",net.dv8tion.jda.api.requests.restaction.order
"@Nonnull
    static Button danger(@Nonnull String id, @Nonnull Emoji emoji)
    {
        Checks.notEmpty(id, ""Id"");
        Checks.notNull(emoji, ""Emoji"");
        Checks.notLonger(id, ID_MAX_LENGTH, ""Id"");
        return new ButtonImpl(id, """", ButtonStyle.DANGER, false, emoji);
    }","/**
     * Creates a button with {@link ButtonStyle#DANGER DANGER} Style.
     * <br>The button is enabled and has no text label.
     * To use labels you can use {@code danger(id, label).withEmoji(emoji)}
     *
     * <p>To disable the button you can use {@link #asDisabled()}.
     *
     * @param  id
     *         The custom button ID
     * @param  emoji
     *         The emoji to use as the button label
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any provided argument is null or empty.</li>
     *             <li>If the character limit for {@code id}, defined by {@link #ID_MAX_LENGTH} as {@value #ID_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
"@Nonnull
    @CheckReturnValue
    PermissionOverrideAction upsertPermissionOverride(@Nonnull IPermissionHolder permissionHolder);","/**
     * Creates a new override or updates an existing one.
     * <br>This is similar to calling {@link PermissionOverride#getManager()} if an override exists.
     *
     * @param  permissionHolder
     *         The Member/Role for the override
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If we don't have the permission to {@link net.dv8tion.jda.api.Permission#MANAGE_PERMISSIONS MANAGE_PERMISSIONS}
     * @throws java.lang.IllegalArgumentException
     *         If the provided permission holder is null or not from this guild
     *
     * @return {@link net.dv8tion.jda.api.requests.restaction.PermissionOverrideAction}
     *         <br>With the current settings of an existing override or a fresh override with no permissions set
     *
     * @see    PermissionOverrideAction#clear(long)
     * @see    PermissionOverrideAction#grant(long)
     * @see    PermissionOverrideAction#deny(long)
     */",net.dv8tion.jda.api.entities.channel.attribute
boolean willAutoLeave();,"/**
     * Gets autoleave status
     *
     * @return boolean of the autoleave
     */",com.massivecraft.factions
"public static RestMessage create(RestClient restClient, Snowflake channelId, Snowflake id) {
        return new RestMessage(restClient, channelId.asLong(), id.asLong());
    }","/**
     * Create a {@link RestMessage} with the given parameters. This method does not perform any API request.
     *
     * @param restClient REST API resources
     * @param channelId the ID of the channel this messages belongs to
     * @param id the ID of this message
     * @return a {@code RestMessage} represented by the given parameters.
     */",discord4j.rest.entity
"@Nonnull
    static Button secondary(@Nonnull String id, @Nonnull String label)
    {
        Checks.notEmpty(id, ""Id"");
        Checks.notEmpty(label, ""Label"");
        Checks.notLonger(id, ID_MAX_LENGTH, ""Id"");
        Checks.notLonger(label, LABEL_MAX_LENGTH, ""Label"");
        return new ButtonImpl(id, label, ButtonStyle.SECONDARY, false, null);
    }","/**
     * Creates a button with {@link ButtonStyle#SECONDARY SECONDARY} Style.
     * <br>The button is enabled and has no emoji attached by default.
     * You can use {@link #asDisabled()} and {@link #withEmoji(Emoji)} to further configure it.
     *
     * @param  id
     *         The custom button ID
     * @param  label
     *         The text to display on the button
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any provided argument is null or empty.</li>
     *             <li>If the character limit for {@code id}, defined by {@link #ID_MAX_LENGTH} as {@value #ID_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the character limit for {@code label}, defined by {@link #LABEL_MAX_LENGTH} as {@value #LABEL_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
"public static final Route MESSAGES_PINNED_ADD = Route.put(""/channels/{channel.id}/pins/{message.id}"");","/**
     * Pin a message in a channel. Requires the 'MANAGE_MESSAGES' permission. Returns a 204 empty response on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#add-pinned-channel-message"">
     * https://discord.com/developers/docs/resources/channel#add-pinned-channel-message</a>
     */",discord4j.rest.route
"public Flux<GuildScheduledEventUserData> getSubscribedUsersBefore(Snowflake userId, @Nullable Boolean withMember) {
        Function<Map<String, Object>, Flux<GuildScheduledEventUserData>> doRequest = params -> {
            Optional.ofNullable(withMember).ifPresent(value -> params.put(""with_member"", value));
            return restClient.getGuildService().getScheduledEventUsers(guildId, id, params);
        };
        return PaginationUtil.paginateBefore(doRequest, data -> Snowflake.asLong(data.user().id()), userId.asLong(), 100);
    }","/**
     * Request to retrieve <i>all</i> subscribed users <i>before</i> the specified ID.
     * <p>
     * The returned {@code Flux} will emit items in <i>reverse-</i>chronological order (newest to oldest). It is
     * recommended to limit the emitted items by invoking either {@link Flux#takeWhile(Predicate)} (to retrieve IDs
     * within a specified range) or {@link Flux#take(long)} (to retrieve a specific amount of IDs).
     * <p>
     * The following example will get <i>all</i> users from {@code userId} to {@code myOtherUserId}:
     * {@code getSubscribedUsersBefore(userId).takeWhile(user -> user.getId().compareTo(myOtherUserId) >= 0)}
     *
     * @param userId The ID of the <i>newest</i> user to retrieve.
     * @param withMember Whether to optionally include the member object in the returned data (if the user is a member).
     * @return A {@link Flux} that continually emits <i>all</i> {@link GuildScheduledEventUserData users} <i>before</i>
     * the specified ID. If an error is received, it is emitted through the {@code Flux}.
     * @see
     * <a href=""https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users"">
     * Get Guild Scheduled Event Users</a>
     */",discord4j.rest.entity
"protected Builder(ShardInfo shardInfo) {
            this.shardInfo = ShardInfo.create(shardInfo.getIndex(), shardInfo.getCount());
        }","/**
         * Create a builder using the given shard information.
         *
         * @param shardInfo the shard index and count to be used when authenticating
         */",discord4j.gateway
"@Nullable
    String getPlaceHolder();","/**
     * The placeholder of this TextInput component.
     * <br>This is a short hint that describes the expected value of the TextInput field.
     *
     * <p><b>This is null if no placeholder has been set!</b>
     *
     * @return The placeholder of this TextInput component or null.
     */",net.dv8tion.jda.api.interactions.components.text
"public Set<User> getRecipients() {
        return getData().recipients().toOptional()
                .map(recipients -> recipients.stream()
                        .map(data -> new User(getClient(), data))
                        .collect(Collectors.toSet()))
                .orElse(Collections.emptySet());
    }","/**
     * Gets the recipients for this private channel.
     *
     * @return The recipients for this private channel.
     */",discord4j.core.object.entity.channel
Flux<GuildSticker> getGuildStickers(Snowflake guildId);,"/**
     * Requests to retrieve the guild's stickers.
     *
     * @param guildId The ID of the guild.
     * @return A {@link Flux} that continually emits the guild's {@link GuildSticker stickers}. If an error is received,
     * it is emitted through the {@code Flux}.
     */",discord4j.core.retriever
"void onStateChange(ConnectionObserver.State newState, GatewayClient client);","/**
     * React on websocket state change.
     *
     * @param newState the new state
     * @param client the gateway client observing this change
     */",discord4j.gateway
"@Nullable
    public String getSubcommandName()
    {
        return subcommand;
    }","/**
     * Returns the subcommand of the slash command
     *
     * @return the subcommand of the slash command
     */",net.dv8tion.jda.api.interactions.commands
"@Nonnull
    AuditLogPaginationAction user(@Nullable UserSnowflake user);","/**
     * Filters retrieved entities by the specified {@link UserSnowflake}.
     * <br>This specified the action issuer and not the target of an action. (Targets need not be users)
     *
     * @param  user
     *         The {@link UserSnowflake} used to filter or {@code null} to remove user filtering.
     *         This can be a member or user instance or {@link User#fromId(long)}.
     *
     * @return The current AuditLogPaginationAction for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.pagination
"@Nonnull
    default R setFiles(@Nonnull FileUpload... files)
    {
        Checks.noneNull(files, ""Files"");
        return setFiles(Arrays.asList(files));
    }","/**
     * The {@link FileUpload FileUploads} that should be attached to the message.
     * <br>This will replace all the existing attachments on the message, if this is an edit request.
     * You can use {@link MessageEditRequest#setAttachments(AttachedFile...)} to keep existing attachments, instead of this method.
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * <p><b>Example</b><br>
     * Create an embed with a custom image, uploaded alongside the message:
     * <pre>{@code
     * MessageEmbed embed = new EmbedBuilder()
     *         .setDescription(""Image of a cute cat"")
     *         .setImage(""attachment://cat.png"") // here ""cat.png"" is the name used in the FileUpload.fromData factory method
     *         .build();
     *
     * // The name here will be ""cat.png"" to discord, what the file is called on your computer is irrelevant and only used to read the data of the image.
     * FileUpload file = FileUpload.fromData(new File(""mycat-final-copy.png""), ""cat.png""); // Opens the file called ""cat.png"" and provides the data used for sending
     *
     * channel.sendMessageEmbeds(embed)
     *        .setFiles(file)
     *        .queue();
     * }</pre>
     *
     * @param  files
     *         The {@link FileUpload FileUploads} to attach to the message,
     *         null or an empty list will set the attachments to an empty list and remove them from the message
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The same instance for chaining
     */",net.dv8tion.jda.api.utils.messages
Collator cmp = Collator.getInstance(java.util.Locale.CHINA);,"/**
	 * The ""start"" method as required by Javadoc.
	 * 
	 * @param root
	 *            the root of the documentation tree.
	 * @see com.sun.javadoc.RootDoc
	 * @return true if the doclet ran without encountering any errors.
	 */",net.winroad.htmldoclet4jdk8
"public Mono<UserData> edit(UserModifyRequest request) {
        return userService.modifyCurrentUser(request);
    }","/**
     * Requests to edit this client (i.e., modify the current bot user).
     *
     * @param request A {@link UserModifyRequest} as request body.
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link UserData}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.rest
"public LegacyGuildCreateSpec setRegion(Region.Id regionId) {
        builder.region(regionId.getValue());
        return this;
    }","/**
     * Sets the voice region id for the created {@link Guild}.
     *
     * @param regionId The voice region id for the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Publisher<?> onThreadChannelUpdateEvent(ThreadChannelUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a thread relevant to the current user is updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Mono<Void> presentModal(InteractionPresentModalSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(() -> createInteractionResponse(InteractionResponseType.MODAL, spec.asRequest()));
    }","/**
     * Requests to respond to the interaction by presenting a modal for the user to fill out and submit with the given
     * spec contents. Once the user submits the modal, it will be received as a new {@link ModalSubmitInteractionEvent}.
     *
     * @param spec an immutable object that specifies how to present the modal window
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the interaction response has
     * been sent. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.interaction
"public GuildStickerEditMono edit() {
        return GuildStickerEditMono.of(this);
    }","/**
     * Requests to edit this guild sticker. Properties specifying how to edit this sticker can be set via the {@code
     * withXxx} methods of the returned {@link GuildStickerEditMono}.
     *
     * @return A {@link GuildStickerEditMono} where, upon successful completion, emits the edited {@link GuildSticker}. If
     * an error is received, it is emitted through the {@code GuildStickerEditMono}.
     */",discord4j.core.object.entity
void addAllFeatureVectors(String gesture) throws IOException;,"/**
     * Add all templates.
     *
     * @param gesture
     *            the String gesture
     * @throws IOException
     *             the exception
     * @throws JsonIOException
     *             the {@link JsonIOException}
     */",recorder.controller
"@Nonnull
    @CheckReturnValue
    ReplyCallbackAction deferReply();","/**
     * Acknowledge this interaction and defer the reply to a later time.
     * <br>This will send a {@code <Bot> is thinking...} message in chat that will be updated later through either {@link InteractionHook#editOriginal(String)} or {@link InteractionHook#sendMessage(String)}.
     *
     * <p>You can use {@link #deferReply(boolean) deferReply(true)} to send a deferred ephemeral reply. If your initial deferred message is not ephemeral it cannot be made ephemeral later.
     * Your first message to the {@link InteractionHook} will inherit whether the message is ephemeral or not from this deferred reply.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>Use {@link #reply(String)} to reply directly.
     *
     * @return {@link ReplyCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nonnull
    @CheckReturnValue
    R setAutoArchiveDuration(@Nonnull ThreadChannel.AutoArchiveDuration autoArchiveDuration);","/**
     * Sets the {@link ThreadChannel.AutoArchiveDuration} for the new thread.
     * <br>This is primarily used to <em>hide</em> threads after the provided time of inactivity.
     * Threads are automatically archived after 7 days of inactivity regardless.
     *
     * @param  autoArchiveDuration
     *         The new archive inactivity duration (which hides the thread)
     *
     * @throws IllegalArgumentException
     *         If the provided duration is null
     *
     * @return The current action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public static final Route GUILD_CHANNELS_GET = Route.get(""/guilds/{guild.id}/channels"");","/**
     * Returns a list of guild channel objects.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-channels"">
     * https://discord.com/developers/docs/resources/guild#get-guild-channels</a>
     */",discord4j.rest.route
Mono<Void> deleteFollowupMessage(long messageId);,"/**
     * Delete a followup message created under this interaction.
     *
     * @param messageId the message ID to be deleted. You can convert IDs using {@link Snowflake} methods.
     * @return a {@link Mono} where, upon successful message deletion, returns a completion signal. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"public Builder mutate() {
        return new Builder()
                .httpClient(getHttpClient())
                .timerTaskScheduler(getTimerTaskScheduler())
                .blockingTaskScheduler(getBlockingTaskScheduler())
                .udpClient(getUdpClient())
                .sendTaskScheduler(getSendTaskScheduler())
                .receiveTaskScheduler(getReceiveTaskScheduler());
    }","/**
     * Returns a builder to create a new {@link VoiceReactorResources} with settings copied from the current
     * {@link VoiceReactorResources}.
     *
     * @return a builder based off this instance properties
     */",discord4j.voice
"@Nonnull
    @CheckReturnValue
    default MessageEditAction editMessageComponentsById(long messageId, @Nonnull LayoutComponent... components)
    {
        Checks.noneNull(components, ""Components"");
        return editMessageComponentsById(messageId, Arrays.asList(components));
    }","/**
     * Attempts to edit a message by its id in this MessageChannel.
     * <br>This will replace all the current {@link net.dv8tion.jda.api.interactions.components.Component Components},
     * such as {@link Button Buttons} or {@link SelectMenu SelectMenus} on this message.
     * The provided parameters are {@link LayoutComponent LayoutComponents} such as {@link ActionRow} which contain a list of components to arrange in the respective layout.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_AUTHOR_EDIT INVALID_AUTHOR_EDIT}
     *     <br>Attempted to edit a message that was not sent by the currently logged in account.
     *         Discord does not allow editing of other users' Messages!</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The request was attempted after the account lost access to the {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed, or after {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}
     *         was revoked in the {@link GuildMessageChannel GuildMessageChannel}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
     *         the message it referred to has already been deleted. This might also be triggered for ephemeral messages.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>The request was attempted after the channel was deleted.</li>
     * </ul>
     *
     * <p><b>Example</b><br>
     * <pre>{@code
     * channel.editMessageComponentsById(messageId,
     *   ActionRow.of(Button.success(""prompt:accept"", ""Accept""), Button.danger(""prompt:reject"", ""Reject"")), // 1st row below message
     *   ActionRow.of(Button.link(url, ""Help"")) // 2nd row below message
     * ).queue();
     * }</pre>
     *
     * @param  messageId
     *         The id referencing the Message that should be edited
     * @param  components
     *         Up to 5 new {@link LayoutComponent LayoutComponents} for the edited message, such as {@link ActionRow}
     *
     * @throws UnsupportedOperationException
     *         If the component layout is a custom implementation that is not supported by this interface
     * @throws IllegalArgumentException
     *         If any of the provided {@link LayoutComponent LayoutComponents} is null
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If this is a {@link GuildMessageChannel GuildMessageChannel} and this account does not have
     *         {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}
     *         or {@link net.dv8tion.jda.api.Permission#MESSAGE_SEND Permission.MESSAGE_SEND}
     *
     * @return {@link MessageEditAction}
     */",net.dv8tion.jda.api.entities.channel.middleman
"public Mono<StageInstanceData> getData() {
        return restClient.getStageInstanceService().getStageInstance(channelId);
    }","/**
     * Retrieve this stage instance's data upon subscription.
     *
     * @return a {@link Mono} where, upon successful completion, emits the {@link StageInstanceData} belonging to this stage instance.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"@Nullable
    public Guild getGuild(@Nonnull JDA api)
    {
        Checks.notNull(api, ""JDA"");
        return api.getGuildById(guildId);
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Guild} instance for the {@link #getGuildId() guild id}.
     *
     * @param  api
     *         The shard to perform the lookup in
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided JDA instance is null
     *
     * @since  4.0.0
     *
     * @return The Guild instance or null
     */",net.dv8tion.jda.api.exceptions
"@Nonnull
    @CheckReturnValue
    ChannelAction<T> addRolePermissionOverride(long roleId, long allow, long deny);","/**
     * Adds a new Role {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride} for the new GuildChannel.
     *
     * <p>If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied.
     *
     * <p>Example:
     * <pre>{@code
     * long roleId = role.getIdLong();
     * long allow = Permission.VIEW_CHANNEL.getRawValue();
     * long deny = Permission.MESSAGE_SEND.getRawValue() | Permission.MESSAGE_ADD_REACTION.getRawValue();
     * channelAction.addMemberPermissionOverride(roleId, allow, deny);
     * }</pre>
     *
     * @param  roleId
     *         The id for the role
     * @param  allow
     *         The granted {@link net.dv8tion.jda.api.Permission Permissions} for the override.
     *         Use {@link net.dv8tion.jda.api.Permission#getRawValue()} to retrieve these Permissions.
     * @param  deny
     *         The denied {@link net.dv8tion.jda.api.Permission Permissions} for the override.
     *         Use {@link net.dv8tion.jda.api.Permission#getRawValue()} to retrieve these Permissions.
     *
     * @throws java.lang.IllegalArgumentException
     *         If one of the provided Permission values is invalid
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If any permission is set in allow/deny that the currently logged in account is missing,
     *         unless {@link Permission#MANAGE_PERMISSIONS} or {@link Permission#MANAGE_ROLES} is granted to it within the context of the parent category.
     *
     * @return The current ChannelAction, for chaining convenience
     *
     * @see    net.dv8tion.jda.api.Permission#getRawValue()
     * @see    net.dv8tion.jda.api.Permission#getRaw(java.util.Collection)
     * @see    net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...)
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    String getSessionId();","/**
     * The Session-Id for this VoiceState
     *
     * @return The Session-Id
     */",net.dv8tion.jda.api.entities
"public boolean isModifiedOnVersion(String version) {
		if (version == null || version.isEmpty()) {
			return true;
		}
		if (this.history != null && this.history.isModifiedOnVersion(version)) {
			return true;
		}
		if (this.fields != null) {
			for (APIParameter param : this.fields) {
				if (param.isModifiedOnVersion(version)) {
					return true;
				}
			}
		}
		return false;
	}","/**
	 * whether it's type argument for parent (the parent is generic type).
	 */",net.winroad.wrdoclet.data
"@Nonnull
    default InteractionType getType()
    {
        return InteractionType.fromKey(getTypeRaw());
    }","/**
     * The {@link InteractionType} for this interaction.
     *
     * @return The {@link InteractionType} or {@link InteractionType#UNKNOWN}
     */",net.dv8tion.jda.api.interactions
"@Nullable
    default GuildChannel getGuildChannelById(@Nonnull String id)
    {
        return getGuildChannelById(MiscUtil.parseSnowflake(id));
    }","/**
     * Get {@link GuildChannel GuildChannel} for the provided ID.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * <p>To get more specific channel types you can use one of the following:
     * <ul>
     *     <li>{@link #getChannelById(Class, String)}</li>
     *     <li>{@link #getTextChannelById(String)}</li>
     *     <li>{@link #getNewsChannelById(String)}</li>
     *     <li>{@link #getStageChannelById(String)}</li>
     *     <li>{@link #getVoiceChannelById(String)}</li>
     *     <li>{@link #getCategoryById(String)}</li>
     * </ul>
     *
     * @param  id
     *         The ID of the channel
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided ID is null
     * @throws java.lang.NumberFormatException
     *         If the provided ID is not a snowflake
     *
     * @return The GuildChannel or null
     */",net.dv8tion.jda.api.entities.channel.attribute
"public static final Route CHANNEL_INVITES_GET = Route.get(""/channels/{channel.id}/invites"");","/**
     * Returns a list of invite objects (with invite metadata) for the channel. Only usable for guild channels.
     * Requires the 'MANAGE_CHANNELS' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#get-channel-invites"">
     * https://discord.com/developers/docs/resources/channel#get-channel-invites</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    static Modal.Builder create(@Nonnull String customId, @Nonnull String title)
    {
        return new Modal.Builder(customId, title);
    }","/**
     * Creates a new Modal. You must add at least one component to a modal before building it.
     *
     * @param  customId 
     *         The custom id for this modal
     * @param  title
     *         The title for this modal
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If the provided customId or title are null, empty, or blank</li>
     *             <li>If the provided customId is longer than {@value MAX_ID_LENGTH} characters</li>
     *             <li>If the provided title is longer than {@value #MAX_TITLE_LENGTH} characters</li>
     *         </ul>
     *
     * @return {@link Builder Builder} instance to customize this modal further
     */",net.dv8tion.jda.api.interactions.modals
void removeSession(@Nonnull SessionConnectNode node);,"/**
     * Called by a JDA session when a shutdown has been requested.
     * <br>When this happened the {@link net.dv8tion.jda.api.utils.SessionController.SessionConnectNode#run(boolean) SessionConnectNode.run(boolean)}
     * will be a no-op and does not contribute to the {@link #IDENTIFY_DELAY}.
     *
     * @param node
     *        The {@link net.dv8tion.jda.api.utils.SessionController.SessionConnectNode SessionConnectNode} to remove from the queue.
     */",net.dv8tion.jda.api.utils
"public Mono<NewsChannel> getNewsChannel() {
        return gateway.getChannelById(Snowflake.of(data.channelId()))
                .cast(NewsChannel.class);
    }","/**
     * Requests to retrieve the news channel that has been followed.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link NewsChannel news channel} that has
     * been followed. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
    @CheckReturnValue
    RoleAction setIcon(@Nullable Icon icon);","/**
     * Sets the {@link net.dv8tion.jda.api.entities.Icon Icon} of this {@link net.dv8tion.jda.api.entities.Role Role}.
     * This icon will be displayed next to the role's name in the members tab and in chat.
     *
     * @param  icon
     *         The new icon for this {@link net.dv8tion.jda.api.entities.Role Role}
     *         or {@code null} to reset
     *
     * @return The current RoleAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @CheckReturnValue
    default ActionComponent asEnabled()
    {
        return withDisabled(false);
    }","/**
     * Returns a copy of this component with {@link #isDisabled()} set to false.
     *
     * @return New enabled component instance
     */",net.dv8tion.jda.api.interactions.components
"public DiscordWebRequest(Route route, Object... uriVars) {
        this.route = route;
        this.completeUri = RouteUtils.expand(route.getUriTemplate(), uriVars);
        this.uriVariableMap = RouteUtils.createVariableMap(route.getUriTemplate(), uriVars);
    }","/**
     * Create a new {@link DiscordWebRequest} template based on a {@link Route} and its compiled URI.
     *
     * @param route the API resource targeted by this request
     * @param uriVars the values to expand each template parameter
     */",discord4j.rest.request
"Route.CompiledRoute route = Route.Messages.GET_MESSAGE_HISTORY.compile(channel.getId()).withQueryParams(""limit"", Integer.toString(amount), ""after"", String.valueOf(history.firstKey()));","/**
     * Retrieves messages from Discord that were sent more recently than the most recently sent message in
     * MessageHistory's history cache ({@link #getRetrievedHistory()}).
     * Use case for this method is for getting more recent messages after jumping to a specific point in history
     * using something like {@link MessageChannel#getHistoryAround(String, int)}.
     * <br>This method works in the same way as {@link #retrievePast(int)}'s Additional Retrieval mode.
     * <p>
     * <b>Note:</b> This method can only be used after {@link net.dv8tion.jda.api.entities.Message Messages} have already
     * been retrieved from Discord.
     * <p>
     * Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>Can occur if retrieving in Additional Mode and the Message being used as the marker for the last retrieved
     *         Message was deleted. Currently, to fix this, you need to create a new
     *         {@link net.dv8tion.jda.api.entities.MessageHistory MessageHistory} instance.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>Can occur if the request for history retrieval was executed <i>after</i> JDA lost access to the Channel,
     *         typically due to the account being removed from the {@link net.dv8tion.jda.api.entities.Guild Guild}.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>Can occur if the request for history retrieval was executed <i>after</i> JDA lost the
     *         {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY} permission.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>The send request was attempted after the channel was deleted.</li>
     * </ul>
     *
     * @param  amount
     *         The amount of {@link net.dv8tion.jda.api.entities.Message Messages} to retrieve.
     *
     * @throws java.lang.IllegalArgumentException
     *         The the {@code amount} is less than {@code 1} or greater than {@code 100}.
     * @throws java.lang.IllegalStateException
     *         If no messages have been retrieved by this MessageHistory.
     *
     * @return {@link net.dv8tion.jda.api.requests.RestAction RestAction} -
     *         Type: {@link java.util.List List}{@literal <}{@link net.dv8tion.jda.api.entities.Message Message}{@literal >}
     *         <br>Retrieved Messages are placed in a List and provided in order of most recent to oldest with most recent
     *         starting at index 0. If the list is empty, there were no more messages left to retrieve.
     */",net.dv8tion.jda.api.entities
"Mono<Void> onMessageCreate(int shardIndex, MessageCreate dispatch);","/**
     * Updates the internal state of the store according to the given {@link MessageCreate} gateway dispatch. This
     * will typically perform an insert operation on the related {@link MessageData}, and update the
     * {@code last_message_id} field of the channel where the message was sent in.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"@Override
        public String toString() {
            return ""[retry_succeeded]"";
        }","/**
     * Propagated when a reconnection attempt has succeeded.
     */",discord4j.gateway
"@Nonnull
    public String getMessageAuthorId()
    {
        return Long.toUnsignedString(messageAuthorId);
    }","/**
     * The user id of the original message author.
     * <br>This might be 0 for webhook messages.
     *
     * @return The user id of the original message author.
     */",net.dv8tion.jda.api.events.message.react
"@Deprecated
    default Mono<ExtendedInvite> createInvite(final Consumer<? super LegacyInviteCreateSpec> spec) {
        return Mono.defer(
                () -> {
                    LegacyInviteCreateSpec mutatedSpec = new LegacyInviteCreateSpec();
                    spec.accept(mutatedSpec);
                    return getClient().getRestClient().getChannelService()
                            .createChannelInvite(getId().asLong(), mutatedSpec.asRequest(), mutatedSpec.getReason());
                })
                .map(data -> new ExtendedInvite(getClient(), data));
    }","/**
     * Requests to create an invite.
     *
     * @param spec A {@link Consumer} that provides a ""blank"" {@link LegacyInviteCreateSpec} to be operated on.
     * @return A {@link Mono} where, upon successful completion, emits the created {@link ExtendedInvite}. If an error
     * is received, it is emitted through the {@code Mono}.
     * @deprecated use {@link #createInvite(InviteCreateSpec)} or {@link #createInvite()} which offer an immutable
     * approach to build specs
     */",discord4j.core.object.entity.channel
"public Optional<List<Snowflake>> getSyncedChannelIds() {
        return dispatch.channelIds().toOptional().map(list -> list.stream().map(Snowflake::of).collect(Collectors.toList()));
    }","/**
     * Returns the parent channel IDs whose threads are being synced. If absent, then threads were synced for the entire
     * guild. This array may contain channel IDs that have no active threads as well.
     *
     * @return if present, a list of {@link Snowflake} channel IDs that are having their threads synced, otherwise if
     * absent, means this sync event is for the entire guild.
     */",discord4j.core.event.domain.thread
"@Nonnull
    @CheckReturnValue
    R mentionRepliedUser(boolean mention);","/**
     * Whether to mention the used, when replying to a message.
     * <br>This only matters in combination with {@link net.dv8tion.jda.api.requests.restaction.MessageCreateAction#setMessageReference(Message) MessageCreateAction.setMessageReference(...)}!
     *
     * <p>This is true by default but can be configured using {@link #setDefaultMentionRepliedUser(boolean)}!
     *
     * @param  mention
     *         True, to mention the author if the referenced message
     *
     * @return The same instance for chaining
     */",net.dv8tion.jda.api.utils.messages
"public static Object getLazyString(LazyEvaluation lazyLambda)
    {
        return new Object()
        {
            @Override
            public String toString()
            {
                try
                {
                    return lazyLambda.getString();
                }
                catch (Exception ex)
                {
                    StringWriter sw = new StringWriter();
                    ex.printStackTrace(new PrintWriter(sw));
                    return ""Error while evaluating lazy String... "" + sw;
                }
            }
        };
    }","/**
     * Utility function to enable logging of complex statements more efficiently (lazy).
     *
     * @param  lazyLambda
     *         The Supplier used when evaluating the expression
     *
     * @return An Object that can be passed to SLF4J's logging methods as lazy parameter
     */",net.dv8tion.jda.internal.utils
"@Nonnull
    public EmbedBuilder setUrl(@Nullable String url)
    {
        if (Helpers.isBlank(url))
            url = null;
        urlCheck(url);
        this.url = url;

        return this;
    }","/**
     * Sets the URL of the embed.
     * <br>The Discord client mostly only uses this property in combination with the {@link #setTitle(String) title} for a clickable Hyperlink.
     *
     * <p>If multiple embeds in a message use the same URL, the Discord client will merge them into a single embed and aggregate images into a gallery view.
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the character limit for {@code url}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the provided {@code url} is not a properly formatted http or https url.</li>
     *         </ul>
     *
     * @return the builder after the URL has been set
     *
     * @see    #setTitle(String, String)
     */",net.dv8tion.jda.api
"public String getRateLimitedRoute()
    {
        return rateLimitedRoute;
    }","/**
     * The route responsible for the rate limit bucket that is used in
     * the responsible RateLimiter
     *
     * @return The corresponding route
     */",net.dv8tion.jda.api.exceptions
"@Nonnull
        public Builder setRequiredRange(int min, int max)
        {
            if (min != -1 && max != -1 && min > max)
                throw new IllegalArgumentException(""minimum cannot be greater than maximum!"");

            setMinLength(min);
            setMaxLength(max);
            return this;
        }","/**
         * Sets the minimum and maximum required length on this TextInput component
         *
         * @param  min 
         *         Minimum length of the text input, or -1 for none
         * @param  max 
         *         Maximum length of the text input, or -1 for none

         * @throws IllegalArgumentException
         *         <ul>
         *             <li>If min is not -1 and is negative or greater than {@link #MAX_VALUE_LENGTH}</li>
         *             <li>If max is not -1 and is smaller than 1, smaller than min or greater than {@link #MAX_VALUE_LENGTH}</li>
         *         </ul>
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.components.text
"public static RestInvite create(RestClient restClient, String code) {
        return new RestInvite(restClient, code);
    }","/**
     * Create a {@link RestInvite} with the given parameters. This method does not perform any API request.
     *
     * @param restClient REST API resources
     * @param code the ID of this entity
     * @return a {@code RestInvite} represented by the given parameters.
     */",discord4j.rest.entity
Mono<VoiceConnection> create(VoiceGatewayOptions options);,"/**
     * Return a {@link Mono} that, upon subscription, is able to obtain a {@link VoiceConnection} from the given
     * {@link VoiceGatewayOptions}. The resulting connection can be an existing one if it's still active for a guild.
     *
     * @param options the set of options to configure voice connections
     * @return a {@link Mono} that, upon subscription, can return a {@link VoiceConnection}. In case an error occurs,
     * it is emitted through the {@link Mono}.
     */",discord4j.voice
"@Nonnull
    @Override
    StageInstanceManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * <br>Example: {@code manager.reset(ChannelManager.TOPIC, ChannelManager.PRIVACY_LEVEL);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #TOPIC}</li>
     *     <li>{@link #PRIVACY_LEVEL}</li>
     * </ul>
     *
     * @param  fields
     *         Integer values containing the flags to reset.
     *
     * @return StageInstanceManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public boolean isPending() {
        return getMemberData().pending().toOptional().orElse(false);
    }","/**
     * Gets whether the user has not yet passed the guild's Membership Screening requirements.
     *
     * @return Whether the user has not yet passed the guild's Membership Screening requirements.
     */",discord4j.core.object.entity
"public Builder setInvalidationFilter(@Nullable EnumSet<InvalidationCause> invalidationFilter) {
            this.invalidationFilter = invalidationFilter;
            return this;
        }","/**
         * Sets the filter represented as a subset of {@link InvalidationCause} to apply when a shard is invalidated.
         * Only the causes included in the set will trigger cleanup of data related to the shard that's being
         * invalidated. By default no filter is applied and data will be cleared on shard invalidation regardless of
         * the reason ({@code EnumSet.allOf(InvalidationCause.class)})
         *
         * @param invalidationFilter the filter as an {@link EnumSet}, or null to use default
         * @return this builder
         */",discord4j.common.store.impl
"@Nonnull
    public GuildVoiceState getVoiceState()
    {
        return member.getVoiceState();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.GuildVoiceState GuildVoiceState} of the member
     * <br>Shortcut for {@code getMember().getVoiceState()}
     *
     * @return The {@link net.dv8tion.jda.api.entities.GuildVoiceState GuildVoiceState} of the member
     */",net.dv8tion.jda.api.events.guild.voice
EventDispatcher build();,"/**
         * Create the {@link EventDispatcher}
         *
         * @return an {@link EventDispatcher} with the configured parameters.
         */",discord4j.core.event
"@Nonnull
    public ChannelType getType()
    {
        return channel.getType();
    }","/**
     * The {@link ChannelType ChannelType}
     *
     * @return The {@link ChannelType ChannelType}
     */",net.dv8tion.jda.api.events.user
"public User getSelf() {
        return self;
    }","/**
     * Gets the bot {@link User}.
     *
     * @return The bot {@link User}.
     */",discord4j.core.event.domain.lifecycle
"@Nonnull
    @CheckReturnValue
    default Button withUrl(@Nonnull String url)
    {
        Checks.notEmpty(url, ""URL"");
        Checks.notLonger(url, URL_MAX_LENGTH, ""URL"");
        return new ButtonImpl(null, getLabel(), ButtonStyle.LINK, url, isDisabled(), getEmoji());
    }","/**
     * Returns a copy of this button with the provided url.
     *
     * @param  url
     *         The url to use
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If the provided {@code url} is null or empty.</li>
     *             <li>If the character limit for {@code url}, defined by {@link #URL_MAX_LENGTH} as {@value #URL_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return New button with the changed url
     */",net.dv8tion.jda.api.interactions.components.buttons
"public LegacyEmbedCreateSpec from(EmbedData embedData) {
        requestBuilder.from(embedData);
        this.fields.clear();
        this.fields.addAll(embedData.fields()
            .toOptional()
            .orElseGet(ArrayList::new));
        return this;
    }","/**
     * Populate the spec from an existing embed.
     * This will override all previously set values including fields!
     *
     * @param embedData The embed to populate this spec from.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    public VerificationLevel getVerificationLevel()
    {
        return this.verificationLevel;
    }","/**
     * Returns the {@link net.dv8tion.jda.api.entities.Guild.VerificationLevel VerificationLevel} of this guild.
     *
     * @return the verification level of the guild
     */",net.dv8tion.jda.api.entities.templates
"public static String asString(final long id) {
        return Long.toUnsignedString(id);
    }","/**
     * Constructs a {@code Snowflake} represented as a {@link String} utilizing an <i>unsigned</i> ID.
     *
     * @param id The <i>unsigned</i> ID to construct a {@code Snowflake}. Must be non-null.
     * @return A constructed {@code Snowflake} with the <i>unsigned</i> ID.
     * @throws NumberFormatException If {@code id} is not an <i>unsigned</i> ID.
     */",discord4j.common.util
"public AutoModService getAutoModService() {
        return autoModService;
    }","/**
     * Access a low-level representation of the API endpoints for the AutoMod resource.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"public Publisher<?> onCategoryUpdate(CategoryUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild channel category is updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public int getOldPositionRaw()
    {
        return oldPositionRaw;
    }","/**
     * The old position
     *
     * @return The old position
     */",net.dv8tion.jda.api.events.role.update
"@Nonnull
    @CheckReturnValue
    default RoleAction setPermissions(@Nullable Permission... permissions)
    {
        if (permissions != null)
            Checks.noneNull(permissions, ""Permissions"");

        return setPermissions(permissions == null ? null : Permission.getRaw(permissions));
    }","/**
     * Sets the Permissions the new Role should have.
     * This will only allow permissions that the current account already holds unless
     * the account is owner or {@link net.dv8tion.jda.api.Permission#ADMINISTRATOR admin} of the parent {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  permissions
     *         The varargs {@link net.dv8tion.jda.api.Permission Permissions} for the new role
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not hold one of the specified permissions
     * @throws IllegalArgumentException
     *         If any of the provided permissions is {@code null}
     *
     * @return The current RoleAction, for chaining convenience
     *
     * @see    net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...) Permission.getRaw(Permission...)
     */",net.dv8tion.jda.api.requests.restaction
"public String getNamespaceURI(String prefix) {
		if (prefix == null || prefix.equals(XMLConstants.DEFAULT_NS_PREFIX)) {
			return prefix2Uri.get(DEFAULT_NS);
		} else {
			return prefix2Uri.get(prefix);
		}
	}","/**
	 * This method is called by XPath. It returns the default namespace, if the
	 * prefix is null or """".
	 * 
	 * @param prefix
	 *            to search for
	 * @return uri
	 */",net.winroad.wrdoclet.utils
"public boolean isManaged()
    {
        return emoji.isManaged();
    }","/**
     * Whether this emoji is managed by an integration
     *
     * @return True, if this emoji is managed by an integration
     */",net.dv8tion.jda.api.events.emoji
"@Nonnull
    public EmbedBuilder setTitle(@Nullable String title)
    {
        return setTitle(title, null);
    }","/**
     * Sets the Title of the embed.
     * <br>Overload for {@link #setTitle(String, String)} without URL parameter.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/04-setTitle.png"">Example</a></b>
     *
     * @param  title
     *         the title of the embed
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the provided {@code title} is an empty String.</li>
     *             <li>If the character limit for {@code title}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#TITLE_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#TITLE_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return the builder after the title has been set
     */",net.dv8tion.jda.api
"public Faction getFaction() {
        return this.faction;
    }","/**
     * Get the Faction involved in the event.
     *
     * @return faction involved in the event.
     */",com.massivecraft.factions.event
"public static Color of(final int red, final int green, final int blue) {
        if ((red & 0xFF) != red || (green & 0xFF) != green || (blue & 0xFF) != blue) {
            throw new IllegalArgumentException(""Illegal RGB arguments"" +
                    "" red=0x"" + Integer.toHexString(red) +
                    "" green=0x"" + Integer.toHexString(green) +
                    "" blue=0x"" + Integer.toHexString(blue));
        }

        return of((red << 16) | (green << 8) | blue);
    }","/**
     * Initializes a new instance of {@link Color} using the specified red, green, and blue values, which must be given
     * as integers in the range of 0-255.
     *
     * @param red The red component of the RGB value.
     * @param green The green component of the RGB value.
     * @param blue The blue component of the RGB value.
     */",discord4j.rest.util
"public Optional<Presence> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the {@link Presence} that was changed, if present.
     * This may not be available if {@code Presence} are not stored.
     *
     * @return The old version of the {@link Presence}, if present.
     */",discord4j.core.event.domain
"public Mono<Guild> createGuild(GuildCreateFromTemplateSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(() -> gateway.getRestClient().getTemplateService().createGuild(getCode(), spec.asRequest()))
                .map(data -> new Guild(gateway, data));
    }","/**
     * Requests to create a new guild from this template.
     *
     * @param spec an immutable object that specifies how to create a new guild from this template
     * @return A {@link Mono} where, upon successful completion, emits the {@link Guild created guild}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"static EmptyResponseTransformer emptyIfNotFound() {
        return new EmptyResponseTransformer(RouteMatcher.any(), ClientException.isStatusCode(404));
    }","/**
     * Transform every HTTP 404 status code into an empty response into an empty sequence, effectively suppressing
     * the {@link ClientException} that would be forwarded otherwise. See {@link #emptyIfNotFound(RouteMatcher)}
     * for an override that supports applying the transformation to a subset of requests.
     *
     * @return a {@link ResponseFunction} that transforms any HTTP 404 error into an empty sequence
     */",discord4j.rest.response
"public DiscordWebRequest bearerAuth(String accessToken) {
        this.authorizationScheme = AuthorizationScheme.BEARER;
        this.authorizationValue = accessToken;
        return this;
    }","/**
     * Use the given token as authentication value using the Bearer prefix.
     *
     * @param accessToken the bearer token to use
     * @return this request
     */",discord4j.rest.request
Snowflake getUserId();,"/**
     * Return the user ID who created this interaction.
     *
     * @return this interaction Snowflake user ID
     */",discord4j.rest.interaction
"@Nonnull
    @CheckReturnValue
    R mentionUsers(@Nonnull Collection<String> userIds);","/**
     * Used to provide a whitelist of {@link net.dv8tion.jda.api.entities.User Users} that should be pinged,
     * even when they would not be pinged otherwise according to the Set of allowed mention types.
     *
     * <p><b>Note:</b> When a User is whitelisted this way, then parsing of User mentions is automatically disabled.
     * <br>Also note that whitelisting users or roles implicitly disables parsing of other mentions, if not otherwise set via
     * {@link #setDefaultMentions(Collection)} or {@link #setAllowedMentions(Collection)}.
     *
     * @param  userIds
     *         Ids of Users that should be explicitly whitelisted to be pingable.
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The same instance for chaining
     *
     * @see    #setAllowedMentions(Collection)
     * @see    #setDefaultMentions(Collection)
     */",net.dv8tion.jda.api.utils.messages
"public static final Route GUILD_WIDGET_GET = Route.get(""/guilds/{guild.id}/widget"");","/**
     * Returns the guild widget object. Requires the 'MANAGE_GUILD' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-widget"">
     * https://discord.com/developers/docs/resources/guild#get-guild-widget</a>
     */",discord4j.rest.route
"@Nonnull
    EnumSet<Message.MentionType> getAllowedMentions();","/**
     * The mention types which are whitelisted.
     *
     * @return The mention types which can be mentioned by this message
     */",net.dv8tion.jda.api.utils.messages
long getSubscriptionIdLong();,"/**
         * The subscription listing id for this role. If a role has a subscription id then it is a premium role that 
         * can be acquired by users via purchase.
         *
         * @return The listing id, or 0 if this role is not for a subscription listing
         *
         * @see    #isAvailableForPurchase()
         */",net.dv8tion.jda.api.entities
"@Override
    public void setMatchNumber(final int matchNumber) {
        if (matchNumber >= 0) {
            this.matchNumber = matchNumber;
        } else {
            throw new IllegalStateException(""Match number must be greater than 0"");
        }
    }","/**
     * Set the minimum number of gesture that have to match the template to get a gesture recognized.
     *
     * @param matchNumber
     *            the number of templates.
     */",jestures.core.recognition.gesturedata
"public Mono<DiscordWebRequest> withAuthorizedClient(DiscordWebRequest request) {
        return getBearerToken().map(token -> request.copy().bearerAuth(token));
    }","/**
     * Prepare a given {@link DiscordWebRequest} on behalf of a user, using the credentials stored under this client.
     * The token fetching, refreshing (if required) and API request are run once this Mono is subscribed.
     *
     * @param request the compiled Discord REST API request to be run on behalf of a user
     * @return a Mono of a request including required steps to include proper authorization
     */",discord4j.oauth2
long getParentCategoryIdLong();,"/**
     * Get the snowflake of the {@link Category} that contains this channel.
     *
     * <p>This will return {@code 0} if this channel doesn't have a parent category.
     *
     * @return The Discord ID snowflake of the parent channel as a long.
     */",net.dv8tion.jda.api.entities.channel.attribute
private HttpServer httpServer = HttpServer.create();,"/**
     * Initialize a new builder.
     *
     * @return a builder capable of constructing instances of {@link DiscordOAuth2Server}
     */",discord4j.oauth2
"@Nullable
    public OffsetDateTime getNewEndTime()
    {
        return getNewValue();
    }","/**
     * The new {@link ScheduledEvent#getEndTime() end time}.
     *
     * @return The new start time, or {@code null} if the end time has been removed.
     */",net.dv8tion.jda.api.events.guild.scheduledevent.update
"@Nonnull
    static Button success(@Nonnull String id, @Nonnull Emoji emoji)
    {
        Checks.notEmpty(id, ""Id"");
        Checks.notNull(emoji, ""Emoji"");
        Checks.notLonger(id, ID_MAX_LENGTH, ""Id"");
        return new ButtonImpl(id, """", ButtonStyle.SUCCESS, false, emoji);
    }","/**
     * Creates a button with {@link ButtonStyle#SUCCESS SUCCESS} Style.
     * <br>The button is enabled and has no text label.
     * To use labels you can use {@code success(id, label).withEmoji(emoji)}
     *
     * <p>To disable the button you can use {@link #asDisabled()}.
     *
     * @param  id
     *         The custom button ID
     * @param  emoji
     *         The emoji to use as the button label
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any provided argument is null or empty.</li>
     *             <li>If the character limit for {@code id}, defined by {@link #ID_MAX_LENGTH} as {@value #ID_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
void setAutoReconnect(boolean shouldReconnect);,"/**
     * Sets whether audio connections from this AudioManager
     * should automatically reconnect or not. Default {@code true}
     *
     * @param shouldReconnect
     *        Whether audio connections from this AudioManager should automatically reconnect
     */",net.dv8tion.jda.api.managers
"Route.CompiledRoute route = Route.Messages.GET_MESSAGE_HISTORY.compile(channel.getId()).withQueryParams(""around"", messageId);","/**
     * Constructs a {@link net.dv8tion.jda.api.entities.MessageHistory MessageHistory} with the initially retrieved history
     * of messages sent around the mentioned message ID (inclusive).
     * <br>The provided ID need not be valid!
     *
     * <p>Alternatively you can use {@link net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#getHistoryAround(String, int) MessageChannel.getHistoryAround(...)}
     *
     * <p><b>Example</b>
     * <br>{@code MessageHistory history = MessageHistory.getHistoryAround(channel, messageId).limit(60).complete()}
     * <br>Will return a MessageHistory instance with the first 60 messages sent around the provided message ID.
     *
     * <p>Alternatively you can provide an epoch millisecond timestamp using {@link TimeUtil#getDiscordTimestamp(long) MiscUtil.getDiscordTimestamp(long)}:
     * <br><pre><code>
     * long timestamp = System.currentTimeMillis(); // or any other epoch millis timestamp
     * String discordTimestamp = Long.toUnsignedString(MiscUtil.getDiscordTimestamp(timestamp));
     * MessageHistory history = MessageHistory.getHistoryAround(channel, discordTimestamp).complete();
     * </code></pre>
     *
     * @param  channel
     *         The {@link net.dv8tion.jda.api.entities.channel.middleman.MessageChannel MessageChannel}
     * @param  messageId
     *         The pivot ID to use
     *
     * @throws java.lang.IllegalArgumentException
     *         If any of the provided arguments is {@code null};
     *         Or if the provided messageId contains whitespace
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If this is a TextChannel and the currently logged in account does not
     *         have the permission {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY Permission.MESSAGE_HISTORY}
     *
     * @return {@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction MessageRetrieveAction}
     *
     * @see    net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#getHistoryAround(String, int)  MessageChannel.getHistoryAround(String, int)
     * @see    net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#getHistoryAround(long, int)    MessageChannel.getHistoryAround(long, int)
     * @see    net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#getHistoryAround(Message, int) MessageChannel.getHistoryAround(Message, int)
     */",net.dv8tion.jda.api.entities
"public Publisher<?> onCategoryDelete(CategoryDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild channel category is deleted.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static GetUsersAction getUsers() {
        return new GetUsersAction();
    }","/**
     * Creates an action to retrieve data for all users present in a store.
     *
     * @return a new {@link GetUsersAction}
     */",discord4j.common.store.action.read
"public static final Route GUILD_CHANNEL_CREATE = Route.post(""/guilds/{guild.id}/channels"");","/**
     * Create a new channel object for the guild. Requires the 'MANAGE_CHANNELS' permission. Returns the new channel
     * object on success. Fires a Channel Create Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#create-guild-channel"">
     * https://discord.com/developers/docs/resources/guild#create-guild-channel</a>
     */",discord4j.rest.route
"public static ChannelCreateAction channelCreate(int shardIndex, ChannelCreate dispatch) {
        return new ChannelCreateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link ChannelCreate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link ChannelCreateAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    Component.Type getComponentType();","/**
     * The {@link Component.Type}
     *
     * @return The {@link Component.Type}
     */",net.dv8tion.jda.api.interactions.components
"@Nonnull
    @CheckReturnValue
    InviteAction setTargetApplication(final long applicationId);","/**
     * Sets the id of the targeted application.
     * <br>The invite has to point to a voice channel.
     * The invite will have the {@link Invite.TargetType#EMBEDDED_APPLICATION} target.
     *
     * @param applicationId
     *        The id of the embedded application to target or {@code 0} to remove
     *
     * @return The current InviteAction for chaining.
     */",net.dv8tion.jda.api.requests.restaction
"public Mono<ApplicationInfoData> getApplicationInfo() {
        return this.getApplicationService()
                .getCurrentApplicationInfo();
    }","/**
     * Requests to retrieve the application info.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link ApplicationInfoData}. If
     * an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest
boolean isAcknowledged();,"/**
     * Whether this interaction has already been acknowledged.
     * <br><b>Each interaction can only be acknowledged once.</b>
     *
     * @return True, if this interaction has already been acknowledged
     */",net.dv8tion.jda.api.interactions
"public static String forRole(final Snowflake id) {
        return ""<@&"" + id.asString() + "">"";
    }","/**
     * Gets a <i>raw</i> mention for a {@link Role}.
     *
     * <p>The use of this mention requires being permitted by the ""allowed mentions"" of any messages being sent.</p>
     *
     * <p>This is the format utilized to directly mention another role (assuming the
     * role exists in context of the mention).</p>
     *
     * @param id The id of the role to mention.
     * @return The <i>raw</i> mention.
     */",discord4j.core.util
"public static final Route GUILD_ONBOARDING_GET = Route.get(""/guilds/{guild.id}/onboarding"");","/**
     * Returns the Onboarding object for the guild.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-onboarding"">https://discord.com/developers/docs/resources/guild#get-guild-onboarding</a>
     */",discord4j.rest.route
"public Publisher<?> onAutoCompleteInteraction(AutoCompleteInteractionEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user starts an auto-complete interaction.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Deprecated
    public Mono<Category> edit(final Consumer<? super LegacyCategoryEditSpec> spec) {
        return Mono.defer(
                () -> {
                    LegacyCategoryEditSpec mutatedSpec = new LegacyCategoryEditSpec();
                    spec.accept(mutatedSpec);
                    return getClient().getRestClient().getChannelService()
                            .modifyChannel(getId().asLong(), mutatedSpec.asRequest(), mutatedSpec.getReason());
                })
                .map(data -> EntityUtil.getChannel(getClient(), data))
                .cast(Category.class);
    }","/**
     * Requests to edit this category.
     *
     * @param spec A {@link Consumer} that provides a ""blank"" {@link LegacyCategoryEditSpec} to be operated on.
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link Category}. If an error is
     * received, it is emitted through the {@code Mono}.
     * @deprecated use {@link #edit(CategoryEditSpec)}  or {@link #edit()} which offer an immutable approach to build
     * specs
     */",discord4j.core.object.entity.channel
"public static ActionRow of(List<? extends ActionComponent> components) {
        return new ActionRow(ComponentData.builder()
                .type(Type.ACTION_ROW.getValue())
                .components(components.stream().map(MessageComponent::getData).collect(Collectors.toList()))
                .build());
    }","/**
     * Creates an {@code ActionRow} with the given components.
     *
     * @param components The child components of the row.
     * @return An {@code ActionRow} containing the given components.
     */",discord4j.core.object.component
double getDtwRadius();,"/**
     * Get the {@link DynamicTimeWarping} radius.
     *
     * @return the window width of Sakoe-Chiba band in terms of percentage of sequence length.
     */",jestures.core.recognition.gesturedata
"public static final Route GUILD_STICKER_CREATE = Route.post(""/guilds/{guild.id}/stickers"");","/**
     * Create a new sticker for the guild. Send a multipart/form-data body. Requires the MANAGE_EMOJIS_AND_STICKERS permission. Returns the new sticker object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/sticker#create-guild-sticker"">
     * https://discord.com/developers/docs/resources/sticker#create-guild-sticker</a>
     */",discord4j.rest.route
"@Nullable
    String getInviteCode();","/**
     * Gets an invite code for the guild, or null if no invite channel is
     * enabled in the widget
     *
     * @throws IllegalStateException
     *         If the widget is not {@link #isAvailable() available}
     *
     * @return an invite code for the guild, if widget invites are enabled
     */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    MessageCreateAction failOnInvalidReply(boolean fail);","/**
     * Whether to throw a exception if the referenced message does not exist, when replying to a message.
     * <br>This only matters in combination with {@link #setMessageReference(Message)} and {@link #setMessageReference(long)}!
     *
     * <p>This is false by default but can be configured using {@link #setDefaultFailOnInvalidReply(boolean)}!
     *
     * @param  fail
     *         True, to throw a exception if the referenced message does not exist
     *
     * @return Updated MessageCreateAction for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    EntitlementPaginationAction skuIds(long... skuIds);","/**
     * Filters {@link Entitlement Entitlement}s by their SKU id
     *
     * @param skuIds
     *        The SKU ids to filter by
     *
     * @return The current {@link EntitlementPaginationAction EntitlementPaginationAction} for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.pagination
"public void receive() {
        getBuffer().get();
        getBuffer().get(); // skip first two bytes
        char sequence = getBuffer().getChar();
        int timestamp = getBuffer().getInt();
        int ssrc = getBuffer().getInt();
        byte[] audio = new byte[getBuffer().remaining()];
        getBuffer().get(audio);

        receive(sequence, timestamp, ssrc, audio);

        getBuffer().clear();
    }","/**
     * Called when audio is received. After reading, the implementor is expected to clear the buffer.
     */",discord4j.voice
void forceClose() throws IOException;,"/**
     * Forces the underlying resource to be closed, even if the file is already handled by a request.
     *
     * @throws IOException
     *         If an IOException is thrown while closing the resource
     */",net.dv8tion.jda.api.utils
"public LegacyVoiceChannelEditSpec setParentId(@Nullable Snowflake parentId) {
        requestBuilder.parentId(parentId == null ? Possible.of(Optional.empty()) : Possible.of(Optional.of(parentId.asString())));
        return this;
    }","/**
     * Sets the parent ID for the modified {@link VoiceChannel}.
     * <p>
     * The parent ID is equivalent to a {@link Category} ID.
     *
     * @param parentId The {@code Snowflake} of the parent {@code Category}.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    public CacheRestAction<Member> retrieveMember()
    {
        return getGuild().retrieveMemberById(getUserIdLong());
    }","/**
     * Retrieves the {@link Member} that subscribed or unsubscribed to the {@link ScheduledEvent ScheduledEvent}.
     * <br>If a member is known, this will return {@link #getMember()}.
     *
     * @return {@link RestAction} - Type: {@link Member}
     */",net.dv8tion.jda.api.events.guild.scheduledevent
"@Nonnull
    @CheckReturnValue
    R mention(@Nonnull Collection<? extends IMentionable> mentions);","/**
     * Used to provide a whitelist for {@link net.dv8tion.jda.api.entities.User Users}, {@link net.dv8tion.jda.api.entities.Member Members}
     * and {@link net.dv8tion.jda.api.entities.Role Roles} that should be pinged,
     * even when they would not be pinged otherwise according to the Set of allowed mention types.
     * <br>On other types of {@link net.dv8tion.jda.api.entities.IMentionable IMentionable}, this does nothing.
     *
     * <p><b>Note:</b> When a User/Member is whitelisted this way, then parsing of User mentions is automatically disabled (same applies to Roles).
     * <br>Also note that whitelisting users or roles implicitly disables parsing of other mentions, if not otherwise set via
     * {@link #setDefaultMentions(Collection)} or {@link #setAllowedMentions(Collection)}.
     *
     * @param  mentions
     *         Users, Members and Roles that should be explicitly whitelisted to be pingable.
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The same instance for chaining
     *
     * @see    #setAllowedMentions(Collection)
     * @see    #setDefaultMentions(Collection)
     */",net.dv8tion.jda.api.utils.messages
"public Publisher<?> onIntegrationDelete(IntegrationDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an integration has been deleted.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Optional<SessionInfo> getResumeSession() {
        return Optional.ofNullable(resumeSession);
    }","/**
     * Retrieve the {@link SessionInfo} that should be used to resume a Gateway session.
     *
     * @return the session details for resumption
     */",discord4j.gateway
"default void setStatus(@Nullable final OnlineStatus status)
    {
        this.setStatusProvider(id -> status);
    }","/**
     * Sets the {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} for all shards.
     *
     * <p>This will also change the status for shards that are created in the future.
     *
     * @param  status
     *         The {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus}
     *         to be used (OFFLINE/null {@literal ->} INVISIBLE)
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided OnlineStatus is {@link net.dv8tion.jda.api.OnlineStatus#UNKNOWN UNKNOWN}
     */",net.dv8tion.jda.api.sharding
"public String getBanned() {
        return banned;
    }","/**
     * Get the FPlayer ID of the player who got banned.
     *
     * @return FPlayer ID.
     */",com.massivecraft.factions.struct
"public Category getCurrent() {
        return current;
    }","/**
     * Get the current, new, version of the {@link Category} that has been updated in this event.
     *
     * @return The current version of the updated {@link Category}.
     */",discord4j.core.event.domain.channel
"default Flux<Id> getScheduledEventUsersInEvent(long guildId, long eventId) {
        return Flux.empty();
    }","/**
     * Retrieves data for all guild scheduled event users corresponding to the given guild ID and event ID.
     *
     * @param guildId the guild ID
     * @param eventId the event ID
     * @return A {@link Flux} emitting the scheduled event users ids, or empty if none is present
     * @since 3.2.5
     */",discord4j.common.store.api.layout
"public int getMaxUses() {
        return maxUses;
    }","/**
     * Gets the max number of times this invite can be used.
     *
     * @return The max number of times this invite can be used.
     */",discord4j.core.event.domain
"public Optional<AvatarDecoration> getAvatarDecoration() {
        return Optional.ofNullable(avatarDecoration);
    }","/**
     * Gets the user avatar decoration, if present.
     *
     * @return The user avatar decoration, if present.
     */",discord4j.core.event.domain.guild
"@Nonnull
    IPostContainer getChannel();","/**
     * The {@link IPostContainer} to create the post in
     *
     * @return The {@link IPostContainer}
     */",net.dv8tion.jda.api.requests.restaction
void unregister(@Nonnull Object listener);,"/**
     * Removes the specified listener
     *
     * @param listener
     *        The listener object to remove
     *
     * @throws java.lang.UnsupportedOperationException
     *         If the implementation does not support this method
     */",net.dv8tion.jda.api.hooks
"public static final Route GUILD_MODIFY = Route.patch(""/guilds/{guild.id}"");","/**
     * Modify a guild's settings. Returns the updated guild object on success. Fires a Guild Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#modify-guild"">
     * https://discord.com/developers/docs/resources/guild#modify-guild</a>
     */",discord4j.rest.route
B[] createArray(String... buffers);,"/**
     * Create an array of {@link threegpp.milenage.MilenageBuffer} objects.
     *
     * @param buffers  Array of hex strings where each element represents a contents of single buffer.
     * @return  Array of {@link MilenageBuffer} objects
     */",threegpp.milenage
"public static MessageUpdateAction messageUpdate(int shardIndex, MessageUpdate dispatch) {
        return new MessageUpdateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link MessageUpdate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link MessageUpdateAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    public List<MessageEmbed> getMessageEmbeds()
    {
        return embeds;
    }","/**
     * The list of {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbeds}
     *
     * @return The list of MessageEmbeds
     */",net.dv8tion.jda.api.events.message
"public Flux<CategorizableChannel> getChannels() {
        return getGuild().flatMapMany(Guild::getChannels)
                .ofType(CategorizableChannel.class)
                .filter(channel -> channel.getCategoryId().map(getId()::equals).orElse(false));
    }","/**
     * Requests to retrieve the channels residing in this category.
     *
     * @return A {@link Flux} that continually emits the {@link CategorizableChannel channels} residing in this category. If an
     * error is received, it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
"public static final Route GUILD_ROLES_GET = Route.get(""/guilds/{guild.id}/roles"");","/**
     * Returns a list of role objects for the guild. Requires the 'MANAGE_ROLES' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-roles"">
     * https://discord.com/developers/docs/resources/guild#get-guild-roles</a>
     */",discord4j.rest.route
"@Nullable
    public String getIconId()
    {
        return this.iconId;
    }","/**
     * The icon id of this guild.
     *
     * @return The guild's icon id
     *
     * @see    #getIconUrl()
     */",net.dv8tion.jda.api.entities.templates
"public int getCode() {
        return code;
    }","/**
     * Return the websocket close code.
     *
     * @return a websocket close code
     */",discord4j.common.close
"public ThreadMemberData getData() {
        return data;
    }","/**
     * Gets the data of the thread member.
     *
     * @return The data of the thread member.
     */",discord4j.core.object.entity
"@Nonnull
    default Guild getGuild()
    {
        return getScheduledEvent().getGuild();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Guild Guild} this
     * {@link ScheduledEvent ScheduledEvent} is in.
     * <br>This is logically the same as calling {@code getScheduledEvent().getGuild()}
     *
     * @return The parent {@link net.dv8tion.jda.api.entities.Guild Guild}
     */",net.dv8tion.jda.api.managers
"@Override
    public String toString() {
        return ""("" + getLeft() + ',' + getRight() + ')';
    }","/**
     * <p>Returns a String representation of this pair using the format {@code ($left,$right)}.</p>
     *
     * @return a string describing this object, not null
     */",net.dv8tion.jda.internal.utils.tuple
"@Deprecated
    public Mono<GuildTemplate> edit(final Consumer<? super LegacyGuildTemplateEditSpec> spec) {
        return Mono.defer(
                () -> {
                    LegacyGuildTemplateEditSpec mutatedSpec = new LegacyGuildTemplateEditSpec();
                    spec.accept(mutatedSpec);
                    return gateway.getRestClient().getTemplateService()
                            .modifyTemplate(guildId, getCode(), mutatedSpec.asRequest());
                })
                .map(data -> new GuildTemplate(gateway, data));
    }","/**
     * Requests to edit this guild template.
     *
     * @param spec A {@link Consumer} that provides a ""blank"" {@link LegacyGuildTemplateEditSpec} to be operated on.
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link GuildTemplate}. If an error is
     * received, it is emitted through the {@code Mono}.
     * @deprecated use {@link #edit(GuildTemplateEditSpec)} or {@link #edit()} which offer an immutable approach to
     * build specs
     */",discord4j.core.object
"@Nonnull
    @CheckReturnValue
    GuildManager setRulesChannel(@Nullable TextChannel rulesChannel);","/**
     * Sets the rules {@link net.dv8tion.jda.api.entities.channel.concrete.TextChannel TextChannel} of this {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  rulesChannel
     *         The new rules channel for this {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         or {@code null} to reset
     *
     * @throws IllegalArgumentException
     *         If the provided channel is not from this guild
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    default RestAction<Void> removeReactionById(long messageId, @Nonnull Emoji emoji, @Nonnull User user)
    {
        return removeReactionById(Long.toUnsignedString(messageId), emoji, user);
    }","/**
     * Attempts to remove the reaction from a message represented by the specified {@code messageId}
     * in this MessageChannel.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The request was attempted after the account lost access to the
     *         {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed, or after {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}
     *         was revoked in the {@link TextChannel TextChannel}
     *     <br>Also can happen if the account lost the {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY Permission.MESSAGE_HISTORY}</li>
     *
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The request was attempted after the account lost
     *         {@link net.dv8tion.jda.api.Permission#MESSAGE_ADD_REACTION Permission.MESSAGE_ADD_REACTION} in the
     *         {@link TextChannel TextChannel}.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI}
     *     <br>The provided unicode character does not refer to a known emoji unicode character.
     *     <br>Proper unicode characters for emojis can be found here:
     *         <a href=""https://unicode.org/emoji/charts/full-emoji-list.html"" target=""_blank"">Emoji Table</a></li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
     *         the message it referred to has already been deleted.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>The request was attempted after the channel was deleted.</li>
     * </ul>
     *
     * @param  messageId
     *         The messageId to remove the reaction from
     * @param  emoji
     *         The emoji to remove
     * @param  user
     *         The target user of which to remove from
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If provided {@code messageId} is {@code null} or empty.</li>
     *             <li>If provided {@code emoji} is {@code null}.</li>
     *         </ul>
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have
     *         {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE} in this channel.
     *
     * @return {@link net.dv8tion.jda.api.requests.RestAction}
     */",net.dv8tion.jda.api.entities.channel.middleman
"@Nonnull
        public ExecutorService getElastic()
        {
            return elastic;
        }","/**
         * The elastic {@link ExecutorService} used to execute rate-limit tasks.
         * <br>This pool can potentially scale up and down depending on use.
         *
         * <p>It is also possible that this pool is identical to {@link #getScheduler()}.
         *
         * @return The elastic {@link ExecutorService}
         */",net.dv8tion.jda.api.requests
"@Nonnull
    default String getMessageId()
    {
        return Long.toUnsignedString(getMessageIdLong());
    }","/**
     * The id of the message.
     *
     * @return The message id
     */",net.dv8tion.jda.api.interactions.components
"@Nonnull
    @CheckReturnValue
    RestAction<Void> clearReactionsById(@Nonnull String messageId, @Nonnull Emoji emoji);","/**
     * Removes all reactions for the specified emoji.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The currently logged in account lost access to the channel by either being removed from the guild
     *         or losing the {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI UNKNOWN_EMOJI}
     *     <br>The provided {@link Emoji} was deleted or doesn't exist.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The message was deleted.</li>
     * </ul>
     *
     * @param  messageId
     *         The id for the target message
     * @param  emoji
     *         The {@link Emoji} to remove reactions for
     *
     * @throws InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MESSAGE_MANAGE} in the channel
     * @throws IllegalArgumentException
     *         If provided with null
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.entities.channel.middleman
Mono<Long> countMessages();,"/**
     * Counts the number of messages present in the store.
     *
     * @return A {@link Mono} emitting the message count
     */",discord4j.common.store.api.layout
"public double asDouble() {
        try {
            return Double.parseDouble(asString());
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException(""Choice value cannot be converted to double"", e);
        }
    }","/**
     * Gets the value of this choice as a double.
     *
     * @return The value of this choice as a double.
     */",discord4j.core.object.command
"public LegacyRoleEditSpec setPermissions(PermissionSet permissions) {
        requestBuilder.permissions(permissions.getRawValue());
        return this;
    }","/**
     * Sets the new permissions for the {@link Role}.
     *
     * @param permissions The role permissions.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    ChannelAction<? extends ICopyableChannel> createCopy(@Nonnull Guild guild);","/**
     * Creates a copy of the specified {@link GuildChannel GuildChannel}
     * in the specified {@link net.dv8tion.jda.api.entities.Guild Guild}.
     * <br>If the provided target guild is not the same Guild this channel is in then
     * the parent category and permissions will not be copied due to technical difficulty and ambiguity.
     *
     * <p>This copies the following elements:
     * <ol>
     *     <li>Name</li>
     *     <li>Parent Category (if present)</li>
     *     <li>Voice Elements (Bitrate, Userlimit)</li>
     *     <li>Text Elements (Topic, NSFW, Slowmode)</li>
     *     <li>All permission overrides for Members/Roles</li>
     * </ol>
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
     * </ul>
     *
     * @param  guild
     *         The {@link net.dv8tion.jda.api.entities.Guild Guild} to create the channel in
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided guild is {@code null}
     * @throws net.dv8tion.jda.api.exceptions.PermissionException
     *         If the currently logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission
     *
     * @return A specific {@link ChannelAction ChannelAction}
     *         <br>This action allows to set fields for the new GuildChannel before creating it!
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    public EmbedBuilder setColor(int color)
    {
        this.color = color;
        return this;
    }","/**
     * Sets the raw RGB color value for the embed.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/02-setColor.png"" target=""_blank"">Example</a></b>
     *
     * @param  color
     *         The raw rgb value, or {@link Role#DEFAULT_COLOR_RAW} to use no color
     *
     * @return the builder after the color has been set
     *
     * @see    #setColor(java.awt.Color)
     */",net.dv8tion.jda.api
"@Nonnull
    @CheckReturnValue
    default MessageEditAction editMessageAttachmentsById(@Nonnull String messageId, @Nonnull Collection<? extends AttachedFile> attachments)
    {
        Checks.isSnowflake(messageId, ""Message ID"");
        return new MessageEditActionImpl(this, messageId).setAttachments(attachments);
    }","/**
     * Attempts to edit a message by its id in this MessageChannel.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#REQUEST_ENTITY_TOO_LARGE REQUEST_ENTITY_TOO_LARGE}
     *     <br>If any of the provided files is bigger than {@link Guild#getMaxFileSize()}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_AUTHOR_EDIT INVALID_AUTHOR_EDIT}
     *     <br>Attempted to edit a message that was not sent by the currently logged in account.
     *         Discord does not allow editing of other users' Messages!</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The request was attempted after the account lost access to the {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed, or after {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}
     *         was revoked in the {@link GuildMessageChannel}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
     *         the message it referred to has already been deleted. This might also be triggered for ephemeral messages.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>The request was attempted after the channel was deleted.</li>
     * </ul>
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * @param  messageId
     *         The message id. For interactions this supports {@code ""@original""} to edit the source message of the interaction.
     * @param  attachments
     *         The new attachments of the message (Can be {@link FileUpload FileUploads} or {@link net.dv8tion.jda.api.utils.AttachmentUpdate AttachmentUpdates})
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link MessageEditAction} that can be used to further update the message
     *
     * @see    AttachedFile#fromAttachment(Message.Attachment)
     * @see    FileUpload#fromData(InputStream, String)
     */",net.dv8tion.jda.api.entities.channel.middleman
"String sanitized = MarkdownSanitizer.escape(input, ~MarkdownSanitizer.UNDERLINE);","/**
     * Escapes already existing underline regions in the input
     * and applies underline formatting to the entire string.
     * <br>The resulting string will be {@code ""__"" + escaped(input) + ""__""}.
     *
     * @param  input
     *         The input to underline
     *
     * @return The resulting output
     */",net.dv8tion.jda.api.utils
"@Nullable
    default StageChannel getStageChannelById(long id)
    {
        return (StageChannel) getChannelCache().getElementById(ChannelType.STAGE, id);
    }","/**
     * Gets a {@link StageChannel StageChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link StageChannel StageChannel}.
     *
     * @return Possibly-null {@link StageChannel StageChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Override
	public DtoCollection<Assignment> findAll() {
		return new DtoCollection<>(Collections.unmodifiableList(this.rep.findAll()));
	}","/**
	 * @return: all assignments
	 */",com.pfa.app.service.impl
"public static RestGuildTemplate create(RestClient restClient, String code) {
        return new RestGuildTemplate(restClient, code);
    }","/**
     * Create a {@link RestGuildTemplate} with the given code. This method does not perform any API request.
     *
     * @param restClient REST API resources
     * @param code the template's code
     * @return a {@code RestTemplate} represented by the given code.
     */",discord4j.rest.entity
"Mono<?> onAuthSuccess(DiscordOAuth2Client client, String sessionId);","/**
     * Invoked once a user completes an authorization code grant request for your OAuth2 application.
     *
     * @param client the authorized user client registration, allowing to perform API request on behalf of this user
     * @param sessionId a session identifier used by the server
     * @return a Mono signaling completion of the success handler, errors thrown are logged and discarded by the server
     */",discord4j.oauth2
"public Set<GuildEmoji> getEmojis() {
        return emojis;
    }","/**
     * Gets a list of ALL emojis of the {@link Guild}.
     *
     * @return A list of ALL emojis of the {@link Guild}.
     */",discord4j.core.event.domain.guild
"public Flux<UserGuildData> getCurrentUserGuilds(Map<String, Object> queryParams) {
        return exchange(Routes.CURRENT_USER_GUILDS_GET.newRequest().query(queryParams), UserGuildData[].class)
                .flatMapMany(Flux::fromArray);
    }","/**
     * Returns a list of partial guild objects the requesting account is a member of. Requires the
     * {@link Scope#GUILDS} scope.
     *
     * @param queryParams optional query parameters for this endpoint, allowing pagination using {@code before},
     * {@code after} and {@code limit} (defaults to 200)
     * @return a Flux with partial guild information for the user, otherwise an error Flux
     */",discord4j.oauth2
"default InviteCreateMono createInvite() {
        return InviteCreateMono.of(this);
    }","/**
     * Requests to create an invite. Properties specifying how to create the invite can be set via the {@code withXxx }
     * methods of the returned {@link InviteCreateMono}.
     *
     * @return A {@link InviteCreateMono} where, upon successful completion, emits the created {@link ExtendedInvite}.
     * If an error is received, it is emitted through the {@code InviteCreateMono}.
     */",discord4j.core.object.entity.channel
"@SuppressWarnings(""unchecked"")
	public static void register(@SuppressWarnings(""rawtypes"") Map tagletMap) {
		WRParamTaglet tag = new WRParamTaglet();
		Taglet t = (Taglet) tagletMap.get(tag.getName());
		if (t != null) {
			tagletMap.remove(tag.getName());
		}
		tagletMap.put(tag.getName(), tag);
	}","/**
	 * Register this Taglet.
	 * 
	 * @param tagletMap
	 *            the map to register this tag to.
	 */",net.winroad.wrdoclet.taglets
"public long getOldDenyRaw()
    {
        return oldDeny;
    }","/**
     * The old denied permissions as a raw bitmask.
     *
     * @return The old denied permissions
     */",net.dv8tion.jda.api.events.guild.override
"public static final Route USER_DM_CREATE = Route.post(""/users/@me/channels"");","/**
     * Create a new DM channel with a user. Returns a DM channel object.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/user#create-dm"">
     * https://discord.com/developers/docs/resources/user#create-dm</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    default PermissionOverrideAction setDenied(@Nullable Permission... permissions)
    {
        if (permissions == null || permissions.length == 0)
            return setDenied(0);
        Checks.noneNull(permissions, ""Permissions"");
        return setDenied(Permission.getRaw(permissions));
    }","/**
     * Sets the value of explicitly denied permissions
     * using a set of {@link net.dv8tion.jda.api.Permission Permissions}.
     * <br><b>Note: Permissions not marked as {@link net.dv8tion.jda.api.Permission#isChannel() isChannel()} will have no affect!</b>
     *
     * @param  permissions
     *         The Permissions representing the denied
     *         permissions for the new PermissionOverride.
     *         <br>If the provided value is {@code null} the permissions are reset to the default of none
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     * @throws java.lang.IllegalArgumentException
     *         If the any of the specified Permissions is {@code null}
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
Mono<Long> countVoiceStates();,"/**
     * Counts the number of voice states present in the store.
     *
     * @return A {@link Mono} emitting the voice state count
     */",discord4j.common.store.api.layout
"@Nullable
    public String getOldBannerUrl()
    {
        return previous == null ? null : String.format(Guild.BANNER_URL, guild.getId(), previous, previous.startsWith(""a_"") ? ""gif"" : ""png"");
    }","/**
     * The old banner url
     *
     * @return The old banner url, or null if the banner didn't exist
     */",net.dv8tion.jda.api.events.guild.update
"public VoiceReactorResources(HttpClient httpClient, Scheduler timerTaskScheduler, Scheduler blockingTaskScheduler,
                                 UdpClient udpClient, Scheduler sendTaskScheduler, Scheduler receiveTaskScheduler) {
        super(httpClient, timerTaskScheduler, blockingTaskScheduler);
        this.udpClient = udpClient;
        this.sendTaskScheduler = sendTaskScheduler;
        this.receiveTaskScheduler = receiveTaskScheduler;
    }","/**
     * Create Voice Gateway resources allowing full customization of its properties.
     *
     * @param httpClient the HTTP client to use for initiating Gateway websocket connections. A default is provided
     * in {@link ReactorResources#DEFAULT_HTTP_CLIENT}
     * @param timerTaskScheduler the scheduler for timed tasks. A default can be created from
     * {@link ReactorResources#DEFAULT_TIMER_TASK_SCHEDULER}
     * @param blockingTaskScheduler the scheduler for blocking tasks. A default can be created from
     * {@link ReactorResources#DEFAULT_BLOCKING_TASK_SCHEDULER}
     * @param udpClient the UDP client used to create voice protocol connections
     * @param sendTaskScheduler the scheduler used to run the voice send loop
     * @param receiveTaskScheduler the scheduler used to run the voice receive loop
     */",discord4j.voice
boolean canSync(@Nonnull IPermissionContainer channel);,"/**
     * Whether the permissions of this PermissionHolder are good enough to sync the target channel with any other channel.
     * <br>This checks whether the permission holder has <em>local administrator</em>.
     *
     * <p>If the permission holder had {@link Permission#MANAGE_PERMISSIONS} in an override on the target channel or {@link Permission#ADMINISTRATOR} on one of its roles, then it can set any permission on the target channel.
     *
     * @param  channel
     *         The target channel to check
     *
     * @throws IllegalArgumentException
     *         If the channel is null or not from the same guild as this permission holder
     *
     * @return True, if the channel can be synced
     */",net.dv8tion.jda.api.entities
"public static GatewayReactorResources.Builder builder(ReactorResources reactorResources) {
        return builder()
                .httpClient(reactorResources.getHttpClient())
                .timerTaskScheduler(reactorResources.getTimerTaskScheduler())
                .blockingTaskScheduler(reactorResources.getBlockingTaskScheduler());
    }","/**
     * Returns a new builder to create {@link GatewayReactorResources} from a pre-configured {@link ReactorResources},
     * copying its settings.
     *
     * @return a builder to create {@link GatewayReactorResources} with settings copied from parent resources
     */",discord4j.gateway
"Mono<Member> getMemberById(Snowflake guildId, Snowflake userId);","/**
     * Requests to retrieve the member represented by the supplied IDs. Depending on the implementation, it is possible
     * to lazily request member entities from the Gateway, or the REST API.
     *
     * @param guildId The ID of the guild.
     * @param userId  The ID of the user.
     * @return A {@link Mono} where, upon successful completion, emits the {@link Member} as represented by the supplied
     *         IDs. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
boolean isSkipped();,"/**
         * Whether the request should be skipped.
         * <br>This can be caused by user cancellation.
         *
         * <p>The rate-limiter should handle by simply discarding the task without further action.
         *
         * @return True, if this request is skipped
         */",net.dv8tion.jda.api.requests
boolean isPriority();,"/**
         * Requests marked as priority should not be cancelled.
         *
         * @return True, if this request is marked as priority
         */",net.dv8tion.jda.api.requests
Flux<T> requests();,"/**
     * Exposes a Flux that continuously emits requests available in queue.
     *
     * @return a Flux of requests.
     */",discord4j.rest.request
"@Nullable
    String getValue();","/**
     * The pre-defined value of this TextInput component.
     * <br>If this is not null, sending a Modal with this component will pre-populate the field with this String.
     *
     * <p><b>This is null if no pre-defined value has been set!</b>
     *
     * @return The value of this TextInput component or null.
     */",net.dv8tion.jda.api.interactions.components.text
"@Nonnull
    @CheckReturnValue
    default WebhookMessageCreateAction<T> createThread(@Nonnull String threadName, @Nonnull ForumTagSnowflake... tags)
    {
        return createThread(new ThreadCreateMetadata(threadName).addTags(tags));
    }","/**
     * Create a new thread channel for this webhook message.
     * <br>This is currently limited to forum channels.
     * <br>Does nothing if a {@link #setThread(ThreadChannel) target thread} is already configured.
     *
     * <p>This cannot be used with {@link net.dv8tion.jda.api.interactions.InteractionHook InteractionHooks}!
     *
     * @param  threadName
     *         The thread title
     * @param  tags
     *         The tags to apply to this forum post
     *
     * @throws IllegalStateException
     *         If this is an interaction webhook
     * @throws IllegalArgumentException
     *         If null is provided or the name is not between 1 and 80 characters long
     *
     * @return The same message action, for chaining convenience
     *
     * @see    #createThread(ThreadCreateMetadata)
     */",net.dv8tion.jda.api.requests.restaction
"public DiscordWebRequest query(String key, Object value) {
        if (queryParams == null) {
            queryParams = new Multimap<>();
        }
        queryParams.add(key, value);
        return this;
    }","/**
     * Add the given name and value as a request query parameter.
     *
     * @param key the query parameter name
     * @param value the query parameter value
     * @return this request
     */",discord4j.rest.request
"private static List<String> tipPlayer(FPlayer fplayer) {
        List<String> lines = new ArrayList<>();
        for (String line : SavageFactions.plugin.getConfig().getStringList(""tooltips.show"")) {
            lines.add(ChatColor.translateAlternateColorCodes('&', TagUtil.parsePlain(fplayer, line)));
        }
        return lines;
    }","/**
     * Parses tooltip variables from config <br> Supports variables for players and factions (types 1 and 2)
     *
     * @param fplayer player to tooltip for
     * @return list of tooltips for a fancy message
     */",com.massivecraft.factions.zcore.util
Mono<Member> getSelfMember(Snowflake guildId);,"/**
     * Requests to retrieve the bot user represented as a {@link Member member} of the guild with the supplied ID.
     * @param guildId The ID of the guild.
     * @return A {@link Mono} where, upon successful completion, emits the bot {@link Member member}. If an error is
     *         received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
"public static final Route END_POLL = Route.post(""/channels/{channel.id}/polls/{message.id}/expire"");","/**
     * Request to end a poll early. This will end the poll and return the final results.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/poll#end-poll"">https://discord.com/developers/docs/resources/poll#end-poll</a>
     */",discord4j.rest.route
"public Instant getCreatedAt() {
        return DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(data.createdAt(), Instant::from);
    }","/**
     * Gets when the template was created.
     *
     * @return When the template was created.
     */",discord4j.core.object
"public List<Snowflake> getRemovedMemberIds() {
        return dispatch.removedMemberIds().toOptional().orElse(Collections.emptyList()).stream()
                .map(Snowflake::of).collect(Collectors.toList());
    }","/**
     * Returns a list of user IDs who were removed from the thread.
     *
     * @return a list of {@link Snowflake} user IDs who were removed from the thread
     */",discord4j.core.event.domain.thread
"@Nonnull
    public static DefaultMemberPermissions enabledFor(@Nonnull Permission... permissions)
    {
        return enabledFor(Arrays.asList(permissions));
    }","/**
     * Returns a DefaultMemberPermissions instance with the predefined permissions a member must have to see and access a command.
     *
     * <br><b>If the passed Array is empty, this returns {@link DefaultMemberPermissions#ENABLED ENABLED}</b>
     *
     * @param  permissions
     *         Vararg of {@link Permission Permissions}
     *
     * @throws IllegalArgumentException
     *         If any of the passed Permission is null
     *
     * @return DefaultMemberPermissions instance with the predefined permissions
     */",net.dv8tion.jda.api.interactions.commands
"Mono<MemberData> onGuildMemberUpdate(int shardIndex, GuildMemberUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link GuildMemberUpdate} gateway dispatch.
     * This will typically perform an update operation on a related {@link MemberData} that is already present in
     * the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link MemberData} before the update
     */",discord4j.common.store.api.layout
"@Nonnull
    SnowflakeCacheView<StageChannel> getStageChannelCache();","/**
     * Sorted {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView} of {@link StageChannel}.
     * <br>In {@link Guild} cache, channels are sorted according to their position and id.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return {@link net.dv8tion.jda.api.utils.cache.SortedSnowflakeCacheView SortedSnowflakeCacheView}
     */",net.dv8tion.jda.api.entities.channel.attribute
"public static GetAutoModRulesInGuildAction getAutoModRulesInGuild(long guildId) {
        return new GetAutoModRulesInGuildAction(guildId);
    }","/**
     * Creates an action to retrieve data for all automod rules present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link GetAutoModRulesInGuildAction}
     */",discord4j.common.store.action.read
"@Nonnull
    public EmbedBuilder addBlankField(boolean inline)
    {
        this.fields.add(new MessageEmbed.Field(ZERO_WIDTH_SPACE, ZERO_WIDTH_SPACE, inline));
        return this;
    }","/**
     * Adds a blank (empty) Field to the embed.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/07-addField.png"">Example of Inline</a></b>
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/08-addField.png"">Example of Non-inline</a></b>
     *
     * @param  inline
     *         whether or not this field should display inline
     *
     * @return the builder after the field has been added
     */",net.dv8tion.jda.api
"default boolean isOpus()
    {
        return false;
    }","/**
     * If this method returns true JDA will treat the audio data provided by {@link #provide20MsAudio()} as a pre-encoded
     * 20 Millisecond packet of Opus audio. This means that JDA <b>WILL NOT</b> attempt to encode the audio as Opus, but
     * will provide it to Discord <b>exactly as it is given</b>.
     *
     * @return If true, JDA will not attempt to encode the provided audio data as Opus.
     *         <br>Default - False.
     */",net.dv8tion.jda.api.audio
"@Nonnull
    @CheckReturnValue
    CommandEditAction clearOptions();","/**
     * Removes all existing options/subcommands/groups from this command.
     *
     * @return The CommandEditAction instance, for chaining
     */",net.dv8tion.jda.api.requests.restaction
"public Mono<UserData> getCurrentUser() {
        return exchange(Routes.CURRENT_USER_GET.newRequest(), UserData.class);
    }","/**
     * Returns the user object of the requesting account. For OAuth2, this requires the {@link Scope#IDENTIFY}
     * scope, which will return the object without an email, and optionally the {@link Scope#EMAIL} scope, which returns
     * the object with an email.
     *
     * @return a Mono with user details if successful, otherwise an error Mono
     */",discord4j.oauth2
"public static final Route GUILD_TEMPLATE_LIST_GET = Route.get(""/guilds/{guild.id}/templates"");","/**
     * Returns an array of template objects. Requires the MANAGE_GUILD permission. Returns an array of template objects.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/template#get-guild-templates"">
     *         https://discord.com/developers/docs/resources/template#get-guild-templates</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    WebhookManager setName(@Nonnull String name);","/**
     * Sets the <b><u>default name</u></b> of the selected {@link net.dv8tion.jda.api.entities.Webhook Webhook}.
     *
     * <p>A webhook name <b>must not</b> be {@code null} or blank!
     *
     * @param  name
     *         The new default name for the selected {@link net.dv8tion.jda.api.entities.Webhook Webhook}
     *
     * @throws IllegalArgumentException
     *         If the provided name is {@code null} or blank
     *
     * @return WebhookManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    MessageCreateAction sendStickers(@Nonnull Collection<? extends StickerSnowflake> stickers);","/**
     * Send up to 3 stickers in this channel.
     * <br>Bots can only send {@link GuildSticker GuildStickers} from the same {@link net.dv8tion.jda.api.entities.Guild}.
     * Bots cannot use {@link net.dv8tion.jda.api.entities.sticker.StandardSticker StandardStickers}.
     *
     * @param  stickers
     *         Collection of 1-3 stickers to send
     *
     * @throws MissingAccessException
     *         If the currently logged in account does not have {@link Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} in this channel
     * @throws InsufficientPermissionException
     *         <ul>
     *           <li>If this is a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND_IN_THREADS Permission.MESSAGE_SEND_IN_THREADS}</li>
     *           <li>If this is not a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND Permission.MESSAGE_SEND}</li>
     *         </ul>
     * @throws IllegalArgumentException
     *         <ul>
     *           <li>If any of the provided stickers is a {@link GuildSticker},
     *               which is either {@link GuildSticker#isAvailable() unavailable} or from a different guild.</li>
     *           <li>If the list is empty or has more than 3 stickers</li>
     *           <li>If null is provided</li>
     *         </ul>
     *
     * @return {@link MessageCreateAction}
     *
     * @see    Sticker#fromId(long)
     */",net.dv8tion.jda.api.entities.channel.middleman
"@Nonnull
    @CheckReturnValue
    WebhookMessageCreateAction<T> setAvatarUrl(@Nullable String iconUrl);","/**
     * Set the apparent avatar for the message author.
     * <br>This changes the avatar that is shown for the message author.
     *
     * <p>This cannot be used with {@link net.dv8tion.jda.api.interactions.InteractionHook InteractionHooks}!
     *
     * @param  iconUrl
     *         The URL to the avatar, or null to use default
     *
     * @throws IllegalStateException
     *         If this is an interaction webhook
     *
     * @return The same message action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public LegacyGuildPruneCountSpec addRoles(Collection<Snowflake> roleIds) {
        map.addAll(""include_roles"", roleIds.stream().map(Snowflake::asString).collect(Collectors.toList()));
        return this;
    }","/**
     * Include multiple roles in the prune count request. By default, prune will not remove users with roles,
     * therefore this method can be used to include such users.
     *
     * @param roleIds the role IDs to include
     * @return this spec
     */",discord4j.core.spec.legacy
"public static MessageReactionRemoveAction messageReactionRemove(int shardIndex, MessageReactionRemove dispatch) {
        return new MessageReactionRemoveAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link MessageReactionRemove} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link MessageReactionRemoveAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    @CheckReturnValue
    GuildManager addFeatures(@Nonnull Collection<String> features);","/**
     * Adds a {@link Guild#getFeatures() Guild Feature} to the list of features.
     * <br>The list of available features, including which ones can be configured, is available in the
     * <a href=""https://discord.com/developers/docs/resources/guild#guild-object-guild-features"" target=""_blank"">Official Discord API Documentation</a>.
     *
     * @param  features
     *         The features to add
     *
     * @throws IllegalArgumentException
     *         If any of the provided features is null
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
        OnlineStatus getOnlineStatus();","/**
         * Gets the online status of the member. The widget does not show
         * offline members, so this status should never be offline
         * 
         * @return the {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} of the member
         */",net.dv8tion.jda.api.entities
"public DiscordWebResponse exchange(Router router) {
        return router.exchange(this);
    }","/**
     * Exchange this request through the given {@link Router}.
     *
     * @param router a router that performs this request
     * @return the result of this request
     */",discord4j.rest.request
"public boolean isSelfVideoEnabled() {
        return data.selfVideo();
    }","/**
     * Gets whether this user's camera is enabled.
     *
     * @return {@code true} if this user's camera is enabled, {@code false} otherwise.
     */",discord4j.core.object
"public RestUser getUserById(final Snowflake userId) {
        return RestUser.create(this, userId);
    }","/**
     * Requests to retrieve the user represented by the supplied ID.
     *
     * @param userId The ID of the user.
     * @return A {@link RestUser} as represented by the supplied ID.
     */",discord4j.rest
"@Nonnull
    public Activity getOldActivity()
    {
        return oldActivity;
    }","/**
     * The old activity
     *
     * @return The old activity
     */",net.dv8tion.jda.api.events.user
"public Mono<Void> delete(@Nullable final String reason) {
        return gateway.getRestClient().getStickerService()
            .deleteGuildSticker(getGuildId().asLong(), getId().asLong(), reason);
    }","/**
     * Requests to delete this sticker while optionally specifying a reason.
     *
     * @param reason The reason, if present.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the sticker has been deleted.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"public LegacyVoiceChannelEditSpec setBitrate(int bitrate) {
        requestBuilder.bitrate(bitrate);
        return this;
    }","/**
     * Sets the bitrate for the modified {@link VoiceChannel}.
     *
     * @param bitrate The maximum amount of bits to send per second in the voice channel, related to the quality of
     * audio. A valid bitrate is a number from 8 to 96.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Optional<Member> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the {@link Member} involved in the event, if present.
     * This may not be available if {@code Members} are not stored.
     *
     * @return the old version of the {@link Member} involved, if present.
     */",discord4j.core.event.domain.guild
void setUserGestureLength(GestureLength length) throws IOException;,"/**
     * Set the user gesture length.
     *
     * @param length
     *            the gesture length
     * @throws IOException
     *             ioexception
     */",recorder.controller
"public boolean isSuppressed() {
        return data.suppress();
    }","/**
     * Gets whether this user is muted by the current user.
     *
     * @return {@code true} if this user is muted by the current user, {@code false} otherwise.
     */",discord4j.core.object
"public static final Route GUILD_VOICE_REGIONS_GET = Route.get(""/guilds/{guild.id}/regions"");","/**
     * Returns a list of voice region objects for the guild. Unlike the similar /voice route, this returns VIP servers
     * when the guild is VIP-enabled.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-voice-regions"">
     * https://discord.com/developers/docs/resources/guild#get-guild-voice-regions</a>
     */",discord4j.rest.route
"@Nonnull
    public OptionType getType()
    {
        return type;
    }","/**
     * The expected option type for this query.
     *
     * @return The option type expected from this auto-complete response
     */",net.dv8tion.jda.api.interactions
"public Optional<GuildUpdateData> getGuild() {
        return data.guild().toOptional();
    }","/**
     * Return information about the guild to which your bot was added, available when authorizing a user with a
     * {@link Scope#BOT} scope.
     *
     * @return a data object with the guild joined by your bot
     * @see <a href=""https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization"">Discord</a>
     */",discord4j.oauth2.object
"public static final Comparator<TopLevelGuildChannel> CHANNEL_ORDER =
            Comparator.comparing(TopLevelGuildChannel::getRawPosition).thenComparing(GuildChannel::getId);","/**
     * The base ordering of Discord {@link GuildChannel guild channels}.
     * <p>
     * In Discord, two orderable entities may have the same ""raw position,"" the position as reported by the ""position"" field.
     * This conflict is resolved by comparing the creation time of the entities, reflected in their {@link Snowflake IDs}.
     * <p>
     * Note that this order is only applicable to channels if they are of the same type and in the same category. See
     * {@link #BUCKETED_CHANNEL_ORDER} for ordering between different channel types.
     */",discord4j.core.util
"public static StackPane createPopupContent(final JFXTextField textField) {
        final StackPane stackPane = new StackPane(textField);
        stackPane.setId(""stackPanePopup"");
        return stackPane;
    }","/**
     * Create the stackpane for popup.
     *
     * @param textField
     *            the {@link TextField}
     * @return the {@link StackPane}
     */",jestures.core.view.utils
"public LegacyGuildEditSpec setPreferredLocale(@Nullable Locale preferredLocale) {
        requestBuilder.preferredLocale(Possible.of(Optional.ofNullable(preferredLocale).map(Locale::toLanguageTag)));
        return this;
    }","/**
     * Sets the preferred locale of a Community guild used in server discovery and notices from Discord;
     * defaults to ""en-US"".
     *
     * @param preferredLocale The preferred locale of a Community guild used in server discovery and notices from Discord.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    static IncomingWebhookClient createClient(@Nonnull JDA api, @Nonnull String webhookId, @Nonnull String webhookToken)
    {
        Checks.notNull(api, ""JDA"");
        Checks.notBlank(webhookToken, ""Token"");
        return new IncomingWebhookClientImpl(MiscUtil.parseSnowflake(webhookId), webhookToken, api);
    }","/**
     * Creates an instance of {@link IncomingWebhookClient} capable of executing webhook requests.
     * <p>Messages created by this client may not have a fully accessible channel or guild available.
     * The messages might report a channel of type {@link net.dv8tion.jda.api.entities.channel.ChannelType#UNKNOWN UNKNOWN},
     * in which case the channel is assumed to be inaccessible and limited to only webhook requests.
     *
     * @param  api
     *         The JDA instance, used to handle rate-limits
     * @param  webhookId
     *         The id of the webhook, for interactions this is the application id
     * @param  webhookToken
     *         The token of the webhook, for interactions this is the interaction token
     *
     * @throws IllegalArgumentException
     *         If null is provided or the provided webhook id is not a valid snowflake or the token is blank
     *
     * @return The {@link IncomingWebhookClient} instance
     *
     * @see    InteractionHook#from(JDA, String)
     */",net.dv8tion.jda.api.entities
"public Builder filter(Predicate<ShardInfo> shardFilter) {
            this.shardFilter = Objects.requireNonNull(shardFilter);
            return this;
        }","/**
         * Set a filter to determine which shards should be accepted for identifying to Discord Gateway. Defaults to
         * connecting to all shards given by shard count.
         *
         * @param shardFilter a {@link Predicate} for {@link ShardInfo} objects. Called for each shard determined by
         * {@link #count(int)} and schedules it for connection if returning {@code true}.
         * @return this builder
         */",discord4j.core.shard
"@Nonnull
    @CheckReturnValue
    AccountManager setName(@Nonnull String name);","/**
     * Sets the username for the currently logged in account
     *
     * @param  name
     *         The new username
     *
     * @throws IllegalArgumentException
     *         If the provided name is:
     *         <ul>
     *             <li>Equal to {@code null}</li>
     *             <li>Less than {@code 2} or more than {@code 32} characters in length</li>
     *         </ul>
     *
     * @return AccountManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public Mono<AudioChannel> getChannel() {
        return Mono.justOrEmpty(getChannelId()).flatMap(gateway::getChannelById).cast(AudioChannel.class);
    }","/**
     * Requests to retrieve the audio channel this user is connected to, if present.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link AudioChannel} this user is connected
     * to, if present. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"public Mono<User> getUser() {
        return gateway.getUserById(getUserId());
    }","/**
     * Requests to retrieve the user this voice state is for.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link User} this voice state is for. If an
     * error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nullable
    default <T extends C> T getChannelById(@Nonnull Class<T> type, long id)
    {
        Checks.notNull(type, ""Class"");
        return getChannelCache().ofType(type).getElementById(id);
    }","/**
     * Get a channel of the specified type by id.
     *
     * <p>This will automatically check for all channel types and cast to the specified class.
     * If a channel with the specified id does not exist,
     * or exists but is not an instance of the provided class, this returns null.
     *
     * @param  type
     *         {@link Class} of a channel type
     * @param  id
     *         The snowflake id of the channel
     * @param  <T>
     *         The type argument for the class
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The casted channel, if it exists and is assignable to the provided class, or null
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nullable
    public String getTopic()
    {
        return this.topic;
    }","/**
     * The topic set for this TemplateChannel.
     * <br>If no topic has been set or the {@link ChannelType ChannelType}
     * <b>is not {@link ChannelType#TEXT TEXT}</b>, this returns {@code null}.
     *
     * @return Possibly-null String containing the topic of this TemplateChannel.
     */",net.dv8tion.jda.api.entities.templates
DiscordWebResponse exchange(DiscordWebRequest request);,"/**
     * Queues a request for execution.
     *
     * @param request the request to queue.
     * @return a {@link DiscordWebResponse} specifying a contract to operate on the response
     */",discord4j.rest.request
"public static void say(String format, Object... args) {
    Terminal.getInstance().writeLine(format, args);
  }","/**
   * Displays a formatted message.
   *
   * @param format the format
   * @param args   the args
   */",io.github.augustoravazoli.termenu.util
"@SuppressWarnings(""unchecked"")
	public static void register(@SuppressWarnings(""rawtypes"") Map tagletMap) {
		WRTagTaglet tag = new WRTagTaglet();
		Taglet t = (Taglet) tagletMap.get(tag.getName());
		if (t != null) {
			tagletMap.remove(tag.getName());
		}
		tagletMap.put(tag.getName(), tag);
	}","/**
	 * Register this Taglet.
	 * 
	 * @param tagletMap
	 *            the map to register this tag to.
	 */",net.winroad.wrdoclet.taglets
"@Nonnull
        String getEffectiveAvatarUrl();","/**
         * The URL for the user's avatar image
         * <br>If they do not have an avatar set, this will return the URL of their
         * default avatar
         * 
         * @return Never-null String containing the member's effective avatar url.
         */",net.dv8tion.jda.api.entities
"public int getChunkCount() {
        return chunkCount;
    }","/**
     * Gets the total number of expected chunks for this response.
     *
     * @return The total number of expected chunks for this response.
     */",discord4j.core.event.domain.guild
"public Builder timerTaskScheduler(Scheduler timerTaskScheduler) {
            this.timerTaskScheduler = timerTaskScheduler;
            return this;
        }","/**
         * Sets the time-capable {@link Scheduler} to use. A default can be created from
         * {@link ReactorResources#DEFAULT_TIMER_TASK_SCHEDULER}.
         *
         * @return This builder, for chaining.
         */",discord4j.common
"@Override
        public String toString() {
            return ""[retry_failed]"";
        }","/**
     * Propagated when a reconnection attempt has failed.
     */",discord4j.gateway
B create(String hexString);,"/**
     * Create {@link threegpp.milenage.MilenageBuffer} object from a hex string.
     *
     * @param hexString  A hexadecimal string representation of a buffer with length {@link Milenage#BLOCK_LEN_BYTES} * 2.
     * @return  {@link threegpp.milenage.MilenageBuffer} object.
     */",threegpp.milenage
"@Nonnull
    default GuildChannel getGuildChannel()
    {
       return ChannelUtil.safeChannelCast(getChannel(), GuildChannel.class);
    }","/**
     * The {@link net.dv8tion.jda.api.entities.channel.middleman.GuildChannel} this interaction happened in.
     * <br>If {@link #getChannelType()} is not a guild type, this throws {@link IllegalStateException}!
     *
     * @throws IllegalStateException
     *         If {@link #getChannel()} is not a guild channel
     *
     * @return The {@link net.dv8tion.jda.api.entities.channel.middleman.GuildChannel}
     */",net.dv8tion.jda.api.interactions
Mono<Void> publishConnected(ShardInfo shardInfo);,"/**
     * Notifies this coordinator that a given shard has connected successfully. Can be used to signal other shards
     * for authentication.
     *
     * @param shardInfo the connected shard details
     * @return a {@link Mono} indicating when this operation has completed
     */",discord4j.core.shard
"String sanitized = MarkdownSanitizer.escape(input, ~MarkdownSanitizer.STRIKE);","/**
     * Escapes already existing strike regions in the input
     * and applies strike formatting to the entire string.
     * <br>The resulting string will be {@code ""~~"" + escaped(input) + ""~~""}.
     *
     * @param  input
     *         The input to strike
     *
     * @return The resulting output
     */",net.dv8tion.jda.api.utils
"public static final Route GUILD_BAN_BULK = Route.post(""/guilds/{guild.id}/bulk-ban"");","/**
     * Ban up to 200 users from a guild, and optionally delete previous messages sent by the banned users.
     * Requires both the `BAN_MEMBERS` and `MANAGE_GUILD` permissions.
     * Returns a 200 response on success, including the fields banned_users with the IDs of the banned users and failed_users with IDs that could not be banned or were already banned.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#bulk-guild-ban"">
     * https://discord.com/developers/docs/resources/guild#bulk-guild-ban</a>
     */",discord4j.rest.route
Mono<Void> rateLimitFor(Duration duration);,"/**
     * Sets a new rate limit that will be applied to every operation performed using {@link #withLimiter(Publisher)}.
     *
     * @param duration the {@link Duration} every new operation should wait before being used
     */",discord4j.rest.request
"@Nonnull
    public String getMessageId()
    {
        return Long.toUnsignedString(messageId);
    }","/**
     * The id for this message
     *
     * @return The id for this message
     */",net.dv8tion.jda.api.events.message
InteractionData getData();,"/**
     * Return the raw data for this interaction.
     *
     * @return an interaction data object
     */",discord4j.rest.interaction
"public static final Route CHANNEL_DELETE = Route.delete(""/channels/{channel.id}"");","/**
     * Delete a guild channel, or close a private message. Requires the 'MANAGE_CHANNELS' permission for the guild.
     * Returns a guild channel or dm channel object on success. Fires a Channel Delete Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#deleteclose-channel"">
     * https://discord.com/developers/docs/resources/channel#deleteclose-channel</a>
     */",discord4j.rest.route
IntentSet set = IntentSet.none();,"/**
     * Performs a logical <b>AND NOT</b> of this intent set with the other intent set.
     * <p>
     * The resultant set is the <b>relative complement</b> of this set and the other set. A intent is contained if
     * and only if it was contained in this set and <b>not</b> contained in the other set. This is analogous to
     * {@link Set#removeAll(java.util.Collection)}.
     * <pre>
     * {@code
     * IntentSet set0 = IntentSet.of(GUILDS, GUILD_MEMBERS, GUILD_BANS);
     * IntentSet set1 = IntentSet.of(GUILD_MEMBERS, GUILD_BANS, GUILD_EMOJIS);
     *
     * set0.andNot(set1) = IntentSet.of(GUILDS)
     * }
     * </pre>
     *
     * @param other The other intent set.
     * @return The relative complement of this set with the other set.
     */",discord4j.gateway.intent
long getIdLong();,"/**
     * The Snowflake id of this entity. This is unique to every entity and will never change.
     *
     * @return Long containing the Id.
     */",net.dv8tion.jda.api.entities
"public int getCode() {
        return closeStatus.getCode();
    }","/**
     * Return the websocket close code.
     *
     * @return a websocket close code
     */",discord4j.common.close
"@Nonnull
    @CheckReturnValue
    @Contract(""->new"")
    GuildStickerManager getManager();","/**
     * Modify this sticker using {@link GuildStickerManager}.
     * <br>You can update multiple fields at once, by calling the respective setters before executing the request.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_GUILD_EXPRESSIONS MANAGE_GUILD_EXPRESSIONS} in the guild.
     *
     * @return {@link GuildStickerManager}
     */",net.dv8tion.jda.api.entities.sticker
"@Nonnull
        public Builder<E> timeout(@Nonnull Duration timeout, @Nullable Runnable timeoutCallback)
        {
            Checks.notNull(timeout, ""Timeout"");
            this.timeout = timeout;
            this.timeoutCallback = timeoutCallback;
            return this;
        }","/**
         * Sets the timeout duration, after which the event is no longer listener for,
         * and the callback is run.
         *
         * @param  timeout
         *         The duration after which the event is no longer listener for
         * @param  timeoutCallback
         *         The callback run after the duration
         *
         * @throws IllegalArgumentException
         *         If the timeout is null
         *
         * @return This instance for chaining convenience
         */",net.dv8tion.jda.api.utils
"@Nonnull
    List<MessageEmbed> getEmbeds();","/**
     * The configured message embeds, this is the opposite of {@link MessageRequest#setEmbeds(Collection)} and only returns what was set using that setter.
     *
     * <p>For message edit requests, this will not be the current embeds of the message.
     *
     * @return The currently configured embeds, or an empty list if none were set yet
     *
     * @see    MessageRequest#setEmbeds(Collection)
     */",net.dv8tion.jda.api.utils.messages
double getMaxDTWThreashold();,"/**
     * Get the threshold for gesture maximum acceptance.
     * <p>
     * Only gestures, that have a feature vector distance (by DTW) greater than minThreashold, are accepted.
     *
     *
     * @return represents the maximum distance above which a feature vector is accepted
     */",jestures.core.recognition.gesturedata
"@Nonnull
    String getComponentId();","/**
     * The custom component ID provided to the component when it was originally created.
     * <br>This value should be used to determine what action to take in regard to this interaction.
     *
     * <br>This id does not have to be numerical.
     *
     * @return The component ID
     *
     * @see    ActionComponent#getId()
     */",net.dv8tion.jda.api.interactions.components
CompletableFuture<Boolean> disconnect();,"/**
     * Disconnects from a database asynchronously
     * @return boolean that shows whether the database-connection could be closed
     */",io.github.heliumdioxid.database.api
"public Mono<Image> getImage() {
        return Image.ofUrl(getImageUrl());
    }","/**
     * Gets the image for this emoji.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link Image image} of the emoji. If an
     * error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"@Nullable
    public Member getMember()
    {
        return getGuild().getMemberById(threadMemberId);
    }","/**
     * The {@link ThreadMember} as a guild {@link Member}.
     *
     * @return The {@link ThreadMember} as a guild {@link Member}.
     */",net.dv8tion.jda.api.events.thread.member
"public static String getUserDir(final String name) throws FileNotFoundException {
        final String userFolder = FileManager.libDir + OsUtils.getSeparator() + LibPaths.USER.getDirName()
                + OsUtils.getSeparator() + name + OsUtils.getSeparator();
        if (!FileManager.checkIfFolderExists(userFolder)) {
            throw new FileNotFoundException();
        } else {
            return userFolder;
        }
    }","/**
     * Get the user directory.
     *
     * @param name
     *            the {@link String} name.
     * @return the String path
     * @throws FileNotFoundException
     *             if the file is not found
     */",jestures.core.file
"otherwise look for the options we have added
		option = option.toLowerCase();","/**
	 * Returns the ""length"" of a given option. If an option takes no arguments,
	 * its length is one. If it takes one argument, it's length is two, and so
	 * on. This method is called by JavaDoc to parse the options it does not
	 * recognize. It then calls
	 * {@link #validOptions(String[][], DocErrorReporter)} to validate them.
	 * <b>Note:</b><br>
	 * <blockquote>
	 * The options arrive as case-sensitive strings. For options that are not
	 * case-sensitive, use toLowerCase() on the option string before comparing
	 * it. </blockquote>
	 * 
	 * @return number of arguments + 1 for a option. Zero return means option
	 *         not known. Negative value means error occurred.
	 */",net.winroad.htmldoclet4jdk8
"@Nonnull
    default PermissionOverrideAction reset()
    {
        return resetAllow().resetDeny();
    }","/**
     * Shortcut for {@code resetAllow().resetDeny()}.
     * <br>The permission override will be empty after this operation
     *
     * @return The current PermissionOverrideAction for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public Mono<GuildScheduledEventData> edit(final GuildScheduledEventModifyRequest request, @Nullable String reason) {
        return restClient.getGuildService().modifyScheduledEvent(guildId,id, request, reason);
    }","/**
     * Requests to edit this event.
     *
     * @param request A {@link GuildScheduledEventModifyRequest} to parameterize this request.
     * @param reason The reason, if present
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link GuildScheduledEventData}.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"@Nonnull
    StandardSticker asStandardSticker();","/**
     * Returns the underlying {@link StandardSticker} if applicable.
     *
     * @throws IllegalStateException
     *         If this is not a {@link StandardSticker}
     *
     * @return The {@link StandardSticker}
     */",net.dv8tion.jda.api.entities.sticker
"public static final Route GUILD_DELETE = Route.delete(""/guilds/{guild.id}"");","/**
     * Delete a guild permanently. User must be owner. Returns 204 No Content on success. Fires a Guild Delete Gateway
     * event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#delete-guild"">
     * https://discord.com/developers/docs/resources/guild#delete-guild</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    StageInstanceManager setTopic(@Nullable String topic);","/**
     * Sets the topic for this stage instance.
     * <br>This shows up in stage discovery and in the stage view.
     *
     * @param  topic
     *         The topic or null to reset, must be 1-120 characters long
     *
     * @throws IllegalArgumentException
     *         If the topic is longer than 120 characters
     *
     * @return StageInstanceManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static long asLong(final String id) {
        return Long.parseUnsignedLong(id);
    }","/**
     * Constructs a {@code Snowflake} represented as a {@code long} utilizing an <i>unsigned</i> ID.
     *
     * @param id The <i>unsigned</i> ID to construct a {@code Snowflake}. Must be non-null.
     * @return A constructed {@code Snowflake} with the <i>unsigned</i> ID.
     * @throws NumberFormatException If {@code id} is not an <i>unsigned</i> ID.
     */",discord4j.common.util
List<GuildMessageChannel> channels = msg.getMentions().getChannels(GuildMessageChannel.class);,"/**
     * A {@link org.apache.commons.collections4.Bag Bag} of mentioned channels.
     * <br>This can be used to retrieve the amount of times a channel was mentioned.
     *
     * <p><b>This may include GuildChannels from other {@link net.dv8tion.jda.api.entities.Guild Guilds}</b>
     *
     * <p><b>Example</b><br>
     * <pre>{@code
     * void sendCount(Message msg)
     * {
     *     Bag<GuildChannel> mentions = msg.getMentions().getChannelsBag();
     *     StringBuilder content = new StringBuilder();
     *     for (GuildChannel channel : mentions.uniqueSet())
     *     {
     *         content.append(""#"")
     *                .append(channel.getName())
     *                .append("": "")
     *                .append(mentions.getCount(channel))
     *                .append(""\n"");
     *     }
     *     msg.getChannel().sendMessage(content.toString()).queue();
     * }
     * }</pre>
     *
     * @return {@link org.apache.commons.collections4.Bag Bag} of mentioned channels
     *
     * @see    #getChannels()
     */",net.dv8tion.jda.api.entities
void addAllElemInListViewToDataset();,"/**
     * Add all feature vector elements present in listview.
     */",recorder.view
"public static GetMembersInThreadAction getMembersInThread(long threadId) {
        return new GetMembersInThreadAction(threadId);
    }","/**
     * Creates an action to retrieve data for all thread members present in a store for the given thread ID.
     *
     * @param threadId the thread ID
     * @return a new {@link GetMembersInThreadAction}
     */",discord4j.common.store.action.read
public abstract double readDecimal();,"/**
   * Reads a primitive double from the terminal input.
   *
   * @return a double
   */",io.github.augustoravazoli.termenu.io
"public Optional<Message> getMessage() {
        return Optional.ofNullable(message);
    }","/**
     * Gets the {@link Message} that was deleted in this event, if present.
     * This may not be available if {@code Messages} are not stored.
     *
     * @return The deleted {@link Message}, if present.
     */",discord4j.core.event.domain.message
"@Nonnull
    static Button of(@Nonnull ButtonStyle style, @Nonnull String idOrUrl, @Nonnull String label)
    {
        Checks.check(style != ButtonStyle.UNKNOWN, ""Cannot make button with unknown style!"");
        Checks.notNull(style, ""Style"");
        Checks.notNull(label, ""Label"");
        Checks.notLonger(label, LABEL_MAX_LENGTH, ""Label"");
        if (style == ButtonStyle.LINK)
            return link(idOrUrl, label);
        Checks.notEmpty(idOrUrl, ""Id"");
        Checks.notLonger(idOrUrl, ID_MAX_LENGTH, ""Id"");
        return new ButtonImpl(idOrUrl, label, style, false, null);
    }","/**
     * Create a button with the provided {@link ButtonStyle style}, URL or ID, and label.
     * <br>The button is enabled and has no emoji attached by default.
     * You can use {@link #asDisabled()} and {@link #withEmoji(Emoji)} to further configure it.
     *
     * <p>See {@link #link(String, String)} or {@link #primary(String, String)} for more details.
     *
     * @param  style
     *         The button style
     * @param  idOrUrl
     *         Either the ID or URL for this button
     * @param  label
     *         The text to display on the button
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any provided argument is null or empty.</li>
     *             <li>If the id is longer than {@value #ID_MAX_LENGTH}, as defined by {@link #ID_MAX_LENGTH}.</li>
     *             <li>If the url is longer than {@value #URL_MAX_LENGTH}, as defined by {@link #URL_MAX_LENGTH}.</li>
     *             <li>If the character limit for {@code label}, defined by {@link #LABEL_MAX_LENGTH} as {@value #LABEL_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
"@Nonnull
    M moveDown(int amount);","/**
     * Moves the currently selected entity {@code amount} positions <b>DOWN</b>
     * in order by pushing all entities up by one position.
     *
     * @param  amount
     *         The amount of positions that should be moved
     *
     * @throws java.lang.IllegalStateException
     *         If no entity has been selected yet, use {@link #selectPosition(Object)}
     * @throws java.lang.IllegalArgumentException
     *         If the specified amount would cause the entity to go out-of-bounds
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    #moveTo(int)
     */",net.dv8tion.jda.api.requests.restaction.order
"@Nonnull
    static Button danger(@Nonnull String id, @Nonnull String label)
    {
        Checks.notEmpty(id, ""Id"");
        Checks.notEmpty(label, ""Label"");
        Checks.notLonger(id, ID_MAX_LENGTH, ""Id"");
        Checks.notLonger(label, LABEL_MAX_LENGTH, ""Label"");
        return new ButtonImpl(id, label, ButtonStyle.DANGER, false, null);
    }","/**
     * Creates a button with {@link ButtonStyle#DANGER DANGER} Style.
     * <br>The button is enabled and has no emoji attached by default.
     * You can use {@link #asDisabled()} and {@link #withEmoji(Emoji)} to further configure it.
     *
     * @param  id
     *         The custom button ID
     * @param  label
     *         The text to display on the button
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any provided argument is null or empty.</li>
     *             <li>If the character limit for {@code id}, defined by {@link #ID_MAX_LENGTH} as {@value #ID_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the character limit for {@code label}, defined by {@link #LABEL_MAX_LENGTH} as {@value #LABEL_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
"@Nonnull
    RoleTags getTags();","/**
     * The tags of this role.
     * <br>This is useful to determine the purpose of a managed role.
     *
     * <p>This requires {@link net.dv8tion.jda.api.utils.cache.CacheFlag#ROLE_TAGS CacheFlag.ROLE_TAGS}
     * to be enabled.
     * See {@link net.dv8tion.jda.api.JDABuilder#enableCache(CacheFlag, CacheFlag...) JDABuilder.enableCache(...)}.
     *
     * @return {@link RoleTags}
     *
     * @since  4.2.1
     */",net.dv8tion.jda.api.entities
"public static ClientActivity listening(String name) {
        return of(Activity.Type.LISTENING, name, null);
    }","/**
     * Creates a {@link Activity.Type#LISTENING listening} activity.
     *
     * @param name the name of the activity
     * @return a listening activity with the given name
     */",discord4j.core.object.presence
"public LegacyGuildEditSpec setOwnerId(Snowflake ownerId) {
        requestBuilder.ownerId(ownerId.asString());
        return this;
    }","/**
     * Sets the new owner ID for this {@link Guild}. Used to transfer guild ownership if this client is the owner.
     *
     * @param ownerId The identifier for the new guild owner.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Mono<StageInstance> edit(StageInstanceEditSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(() -> rest.edit(spec.asRequest(), spec.reason())
                .map(bean -> new StageInstance(gateway, bean)));
    }","/**
     * Requests to edit this stage instance.
     *
     * @param spec an immutable object that specifies how to edit this stage instance
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link StageInstance}. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"public static double getDouble(@Nonnull DataArray root, @Nonnull String path, double fallback)
    {
        Double doubleValue = get(root, path, (obj, key) -> obj.getDouble(key, fallback), (arr, index) -> arr.getDouble(index, fallback));
        return doubleValue == null ? fallback : doubleValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     * <br>If the resulting value is a string, this will parse the string using {@link Double#parseDouble(String)}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The double value at the given path, returning the fallback if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"public Duration getFirstBackoff() {
        return firstBackoff;
    }","/**
     * Return the minimum backoff duration.
     *
     * @return minimum backoff duration
     */",discord4j.common.retry
"@Override
	public void deleteById(final Integer employeeId, final Integer projectId, final LocalDateTime commitDate) {
		this.rep.delete(this.findById(employeeId, projectId, commitDate));
	}","/**
	 * @param employeeId
	 * @param projectId
	 * @param commitDate
	 */",com.pfa.app.service.impl
"public Publisher<?> onScheduledEventUpdate(ScheduledEventUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a scheduled event is updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static CountMessagesInChannelAction countMessagesInChannel(long channelId) {
        return new CountMessagesInChannelAction(channelId);
    }","/**
     * Creates an action to count the number of messages present in a store for the given channel ID.
     *
     * @param channelId the channel ID
     * @return a new {@link CountMessagesInChannelAction}
     */",discord4j.common.store.action.read
"Mono<Void> registerVoiceConnection(Snowflake guildId, VoiceConnection voiceConnection);","/**
     * Register a {@link VoiceConnection} for a given {@code guildId}, replacing any existing one.
     *
     * @param guildId the guild ID to set the new voice connection
     * @param voiceConnection the {@link VoiceConnection} to register
     * @return a {@link Mono} indicating completion of the registration process, if an error happens it is emitted
     * through the {@link Mono}.
     */",discord4j.voice
"public boolean isSelfStreaming() {
        return data.selfStream().toOptional().orElse(false);
    }","/**
     * Gets whether this user is streaming using ""Go Live"".
     *
     * @return {@code true} if this user is streaming using ""Go Live"", {@code false} otherwise.
     */",discord4j.core.object
"@Nonnull
    IWebhookContainerUnion getChannel();","/**
     * The {@link net.dv8tion.jda.api.entities.channel.attribute.IWebhookContainer channel} to create this webhook in.
     *
     * @return The channel
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    default Member getElementById(@Nonnull String id)
    {
        return getElementById(MiscUtil.parseSnowflake(id));
    }","/**
     * Retrieves the member represented by the provided ID.
     *
     * @param  id
     *         The ID of the member
     *
     * @throws java.lang.NumberFormatException
     *         If the provided String is {@code null} or
     *         cannot be resolved to an unsigned long id
     *
     * @return Possibly-null member for the specified ID
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    public Guild.VerificationLevel getOldVerificationLevel()
    {
        return getOldValue();
    }","/**
     * The old {@link net.dv8tion.jda.api.entities.Guild.VerificationLevel VerificationLevel}
     *
     * @return The old VerificationLevel
     */",net.dv8tion.jda.api.events.guild.update
"public Builder intents(@Nullable IntentSet intents) {
            this.intents = intents;
            return this;
        }","/**
         * Set the Gateway intents to use when authenticating.
         *
         * @param intents an {@link IntentSet} for authenticating, or {@code null} if not using this capability
         * @return this builder
         */",discord4j.gateway
"@Nullable
    VoiceChannel getVoiceChannelById(String id);","/**
     * Gets a voice channel with the given ID, or null if the voice channel is not found
     * 
     * @param  id
     *         the ID of the voice channel
     *
     * @throws IllegalStateException
     *         If the widget is not {@link #isAvailable() available}
     * @throws NumberFormatException
     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
     *
     * @return possibly-null VoiceChannel with the given ID. 
     */",net.dv8tion.jda.api.entities
"public Publisher<?> onUnban(UnbanEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user is unbanned from a guild.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction replyEmbeds(@Nonnull MessageEmbed embed, @Nonnull MessageEmbed... embeds)
    {
        Checks.notNull(embed, ""MessageEmbed"");
        Checks.noneNull(embeds, ""MessageEmbed"");
        return deferReply().addEmbeds(embed).addEmbeds(embeds);
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     * </ul>
     *
     * @param  embed
     *         The message embed to send
     * @param  embeds
     *         Any additional embeds to send
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link ReplyCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"public LegacyGuildEditSpec setSystemChannelFlags(@Nullable Guild.SystemChannelFlag... flags) {
        if (flags != null) {
            requestBuilder.systemChannelFlags(Possible.of(Arrays.stream(flags)
                    .mapToInt(Guild.SystemChannelFlag::getValue)
                    .reduce(0, (left, right) -> left | right)));
        } else {
            requestBuilder.systemChannelFlags(Possible.absent());
        }
        return this;
    }","/**
     * Sets the system channel flags.
     *
     * @param flags The system channel flags.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static String forUser(final Snowflake id) {
        return ""<@"" + id.asString() + "">"";
    }","/**
     * Gets a <i>raw</i> mention for a {@link User}.
     *
     * <p>The use of this mention requires being permitted by the ""allowed mentions"" of any messages being sent.</p>
     *
     * <p>This is the format utilized to directly mention another user (assuming the
     * user exists in context of the mention).</p>
     *
     * @param id The id of the user to mention.
     * @return The <i>raw</i> mention.
     */",discord4j.core.util
"@Nonnull
    E getEntity();","/**
     * The affected entity
     *
     * @return The affected entity
     */",net.dv8tion.jda.api.events
"DiscordClient(CoreResources coreResources) {
        super(coreResources);
        this.coreResources = coreResources;
    }","/**
     * Constructs a {@code DiscordClient} with an associated {@link CoreResources}.
     *
     * @param coreResources The {@link CoreResources} associated to this object.
     */",discord4j.core
"public LegacyRoleEditSpec setMentionable(boolean mentionable) {
        requestBuilder.mentionable(mentionable);
        return this;
    }","/**
     * Sets whether the modified {@link Role} should be mentionable.
     *
     * @param mentionable The role mentionable property.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public ReactorResources build() {
            return new ReactorResources(this);
        }","/**
         * Create the {@link ReactorResources}.
         *
         * @return A custom {@link ReactorResources}.
         */",discord4j.common
"@Nonnull
        public Builder addActionRow(@Nonnull Collection<? extends ItemComponent> components)
        {
            return addComponents(ActionRow.of(components));
        }","/**
         * Adds an ActionRow to this modal
         *
         * @param  components
         *         The components to add
         *
         * @throws IllegalArgumentException
         *         <ul>
         *             <li>If any of the provided ItemComponents are null, or an invalid number of components are provided</li>
         *             <li>If any of the provided ItemComponents are not compatible with Modals</li>
         *         </ul>
         *
         * @return Same builder for chaining convenience
         *
         * @see    ItemComponent#isModalCompatible()
         */",net.dv8tion.jda.api.interactions.modals
"public int getMemberCount() {
        return dispatch.memberCount();
    }","/**
     * Returns the approximate number of members in the thread, capped at 50.
     *
     * @return the approximate number of members in the thread
     */",discord4j.core.event.domain.thread
"public RestWebhook getWebhookById(final Snowflake webhookId) {
        return RestWebhook.create(this, webhookId);
    }","/**
     * Requests to retrieve the webhook represented by the supplied ID.
     *
     * @param webhookId The ID of the webhook.
     * @return A {@link RestWebhook} as represented by the supplied ID.
     */",discord4j.rest
"@Nullable
    public static DataObject optObject(@Nonnull DataObject root, @Nonnull String path)
    {
        if (!path.endsWith(""?""))
            path += ""?"";
        return get(root, path, DataObject::getObject, DataArray::getObject);
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The DataObject at the given path, or null if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
<T> Flux<T> withLimiter(Publisher<T> stage);,"/**
     * Provides a scope to perform reactive operations under this global rate limiter. Limiter resources are acquired on
     * subscription and released when the given stage is cancelled, has completed or has been terminated with an error.
     *
     * @param stage a {@link Publisher} that will manage this global rate limiter resources
     * @param <T> the type of the stage supplier
     * @return a {@link Flux} where each subscription represents acquiring a rate limiter resource
     */",discord4j.rest.request
"public Optional<String> getCurrentContent() {
        return Optional.ofNullable(currentContent);
    }","/**
     * Gets the current, new, version of the {@link Message}'s content in this event, if present.
     *
     * @return The current version of the {@link Message}'s content, if present.
     */",discord4j.core.event.domain.message
<E extends Event> Flux<E> on(Class<E> eventClass);,"/**
     * Retrieves a {@link Flux} with elements of the given {@link Event} type. This {@link Flux} has to be subscribed to
     * in order to start processing. See {@link Event} class for the list of possible event classes.
     * <p>
     * <strong>Note: </strong> Errors occurring while processing events will terminate your sequence. If you wish to use
     * a version capable of handling errors for you, use {@link #on(Class, Function)}. See
     * <a href=""https://github.com/reactive-streams/reactive-streams-jvm#1.7"">Reactive Streams Spec</a>
     * explaining this behavior.
     * <p>
     * A recommended pattern to use this method is wrapping your code that may throw exceptions within a {@code
     * flatMap} block and use {@link Mono#onErrorResume(Function)}, {@link Flux#onErrorResume(Function)} or
     * equivalent methods to maintain the sequence active:
     * <pre>
     * client.getEventDispatcher().on(MessageCreateEvent.class)
     *     .flatMap(event -&gt; myCodeThatMightThrow(event)
     *             .onErrorResume(error -&gt; {
     *                 // log and then discard the error to keep the sequence alive
     *                 log.error(""Failed to handle event!"", error);
     *                 return Mono.empty();
     *             }))
     *     .subscribe();
     * </pre>
     * <p>
     * For more alternatives to handling errors, please see
     * <a href=""https://docs.discord4j.com/error-handling"">Error Handling</a> docs page.
     *
     * @param eventClass the event class to obtain events from
     * @param <E> the type of the event class
     * @return a new {@link Flux} with the requested events
     */",discord4j.core.event
"public List<Embed> getCurrentEmbeds() {
        return currentEmbeds;
    }","/**
     * Gets the current, new, version of the {@link Message}'s {@link Embed} in this event.
     *
     * @return The current version of the {@link Message}'s {@link Embed}.
     */",discord4j.core.event.domain.message
"public LegacyEmbedCreateSpec setDescription(String description) {
        requestBuilder.description(description);
        return this;
    }","/**
     * Sets the description of the embed.
     *
     * @param description The description of the embed.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    GuildMessageChannel asGuildMessageChannel();","/**
     * Casts this union to a {@link GuildMessageChannel}.
     * <br>This method exists for developer discoverability.
     *
     * <p>Note: This is effectively equivalent to using the cast operator:
     * <pre>{@code
     * //These are the same!
     * GuildMessageChannel channel = union.asGuildMessageChannel();
     * GuildMessageChannel channel2 = (GuildMessageChannel) union;
     * }</pre>
     *
     * @throws IllegalStateException
     *         If the channel represented by this union is not actually a {@link GuildMessageChannel}.
     *
     * @return The channel as a {@link GuildMessageChannel}
     */",net.dv8tion.jda.api.entities.channel.unions
"public Mono<GuildScheduledEventData> getData(@Nullable Boolean withUserCount) {
        Map<String, Object> queryParams = new HashMap<>();
        Optional.ofNullable(withUserCount).ifPresent(value -> queryParams.put(""with_user_count"", value));
        return restClient.getGuildService().getScheduledEvent(guildId, id, queryParams);
    }","/**
     * Retrieve this scheduled event's data upon subscription.
     *
     * @param withUserCount Whether to optionally include the subscribed user count in the returned data.
     * @return A {@link Mono} where, upon successful completion, emits the {@link GuildScheduledEventData} belonging to
     * this scheduled event. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"public List<Color> getSuperColors() {
        return this.burstColors.stream().map(Color::of).collect(Collectors.toList());
    }","/**
     * Get a list of HEX colors used for super reaction.
     *
     * @return A list of {@link Color} used in this reaction.
     */",discord4j.core.event.domain.message
"public static Snowflake of(final BigInteger id) {
        return of(id.longValue());
    }","/**
     * Constructs a {@code Snowflake} utilizing a BigInteger representing an <i>unsigned</i> ID.
     *
     * @param id The BigInteger representing an <i>unsigned</i> ID to construct a {@code Snowflake}. Must be non-null.
     * @return A constructed {@code Snowflake} with an <i>unsigned</i> ID.
     */",discord4j.common.util
"public int getMinValues()
        {
            return minValues;
        }","/**
         * The minimum amount of values a user has to select.
         *
         * @return The min values
         */",net.dv8tion.jda.api.interactions.components.selections
"@Nullable
    default MediaChannel getMediaChannelById(@Nonnull String id)
    {
        return (MediaChannel) getChannelCache().getElementById(ChannelType.MEDIA, id);
    }","/**
     * Gets a {@link MediaChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link MediaChannel}.
     *
     * @throws java.lang.NumberFormatException
     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
     *
     * @return Possibly-null {@link MediaChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    public TargetType getTargetType()
    {
        return type.getTargetType();
    }","/**
     * The {@link net.dv8tion.jda.api.audit.TargetType TargetType} defining what kind of
     * entity was targeted by this action.
     * <br>Shortcut for {@code getType().getTargetType()}
     *
     * @return The {@link net.dv8tion.jda.api.audit.TargetType TargetType}
     */",net.dv8tion.jda.api.audit
"Mono<Void> onMessageReactionRemoveAll(int shardIndex, MessageReactionRemoveAll dispatch);","/**
     * Updates the internal state of the store according to the given {@link MessageReactionRemoveAll} gateway
     * dispatch. This will typically perform an update operation on a related {@link MessageData} that is already
     * present in the store in order to remove all reactions.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"public Set<Member> getMembers() {
        return members;
    }","/**
     * Gets a list of {@code Members} that have been streamed to the client in this event.
     * This may not contain all {@code Members} of the {@link Guild}.
     *
     * @return The list of {@code Members} streamed to the client in this event.
     */",discord4j.core.event.domain.guild
"@Nonnull
    @Override
    ScheduledEventManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * You can specify a combination by using a bitwise OR concat of the flag constants.
     * <br>Example: {@code manager.reset(ScheduledEventManager.DESCRIPTION, ScheduledEventManager.END_TIME);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #DESCRIPTION}</li>
     *     <li>{@link #LOCATION}</li>
     *     <li>{@link #START_TIME}</li>
     *     <li>{@link #END_TIME}</li>
     *     <li>{@link #IMAGE}</li>
     *     <li>{@link #STATUS}</li>
     * </ul>
     *
     * @param  fields
     *         Integer values containing the flags to reset.
     *
     * @return ScheduledEventManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"Distance calculated with DTW
                final double dtwDist = this.dtw.d(gestureTemplate, featureVector);","/**
     * The core of recognition.
     *
     * @param featureVector
     *            the gesture
     */",jestures.core.recognition
"@Nonnull
    public Entitlement getEntitlement()
    {
        return entitlement;
    }","/**
     * The {@link Entitlement Entitlement}
     *
     * @return The {@link Entitlement Entitlement}
     */",net.dv8tion.jda.api.events.entitlement
Flux<RoleData> getRolesInGuild(long guildId);,"/**
     * Retrieves data for all roles present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Flux} emitting the roles, or empty if none is present
     */",discord4j.common.store.api.layout
"public int getSlowmode()
    {
        return this.slowmode;
    }","/**
     * The slowmode set for this TemplateChannel.
     * <br>If slowmode is set this returns an {@code int} between 1 and {@link net.dv8tion.jda.api.entities.channel.concrete.TextChannel#MAX_SLOWMODE TextChannel.MAX_SLOWMODE}.
     * <br>If not set this returns {@code 0}.
     *
     * <p>Note bots are unaffected by this.
     * <br>Having {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE MESSAGE_MANAGE} or
     * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} permission also
     * grants immunity to slowmode.
     *
     * @return The slowmode for this TextChannel, between 1 and {@link net.dv8tion.jda.api.entities.channel.concrete.TextChannel#MAX_SLOWMODE TextChannel.MAX_SLOWMODE}, {@code 0} if no slowmode is set.
     */",net.dv8tion.jda.api.entities.templates
"public String getName() {
            return (name != null) ? name : """";
        }","/**
         * Gets the name of the emoji.
         * <br>
         * <b>Note:</b> this can be empty for reactions or onboarding.
         *
         * @return The name of the emoji.
         */",discord4j.core.object.reaction
"@Nonnull
    public Set<String> getNewFeatures()
    {
        return getNewValue();
    }","/**
     * The new Set of features after the {@link net.dv8tion.jda.api.entities.Guild Guild} update.
     *
     * @return Never-null, unmodifiable Set of the new features
     */",net.dv8tion.jda.api.events.guild.update
"static DispatchEventMapper emitEvents() {
        return new DispatchHandlers();
    }","/**
     * Create a {@link DispatchEventMapper} that processes updates and records them into the right {@link Store},
     * then derives the proper {@link Event}.
     *
     * @return a {@link DispatchEventMapper} that caches updates and produces {@link Event} instances
     */",discord4j.core.event.dispatch
"public Publisher<?> onTextChannelUpdate(TextChannelUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild text channel is updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"<T> boolean emitNext(Sinks.Many<T> sink, T element);","/**
     * Try emitting a given {@code element} to the specified {@code sink}, respecting the semantics of
     * {@link Sinks.Many#tryEmitNext(Object)} and the failure handling of
     * {@link Sinks.Many#emitNext(Object, Sinks.EmitFailureHandler)}. Returns whether the emission was successful.
     * Implementations can throw unchecked exceptions like {@link Sinks.EmissionException} or perform side-effects
     * like waiting to determine a result.
     *
     * @param sink the target sink where this emission is attempted
     * @param element the element pushed to the sink
     * @param <T> the type associated with the sink and element
     * @return the result of the emission, {@code true} if the element was pushed to the sink, {@code false} otherwise
     */",discord4j.common.sinks
"@Nonnull
        public B setDisabled(boolean disabled)
        {
            this.disabled = disabled;
            return (B) this;
        }","/**
         * Configure whether this select menu should be disabled.
         * <br>Default: {@code false}
         *
         * @param  disabled
         *         Whether this menu is disabled
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.components.selections
void clearRecordedDataset();,"/**
     * Clear the featureVector.
     */",recorder.controller
"@Nullable
        GuildChannel getChannel();","/**
         * Returns the {@link GuildChannel} that is linked to this recommended channel.
         * <br>This will be {@code null} if the linked channel was deleted, or if the welcome screen comes from an {@link Invite.Guild invite guild}.
         *
         * @return The {@link GuildChannel} that is linked to this recommended channel or {@code null}
         */",net.dv8tion.jda.api.entities
"public LegacyEmbedCreateSpec setUrl(String url) {
        requestBuilder.url(url);
        return this;
    }","/**
     * Sets the URL of the embed.
     *
     * @param url A URL which can be clicked on through the title of the embed.
     * @return This spec.
     */",discord4j.core.spec.legacy
void register(@Nonnull Object listener);,"/**
     * Registers the specified listener
     * <br>Accepted types may be specified by implementations
     *
     * @param listener
     *        A listener object
     *
     * @throws java.lang.UnsupportedOperationException
     *         If the implementation does not support this method
     */",net.dv8tion.jda.api.hooks
"public static CountInGuildAction countExactMembersInGuild(long guildId) {
        return new CountInGuildAction(InGuildEntity.MEMBERS_EXACT, guildId);
    }","/**
     * Creates an action to count the exact number of members for the given guild ID. If some members are not present
     * in the store and thus is not able to return an accurate count, executing this action will error with
     * {@link ExactResultNotAvailableException}.
     *
     * @param guildId the guild ID
     * @return a new {@link CountInGuildAction}
     */",discord4j.common.store.action.read
"public boolean isJoinEvent() {
        return current.getChannelId().isPresent() && old == null;
    }","/**
     * Gets whether this event is a voice channel join event.
     *
     * @return {@code true} if this is a voice channel join event, {@code false} otherwise.
     */",discord4j.core.event.domain
"public static CountTotalAction countGuilds() {
        return new CountTotalAction(CountableEntity.GUILDS);
    }","/**
     * Creates an action to count the number of guilds present in a store.
     *
     * @return a new {@link CountTotalAction}
     */",discord4j.common.store.action.read
Mono<ChannelData> getChannelById(long channelId);,"/**
     * Retrieves data for the channel corresponding to the given channel ID.
     *
     * @param channelId the channel ID
     * @return A {@link Mono} emitting the channel, or empty if not found
     */",discord4j.common.store.api.layout
"@Nonnull
    @CheckReturnValue
    default RoleManager setPermissions(@Nonnull Collection<Permission> permissions)
    {
        Checks.noneNull(permissions, ""Permissions"");
        return setPermissions(Permission.getRaw(permissions));
    }","/**
     * Sets the {@link net.dv8tion.jda.api.Permission Permissions} of the selected {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * <p>Permissions may only include already present Permissions for the currently logged in account.
     * <br>You are unable to give permissions you don't have!
     *
     * @param  permissions
     *         The new permission for the selected {@link net.dv8tion.jda.api.entities.Role Role}
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have permission to apply one of the specified permissions
     * @throws java.lang.IllegalArgumentException
     *         If any of the provided values is {@code null}
     *
     * @return RoleManager for chaining convenience
     *
     * @see    #setPermissions(Permission...)
     * @see    #setPermissions(long)
     * @see    java.util.EnumSet EnumSet
     * @see    net.dv8tion.jda.api.Permission#getRaw(java.util.Collection) Permission.getRaw(Collection)
     */",net.dv8tion.jda.api.managers
"@SuppressWarnings(""unchecked"")
	public static void register(@SuppressWarnings(""rawtypes"") Map tagletMap) {
		WRRefRespTaglet tag = new WRRefRespTaglet();
		Taglet t = (Taglet) tagletMap.get(tag.getName());
		if (t != null) {
			tagletMap.remove(tag.getName());
		}
		tagletMap.put(tag.getName(), tag);
	}","/**
	 * Register this Taglet.
	 * 
	 * @param tagletMap
	 *            the map to register this tag to.
	 */",net.winroad.wrdoclet.taglets
"@Nonnull
    @Unmodifiable
    default List<T> getElementsByName(@Nonnull String name)
    {
        return getElementsByName(name, false);
    }","/**
     * Creates an immutable list of all elements matching the given name.
     * <br>For a {@link net.dv8tion.jda.api.utils.cache.MemberCacheView MemberCacheView} this will
     * check the {@link net.dv8tion.jda.api.entities.Member#getEffectiveName() Effective Name} of the cached members.
     *
     * @param  name
     *         The name to check
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided name is {@code null}
     *
     * @return Immutable list of elements with the given name
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    default SnowflakeCacheView<User> getUserCache()
    {
        return CacheView.allSnowflakes(() -> this.getShardCache().stream().map(JDA::getUserCache));
    }","/**
     * {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView} of
     * all cached {@link net.dv8tion.jda.api.entities.User Users} visible to this ShardManager instance.
     *
     * @return {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView}
     */",net.dv8tion.jda.api.sharding
"@Nullable
    default ThreadChannel getThreadChannelById(@Nonnull String id)
    {
        return (ThreadChannel) getChannelCache().getElementById(ChannelType.GUILD_PUBLIC_THREAD, id);
    }","/**
     * Gets a {@link ThreadChannel ThreadChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>These threads can also represent posts in {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link ThreadChannel ThreadChannel}.
     *
     * @throws java.lang.NumberFormatException
     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
     *
     * @return Possibly-null {@link ThreadChannel ThreadChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Publisher<?> onReactionAdd(ReactionAddEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a reaction is added to a message. Guild ID might be missing if this event fires for a DM channel.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
private Logger logger = LoggerFactory.getLogger(this.getClass());,"/**
	 * The global configuration information for this run.
	 */",net.winroad.htmldoclet4jdk8
"@Nullable
    public Member getMember()
    {
        return guild.getMemberById(userId);
    }","/**
     * The {@link Member Member} instance for the user
     * or {@code null} if the user is not in this guild.
     * <br>This will also be {@code null} if the member is not available in the cache.
     * Use {@link #retrieveMember()} to load the member.
     *
     * @return Member of the added user or null if they are no longer member of this guild
     */",net.dv8tion.jda.api.events.guild.scheduledevent
"@Nonnull
    public static Consumer<Throwable> herePrintingTrace()
    {
        return here(Throwable::printStackTrace);
    }","/**
     * Creates a failure consumer that appends a context cause
     * before printing the stack trace using {@link Throwable#printStackTrace()}.
     * <br>Equivalent to {@code here(Throwable::printStackTrace)}
     *
     * @return Wrapping failure consumer around {@code Throwable::printStackTrace}
     */",net.dv8tion.jda.api.exceptions
void setStealth(boolean stealthToggle);,"/**
     * Toggles the stealth of the FPlayer depending on the parameter
     *
     * @param stealthToggle - toggles stealth
     */",com.massivecraft.factions
"public ShardedGateway(String url, int shardTotal)
        {
            this(url, shardTotal, 1);
        }","/**
         * Creates a new GatewayBot instance with the provided properties
         *
         * @param url
         *        The gateway endpoint (wss)
         * @param shardTotal
         *        The recommended shard total
         */",net.dv8tion.jda.api.utils
"public Mono<User> getOptionAsUser(final String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asUser)
            .orElse(Mono.empty());
    }","/**
     * Gets the value of the option corresponding to the provided name, if present, as a {@link User}.
     *
     * @param name The name of the option.
     * @return A {@link Mono} containing the value of the option corresponding to the provided name, if present, or empty otherwise.
     * If the option is present but its value cannot be converted to a user, the {@link Mono} will complete with an error.
     */",discord4j.core.event.domain.interaction
"public static JacksonResources create() {
        return new JacksonResources(HANDLE_UNKNOWN_PROPERTIES);
    }","/**
     * Create with a pre-configured {@link ObjectMapper} for all Discord4J related operations.
     */",discord4j.common
"public Optional<String> getCurrentNickname() {
        return Optional.ofNullable(currentNickname);
    }","/**
     * Gets the current nickname of the {@link Member} involved in this event, if present.
     *
     * @return The current nickname, if any, of the {@link Member} involved, if present.
     */",discord4j.core.event.domain.guild
"public long getDeniedRaw()
        {
            return deny;
        }","/**
         * This is the raw binary representation (as a base 10 long) of the permissions <b>denied</b> by this override.
         * <br>The long relates to the offsets used by each {@link net.dv8tion.jda.api.Permission Permission}.
         *
         * @return Never-negative long containing the binary representation of the denied permissions of this override.
         */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    public ActionType getType()
    {
        return type;
    }","/**
     * The {@link net.dv8tion.jda.api.audit.ActionType ActionType} defining what auditable
     * Action is referred to by this entry.
     *
     * @return The {@link net.dv8tion.jda.api.audit.ActionType ActionType}
     */",net.dv8tion.jda.api.audit
"public Mono<MessageChannel> getChannel() {
        return super.getClient().getChannelById(this.channelId).ofType(MessageChannel.class);
    }","/**
     * Get the {@link MessageChannel} where the poll is.
     *
     * @return The channel where the poll is.
     */",discord4j.core.event.domain.poll
"@Nonnull
        public Builder addComponents(@Nonnull LayoutComponent... components)
        {
            Checks.noneNull(components, ""Action Rows"");
            return addComponents(Arrays.asList(components));
        }","/**
         * Adds {@link LayoutComponent LayoutComponents} to this modal
         *
         * @param  components
         *         {@link LayoutComponent LayoutComponents} to add to the modal, up to {@value MAX_COMPONENTS} total
         *
         * @throws IllegalArgumentException
         *         <ul>
         *             <li>If any of the provided layouts are null</li>
         *             <li>If any of the provided components are not compatible with Modals</li>
         *         </ul>
         *
         * @return The same builder instance for chaining
         *
         * @see    LayoutComponent#isModalCompatible()
         */",net.dv8tion.jda.api.interactions.modals
"@Override
        public String toString() {
            return ""[gateway_disconnected]"";
        }","/**
     * Propagated when a gateway connection has been fully closed.
     */",discord4j.gateway
"@Incubating
    void setSpeakingMode(@Nonnull Collection<SpeakingMode> mode);","/**
     * The {@link SpeakingMode} that should be used when sending audio via
     * the provided {@link AudioSendHandler} from {@link #setSendingHandler(AudioSendHandler)}.
     * By default this will use {@link SpeakingMode#VOICE}.
     * <br>Example: {@code EnumSet.of(SpeakingMode.PRIORITY_SPEAKER, SpeakingMode.VOICE)}
     *
     * @param  mode
     *         The speaking modes
     *
     * @throws IllegalArgumentException
     *         If the provided collection is null or empty
     *
     * @incubating Discord has not officially confirmed that this feature will be available to bots
     *
     * @see    #getSpeakingMode()
     * @see    #setSpeakingMode(SpeakingMode...)
     */",net.dv8tion.jda.api.managers
"public LegacyGuildEditSpec setRegion(Region.Id regionId) {
        requestBuilder.region(Possible.of(Optional.of(regionId).map(Region.Id::getValue)));
        return this;
    }","/**
     * Sets the voice region for the modified {@link Guild}.
     *
     * @param regionId The voice region for the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
public abstract boolean clear();,"/**
   * Clears the terminal output if the current environment supports it.
   *
   * @return <code>true</code> if the terminal was cleared;
   *         <code>false</code> otherwise.
   */",io.github.augustoravazoli.termenu.io
"public Builder blockingTaskScheduler(Scheduler blockingTaskScheduler) {
            this.blockingTaskScheduler = blockingTaskScheduler;
            return this;
        }","/**
         * Sets the {@link Scheduler} to use for potentially blocking tasks. A default can be created from
         * {@link ReactorResources#DEFAULT_BLOCKING_TASK_SCHEDULER}.
         *
         * @return This builder, for chaining.
         */",discord4j.common
"@Nonnull
    @CheckReturnValue
    ChannelOrderAction setCategory(@Nullable Category category, boolean syncPermissions);","/**
     * Set the parent category for the currently selected channel.
     *
     * @param  category
     *         The new parent category, or null to not have any category
     * @param  syncPermissions
     *         Whether to sync the permissions of the channel to the new category
     *
     * @throws IllegalStateException
     *         If no entity has been selected yet, use {@link #selectPosition(Object)}
     * @throws IllegalArgumentException
     *         If the provided category is not in the same guild as the channel
     *
     * @return The current ChannelOrderAction
     */",net.dv8tion.jda.api.requests.restaction.order
"public static Flux<GuildChannel> orderGuildChannels(Flux<GuildChannel> channels) {
        return channels
                .collectMap(GuildChannel::getId) // associate channels to ids
                .flatMapIterable(OrderUtil::orderGuildChannels);
    }","/**
     * Sorts {@link GuildChannel guild channels} according to visual ordering in Discord. Channels at the top of the
     * list are first. This sorts channels within the same category according to {@link #BUCKETED_CHANNEL_ORDER} and
     * then sorts those categories according to {@link #CHANNEL_ORDER}.
     * <p>
     * This function can be used with {@link Flux#transform(Function)} for better chaining:
     * <pre>
     * {@code
     * guild.getChannels()
     *   .transform(OrderUtil::orderGuildChannels)
     * }
     * </pre>
     *
     * @param channels The guild channels to sort.
     * @return The sorted guild channels.
     */",discord4j.core.util
"@Nonnull
    @CheckReturnValue
    public RestAction<User> retrieveUser()
    {
        return getJDA().retrieveUserById(getUserIdLong());
    }","/**
     * Retrieves the voting {@link User}.
     *
     * @return {@link RestAction} - Type: {@link User}
     */",net.dv8tion.jda.api.events.message.poll
Mono<Long> countEmojis();,"/**
     * Counts the number of emojis present in the store.
     *
     * @return A {@link Mono} emitting the emoji count
     */",discord4j.common.store.api.layout
"@Nonnull
    @CheckReturnValue
    ScheduledEventAction setDescription(@Nullable String description);","/**
     * Sets the description for the new {@link ScheduledEvent ScheduledEvent}.
     * This field may include markdown.
     *
     * @param  description
     *         The description for the new {@link ScheduledEvent ScheduledEvent},
     *         or {@code null} for no description
     *
     * @throws java.lang.IllegalArgumentException
     *         If the new description is longer than {@value ScheduledEvent#MAX_DESCRIPTION_LENGTH} characters
     *
     * @return The current ScheduledEventAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public DiscordWebRequest query(Map<String, Object> params) {
        params.forEach(this::query);
        return this;
    }","/**
     * Adds the given names and values as request query parameters.
     *
     * @param params a map of query parameter names to values
     * @return this request
     */",discord4j.rest.request
"@Nonnull
    @CheckReturnValue
    GuildWelcomeScreenManager clearWelcomeChannels();","/**
     * Removes all welcome channels.
     *
     * @return GuildWelcomeScreenManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Override
	public Assignment update(final Assignment assignment) {
		return this.rep.save(assignment);
	}","/**
	 * @param assignment
	 * @return the updated assignment
	 */",com.pfa.app.service.impl
Mono<VoiceConnection> getVoiceConnection(Snowflake guildId);,"/**
     * Return the current {@link VoiceConnection} this registry holds for a given {@code guildId}.
     *
     * @param guildId the guild ID to fetch the current voice connection
     * @return a {@link Mono} of {@link VoiceConnection} for the given guild if present, empty otherwise.
     */",discord4j.voice
"@Nonnull
    static PresetKeywordTriggerConfig presetKeywordFilter(@Nonnull Collection<AutoModRule.KeywordPreset> presets)
    {
        return new PresetKeywordTriggerConfig().enablePresets(presets);
    }","/**
     * Trigger on keywords from predefined lists.
     *
     * @param  presets
     *         The presets to enable
     *
     * @throws IllegalArgumentException
     *         If null or {@link KeywordPreset#UNKNOWN} is provided
     *
     * @return {@link PresetKeywordTriggerConfig}
     */",net.dv8tion.jda.api.entities.automod.build
"Mono<UserData> onUserUpdate(int shardIndex, UserUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link UserUpdate} gateway dispatch. This will
     * typically perform an update operation on a related {@link UserData} that is already present in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link UserData} before the update
     */",discord4j.common.store.api.layout
Optional<GatewayClient> find(int shardIndex);,"/**
     * Return a {@link GatewayClient} given by a {@code shardIndex}, if present.
     *
     * @param shardIndex a shard index to locate a particular client
     * @return a {@link GatewayClient} for a shard index, if present
     */",discord4j.gateway
"@Nonnull
    @CheckReturnValue
    default MessageEditAction editMessageAttachmentsById(@Nonnull String messageId, @Nonnull AttachedFile... attachments)
    {
        Checks.noneNull(attachments, ""Attachments"");
        return editMessageAttachmentsById(messageId, Arrays.asList(attachments));
    }","/**
     * Attempts to edit a message by its id in this MessageChannel.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#REQUEST_ENTITY_TOO_LARGE REQUEST_ENTITY_TOO_LARGE}
     *     <br>If any of the provided files is bigger than {@link Guild#getMaxFileSize()}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#INVALID_AUTHOR_EDIT INVALID_AUTHOR_EDIT}
     *     <br>Attempted to edit a message that was not sent by the currently logged in account.
     *         Discord does not allow editing of other users' Messages!</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The request was attempted after the account lost access to the {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed, or after {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}
     *         was revoked in the {@link GuildMessageChannel}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
     *         the message it referred to has already been deleted. This might also be triggered for ephemeral messages.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>The request was attempted after the channel was deleted.</li>
     * </ul>
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * @param  messageId
     *         The message id. For interactions this supports {@code ""@original""} to edit the source message of the interaction.
     * @param  attachments
     *         The new attachments of the message (Can be {@link FileUpload FileUploads} or {@link net.dv8tion.jda.api.utils.AttachmentUpdate AttachmentUpdates})
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link MessageEditAction} that can be used to further update the message
     *
     * @see    AttachedFile#fromAttachment(Message.Attachment)
     * @see    FileUpload#fromData(InputStream, String)
     */",net.dv8tion.jda.api.entities.channel.middleman
"private static void validateCipherOrThrowException(final Cipher k) {
        if(k.getOutputSize(BLOCK_LEN_BYTES) != BLOCK_LEN_BYTES)
            throw new IllegalArgumentException(""Cipher supplied is not suitable for Milenage"");
    }","/**
     * Validates {@link Cipher} object.
     * If checked object is not suitable for Milenage algorithm calculations throws exception.
     * @param k  {@link Cipher} object to check.
     * @throws  IllegalArgumentException In case Cipher is invalid.
     */",threegpp.milenage
"public LegacyMessageEditSpec setContent(@Nullable String content) {
        this.content = Possible.of(Optional.ofNullable(content));
        return this;
    }","/**
     * Sets the new contents for the edited {@link Message}.
     *
     * @param content This message contents.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    ThreadChannelAction createThreadChannel(@Nonnull String name, long messageId);","/**
     * Creates a new, public {@link ThreadChannel} with the parent channel being this {@link IThreadContainer}.
     * <br>The starting message will copy the message for the provided id, and will be of type {@link MessageType#THREAD_STARTER_MESSAGE MessageType.THREAD_STARTER_MESSAGE}.
     *
     * <p>The resulting {@link ThreadChannel ThreadChannel} may be one of:
     * <ul>
     *     <li>{@link ChannelType#GUILD_PUBLIC_THREAD}</li>
     *     <li>{@link ChannelType#GUILD_NEWS_THREAD}</li>
     * </ul>
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_CHANNELS MAX_CHANNELS}
     *     <br>The maximum number of channels were exceeded</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#THREAD_WITH_THIS_MESSAGE_ALREADY_EXISTS}
     *     <br>This message has already been used to create a thread</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_ACTIVE_THREADS}
     *     <br>The maximum number of active threads has been reached, and no more may be created.</li>
     * </ul>
     *
     * @param  name
     *         The name of the new ThreadChannel (up to {@value Channel#MAX_NAME_LENGTH} characters)
     * @param  messageId
     *         The ID of the message from which this ThreadChannel will be spawned.
     *
     * @throws IllegalArgumentException
     *         If the provided name is null, blank, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters
     * @throws UnsupportedOperationException
     *         If this is a forum channel.
     *         You must use {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel#createForumPost(String, MessageCreateData) createForumPost(...)} instead.
     * @throws InsufficientPermissionException
     *         If the bot does not have {@link net.dv8tion.jda.api.Permission#CREATE_PUBLIC_THREADS Permission.CREATE_PUBLIC_THREADS} in this channel
     *
     * @return A specific {@link ThreadChannelAction} that may be used to configure the new ThreadChannel before its creation.
     */",net.dv8tion.jda.api.entities.channel.attribute
double getMinDtwThreashold();,"/**
     * Get the threshold for gesture minimum acceptance.
     * <p>
     * Only gestures, that have a feature vector distance (by DTW) lower than minThreashold, are accepted.
     *
     *
     * @return represents the minimum distance above which a feature vector is accepted
     */",jestures.core.recognition.gesturedata
void forEachUnordered(@Nonnull final Consumer<? super T> action);,"/**
     * Behavior similar to {@link CacheView#forEach(Consumer)} but does not preserve order.
     * <br>This will not copy the data store as sorting is not needed.
     *
     * @param  action
     *         The action to perform
     *
     * @throws NullPointerException
     *         If provided with null
     *
     * @since  4.0.0
     */",net.dv8tion.jda.api.utils.cache
"default void setActivityProvider(@Nullable final IntFunction<? extends Activity> activityProvider)
    {
        this.getShardCache().forEach(jda -> jda.getPresence().setActivity(activityProvider == null ? null : activityProvider.apply(jda.getShardInfo().getShardId())));
    }","/**
     * Sets provider that provider the {@link net.dv8tion.jda.api.entities.Activity Activity} for all shards.
     * <br>A Activity can be retrieved via {@link net.dv8tion.jda.api.entities.Activity#playing(String)}.
     * For streams you provide a valid streaming url as second parameter.
     *
     * <p>This will also change the provider for shards that are created in the future.
     *
     * @param  activityProvider
     *         Provider for an {@link net.dv8tion.jda.api.entities.Activity Activity} instance or null to reset
     *
     * @see    net.dv8tion.jda.api.entities.Activity#playing(String)
     * @see    net.dv8tion.jda.api.entities.Activity#streaming(String, String)
     */",net.dv8tion.jda.api.sharding
"@Nonnull
    @Unmodifiable
    default List<ThreadChannel> getThreadChannelsByName(@Nonnull String name, boolean ignoreCase)
    {
        return getThreadChannelCache().getElementsByName(name, ignoreCase);
    }","/**
     * Gets a list of all {@link ThreadChannel ThreadChannels}
     * in this Guild that have the same name as the one provided.
     * <br>If there are no channels with the provided name, then this returns an empty list.
     *
     * <p>These threads can also represent posts in {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  name
     *         The name used to filter the returned {@link ThreadChannel ThreadChannels}.
     * @param  ignoreCase
     *         Determines if the comparison ignores case when comparing. True - case insensitive.
     *
     * @return Possibly-empty immutable list of all ThreadChannel names that match the provided name.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public String getPrefix(String namespaceURI) {
		return uri2Prefix.get(namespaceURI);
	}","/**
	 * This method is not needed in this context, but can be implemented in a
	 * similar way.
	 */",net.winroad.wrdoclet.utils
"boolean canWrite(@Nullable Class<?> type, @Nullable String contentType);","/**
     * Whether the given object type is supported by this writer.
     *
     * @param type the type of object to check
     * @param contentType the content type for the write
     * @return {@code true} if writable, {@code false} otherwise
     */",discord4j.rest.http
"public static Function<RestInteraction, InteractionHandler> guild(Function<GuildInteraction, InteractionHandler> handlerFunction) {
        return new InteractionHandlerSpec(handlerFunction, it -> NOOP_HANDLER_FUNCTION.apply(it)).build();
    }","/**
     * Create an interaction handler that only accepts guild interactions, giving you access to methods specific to
     * {@link GuildInteraction} instances. To create an interaction handler capable of also handling direct messages,
     * see {@link #createHandler()}.
     *
     * @param handlerFunction a mapper to derive an {@link InteractionHandler} from a {@link GuildInteraction}
     * @return an interaction handling function, to be used in methods like
     * {@link #onGlobalCommand(ApplicationCommandRequest, Function)}
     */",discord4j.rest.interaction
"@Nonnull
    @CheckReturnValue
    GuildWelcomeScreenManager setEnabled(boolean enabled);","/**
     * Sets the enabled state of the welcome screen.
     *
     * @param  enabled
     *         {@code True} if the welcome screen should be enabled
     *
     * @return GuildWelcomeScreenManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nullable
    public String getNewNickname()
    {
        return getNewValue();
    }","/**
     * The new nickname
     *
     * @return The new nickname
     */",net.dv8tion.jda.api.events.guild.member.update
int getMaxLength();,"/**
     * The maximum amount of characters that can be written to submit the Modal.
     *
     * <p><b>This is -1 if no length has been set!</b>
     *
     * @return The maximum length of this TextInput component or -1
     */",net.dv8tion.jda.api.interactions.components.text
"public Mono<Channel> getOptionAsChannel(final String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asChannel)
            .orElse(Mono.empty());
    }","/**
     * Gets the value of the option corresponding to the provided name, if present, as a {@link Channel}.
     *
     * @param name The name of the option.
     * @return A {@link Mono} containing the value of the option corresponding to the provided name, if present, or empty otherwise.
     * If the option is present but its value cannot be converted to a channel, the {@link Mono} will complete with an error.
     */",discord4j.core.event.domain.interaction
boolean isAscendingOrder();,"/**
     * Whether this instance uses ascending order, from the lowest
     * position to the highest.
     *
     * @return True, if this uses ascending order
     */",net.dv8tion.jda.api.requests.restaction.order
"@Nonnull
    public User getUser()
    {
        return getMember().getUser();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.User User} instance
     * <br>Shortcut for {@code getMember().getUser()}
     *
     * @return The User instance
     */",net.dv8tion.jda.api.events.guild.member
"@Override
    public double getDtwRadius() {
        return this.dtwRadius;
    }","/**
     * Get the {@link DynamicTimeWarping} radius.
     *
     * @return the window width of Sakoe-Chiba band in terms of percentage of sequence length.
     */",jestures.core.recognition.gesturedata
"public ScheduledEvent getCurrent() {
        return current;
    }","/**
     * Return the {@link ScheduledEvent} associated with this update event.
     *
     * @return an updated scheduled event
     */",discord4j.core.event.domain.guild
"@Nonnull
    static CustomKeywordTriggerConfig patternFilter(@Nonnull String... patterns)
    {
        return new CustomKeywordTriggerConfig().addPatterns(patterns);
    }","/**
     * Trigger on messages containing certain keywords regex patterns.
     * <br>Keyword patterns are matched case-insensitively, and may also contain whitespace.
     *
     * <p>Patterns may use anything supported by the rust regex crate.
     * You can use a validator such as <a href=""https://rustexp.lpil.uk/"" target=""_blank"">Rustexp</a> to validate your pattern.
     *
     * <p>You can also use simple substring keywords using {@link #keywordFilter(String...)} or {@link CustomKeywordTriggerConfig#addKeywords(String...)}.
     *
     * @param  patterns
     *         The keyword patterns to match
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any of the patterns are empty, blank, or null</li>
     *             <li>If more than {@value AutoModRule#MAX_PATTERN_AMOUNT} patterns are added</li>
     *             <li>If any of the patterns is longer than {@value AutoModRule#MAX_PATTERN_LENGTH} characters</li>
     *         </ul>
     *
     * @return {@link CustomKeywordTriggerConfig}
     */",net.dv8tion.jda.api.entities.automod.build
"public static final Route STICKER_GET = Route.get(""/stickers/{sticker.id}"");","/**
     * Returns a sticker object for the given sticker ID.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/sticker#get-sticker"">
     * https://discord.com/developers/docs/resources/sticker#get-sticker</a>
     */",discord4j.rest.route
"public LegacyGuildCreateSpec setExplicitContentFilter(@Nullable Guild.ContentFilterLevel explicitContentFilter) {
        builder.explicitContentFilter(explicitContentFilter == null ?
                Possible.absent() : Possible.of(explicitContentFilter.getValue()));
        return this;
    }","/**
     * Sets the explicit content filter level for the created {@link Guild}.
     *
     * @param explicitContentFilter The explicit content filter level for the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public int getConcurrency()
        {
            return concurrency;
        }","/**
         * The concurrency level for this bot.
         * <br>This should not be a custom value as discord determines the eligible concurrency.
         * Using a different concurrency value could result in issues and possibly a ban due to login spam.
         *
         * @return The concurrency level
         *
         * @see    #setConcurrency(int)
         */",net.dv8tion.jda.api.utils
void setGestureLength(GestureLength length) throws IOException;,"/**
     * Set the gesture length.
     *
     * @param length
     *            the length
     * @throws IOException
     *             the {@link IOException}
     */",jestures.core.serialization
"public static long getSelfId(String token) {
        try {
            return Long.parseLong(new String(Base64.getDecoder()
                    .decode(token.split(""\\."")[0]), StandardCharsets.UTF_8));
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid token, make sure you're using the token from the "" +
                    ""developer portal Bot section and not the application client secret or public key."", e);
        }
    }","/**
     * Extracts the bot user's ID from the token used to authenticate requests.
     *
     * @param token The bot token used to authenticate requests.
     * @return The bot user's ID.
     */",discord4j.common.util
"@Override
    public CompletableFuture<Boolean> disconnect() {
        return isConnected().thenApplyAsync(connected -> {
            if (!connected)
                return true;

            this.hikariDataSource.close();
            return this.hikariDataSource.isClosed();
        });
    }",/** {@inheritDoc} */,io.github.heliumdioxid.database.mysql
"public MutablePair(final L left, final R right) {
        super();
        this.left = left;
        this.right = right;
    }","/**
     * Create a new pair instance.
     *
     * @param left  the left value, may be null
     * @param right  the right value, may be null
     */",net.dv8tion.jda.internal.utils.tuple
"public LegacyRoleCreateSpec setMentionable(boolean mentionable) {
        this.mentionable = mentionable;
        return this;
    }","/**
     * Sets whether the created {@link Role} should be mentionable.
     *
     * @param mentionable The role mentionable property.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public int getNewBoostCount()
    {
        return getNewValue();
    }","/**
     * The new boost count
     *
     * @return The new boost count
     */",net.dv8tion.jda.api.events.guild.update
"public static final Route GATEWAY_BOT_GET = Route.get(""/gateway/bot"");","/**
     * Returns an object with the same information as Get Gateway, plus a shards key, containing the recommended number
     * of shards to connect with (as an integer). Bots that want to dynamically/automatically spawn shard processes
     * should use this endpoint to determine the number of processes to run. This route should be called once when
     * starting up numerous shards, with the response being cached and passed to all sub-shards/processes. Unlike the
     * Get Gateway, this route should not be cached for extended periods of time as the value is not guaranteed to be
     * the same per-call, and changes as the bot joins/leaves guilds.
     *
     * @see <a href=""https://discord.com/developers/docs/topics/gateway#get-gateway-bot"">
     * https://discord.com/developers/docs/topics/gateway#get-gateway-bot</a>
     */",discord4j.rest.route
"@Nonnull
    EntitlementPaginationAction user(@Nullable UserSnowflake user);","/**
     * Filter {@link Entitlement Entitlement}s to retrieve by the given user ID
     *
     * @param user
     *        The {@link UserSnowflake UserSnowflake} used to filter or {@code null} to remove user filtering.
     *        This can be a member or user instance of {@link User#fromId(long)}
     *
     * @return The current {@link EntitlementPaginationAction EntitlementPaginationAction} for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.pagination
"@Nonnull
    public EmbedBuilder setColor(@Nullable Color color)
    {
        this.color = color == null ? Role.DEFAULT_COLOR_RAW : color.getRGB();
        return this;
    }","/**
     * Sets the Color of the embed.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/02-setColor.png"" target=""_blank"">Example</a></b>
     *
     * @param  color
     *         The {@link java.awt.Color Color} of the embed
     *         or {@code null} to use no color
     *
     * @return the builder after the color has been set
     *
     * @see    #setColor(int)
     */",net.dv8tion.jda.api
"public Publisher<?> onReactionRemoveEmoji(ReactionRemoveEmojiEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when the reactions for one emoji are removed from a message. Guild ID might be missing if this event
     * fires for a DM channel.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
damagee = event.getHitEntity();,"/**
     * Fix tnt minecart ignition
     */",com.massivecraft.factions.listeners
public abstract R getRight();,"/**
     * <p>Gets the right element from this pair.</p>
     *
     * <p>When treated as a key-value pair, this is the value.</p>
     *
     * @return the right element, may be null
     */",net.dv8tion.jda.internal.utils.tuple
"public String getCommandName() {
        return getInteraction().getCommandInteraction()
                .flatMap(ApplicationCommandInteraction::getName)
                .orElseThrow(IllegalStateException::new); // should always be present for app command auto-complete
    }","/**
     * Gets the name of the invoked command.
     *
     * @return The name of the invoked command.
     */",discord4j.core.event.domain.interaction
"@Nonnull
    Bag<SlashCommandReference> getSlashCommandsBag();","/**
     * A {@link org.apache.commons.collections4.Bag Bag} of mentioned {@link SlashCommandReference slash commands}.
     * <br>This can be used to retrieve the amount of times a slash commands was mentioned.
     *
     * <p>Be aware these mentions could be mentioning a non-existent command
     *
     * <p><b>Example</b><br>
     * <pre>{@code
     * void sendCount(Message msg)
     * {
     *     List<SlashCommandReference> mentions = msg.getMentions().getSlashCommands(); // distinct list, in order of appearance
     *     Bag<SlashCommandReference> count = msg.getMentions().getSlashCommandsBag();
     *     StringBuilder content = new StringBuilder();
     *     for (SlashCommandReference commandRef : mentions)
     *     {
     *         content.append(commandRef.getAsMention())
     *                .append("": "")
     *                .append(count.getCount(commandRef))
     *                .append(""\n"");
     *     }
     *     msg.getChannel().sendMessage(content.toString()).queue();
     * }
     * }</pre>
     *
     * @return {@link org.apache.commons.collections4.Bag Bag} of mentioned slash commands
     *
     * @see    #getSlashCommands()
     */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    AutoModRuleManager setExemptChannels(@Nonnull Collection<? extends GuildChannel> channels);","/**
     * Set which channels can bypass this rule.
     *
     * <p>No messages sent in this channel will trigger the rule.
     *
     * @param  channels
     *         The channels to add (up to {@value AutoModRule#MAX_EXEMPT_CHANNELS} channels)
     *
     * @throws IllegalArgumentException
     *         If null is provided or the number of channels exceeds {@value AutoModRule#MAX_EXEMPT_CHANNELS}
     *
     * @return AutoModRuleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @Unmodifiable
    List<TeamMember> getMembers();","/**
     * The {@link net.dv8tion.jda.api.entities.TeamMember Team Members}.
     *
     * @return Immutable list of team members
     */",net.dv8tion.jda.api.entities
"public Publisher<?> onThreadMemberUpdateEvent(ThreadMemberUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when the thread member object for the current user is updated. This event is documented for completeness,
     * but unlikely to be used by most bots. For bots, this event largely is just a signal that you are a member of the
     * thread.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    OffsetDateTime getTimeJoined();","/**
     * The time this {@link ThreadMember} joined the subscribed {@link ThreadChannel}.
     *
     * @return The time this {@link ThreadMember} joined the subscribed {@link ThreadChannel}.
     */",net.dv8tion.jda.api.entities
"public static final Route GUILD_MEMBER_GET = Route.get(""/guilds/{guild.id}/members/{user.id}"");","/**
     * Returns a guild member object for the specified user.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-member"">
     * https://discord.com/developers/docs/resources/guild#get-guild-member</a>
     */",discord4j.rest.route
"boolean canSync(@Nonnull IPermissionContainer targetChannel, @Nonnull IPermissionContainer syncSource);","/**
     * Whether the permissions of this PermissionHolder are good enough to sync the target channel with the sync source.
     * <br>This checks what permissions would be changed by the overrides of the sync source and whether the permission holder is able to set them on the target channel.
     *
     * <p>If the permission holder had {@link Permission#MANAGE_PERMISSIONS} in an override on the target channel or {@link Permission#ADMINISTRATOR} on one of its roles, then it can set any permission on the target channel.
     * Otherwise, the permission holder can only set permissions it also has in the channel.
     *
     * @param  targetChannel
     *         The target channel to check
     * @param  syncSource
     *         The sync source, for example the parent category (see {@link net.dv8tion.jda.api.entities.channel.attribute.ICategorizableChannel#getParentCategory()})
     *
     * @throws IllegalArgumentException
     *         If either of the channels is null or not from the same guild as this permission holder
     *
     * @return True, if the channels can be synced
     */",net.dv8tion.jda.api.entities
"public Builder count(int shardCount) {
            if (shardCount < 0) {
                throw new IllegalArgumentException(""shardCount < 0"");
            }
            this.shardCount = shardCount;
            return this;
        }","/**
         * Set the shard count parameter. Defaults to {@link #RECOMMENDED_SHARD_COUNT}. Must not be negative.
         *
         * @param shardCount the shard count sent to Discord while identifying each {@link GatewayClient}
         * @return this builder
         */",discord4j.core.shard
"Mono<StageInstanceData> onStageInstanceUpdate(int shardIndex, StageInstanceUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link StageInstanceCreate} gateway dispatch.
     * This will typically perform an insert operation on the related {@link StageInstanceData} that is already present
     * in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, returning the old state of the
     * {@link StageInstanceData} before the update
     */",discord4j.common.store.api.layout
"public Optional<ScheduledEvent> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Return the previous {@link ScheduledEvent} entity that was updated in this event. May not be present if the
     * entity is not stored.
     *
     * @return a previous version of an updated scheduled event, if present
     */",discord4j.core.event.domain.guild
"@Nonnull
    public String getCommandId()
    {
        return getTargetId();
    }","/**
     * The id of the command whose privileges have been changed.
     *
     * @return id of the command whose privileges have been changed.
     */",net.dv8tion.jda.api.events.interaction.command
"@Nonnull
    public ChannelType getChannelType()
    {
        return channelType;
    }","/**
     * The {@link ChannelType} for the {@link #getChannelId() channel id}.
     *
     * @return The channel type or {@link ChannelType#UNKNOWN}.
     *
     * @since  4.0.0
     */",net.dv8tion.jda.api.exceptions
"@Nonnull
    GuildWelcomeScreenManager getManager();","/**
     * Returns the {@link GuildWelcomeScreenManager Manager} for this guild's welcome screen.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_SERVER Permission.MANAGE_SERVER}
     * @throws IllegalStateException
     *         If welcome screen came from an {@link Invite}
     *
     * @return The GuildWelcomeScreenManager for this guild's welcome screen
     *
     * @see Guild#modifyWelcomeScreen()
     */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    default PermissionOverrideAction setPermissions(@Nullable Collection<Permission> grantPermissions, @Nullable Collection<Permission> denyPermissions)
    {
        return setAllowed(grantPermissions).setDenied(denyPermissions);
    }","/**
     * Combination of {@link #setAllowed(java.util.Collection)} and {@link #setDenied(java.util.Collection)}
     * <br>First sets the granted permissions and then the denied permissions.
     * <br>If a passed collection is {@code null} it resets the represented value to {@code 0} - no permission specifics.
     *
     * <p>Example: {@code setPermissions(EnumSet.of(Permission.VIEW_CHANNEL), EnumSet.of(Permission.MESSAGE_SEND, Permission.MESSAGE_EXT_EMOJI))}
     *
     * @param  grantPermissions
     *         A Collection of {@link net.dv8tion.jda.api.Permission Permissions}
     *         representing all explicitly granted Permissions for the PermissionOverride
     * @param  denyPermissions
     *         A Collection of {@link net.dv8tion.jda.api.Permission Permissions}
     *         representing all explicitly denied Permissions for the PermissionOverride
     *
     * @throws java.lang.IllegalArgumentException
     *         If the any of the specified Permissions is {@code null}
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     *
     * @see    java.util.EnumSet EnumSet
     * @see    net.dv8tion.jda.api.Permission#getRaw(java.util.Collection) Permission.getRaw(Collection)
     */",net.dv8tion.jda.api.requests.restaction
"public static int getInt(@Nonnull DataObject root, @Nonnull String path)
    {
        Integer integer = get(root, path, DataObject::getInt, DataArray::getInt);
        if (integer == null)
            pathError(path, ""int"");
        return integer;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     * <br>If the resulting value is a string, this will parse the string using {@link Integer#parseInt(String)}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The int value at the given path
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    @CheckReturnValue
    default GuildManager removeFeatures(@Nonnull String... features)
    {
        Checks.noneNull(features, ""Features"");
        return removeFeatures(Arrays.asList(features));
    }","/**
     * Removes a {@link Guild#getFeatures() Guild Feature} from the list of features.
     * <br>The list of available features, including which ones can be configured, is available in the
     * <a href=""https://discord.com/developers/docs/resources/guild#guild-object-guild-features"" target=""_blank"">Official Discord API Documentation</a>.
     *
     * @param  features
     *         The features to remove
     *
     * @throws IllegalArgumentException
     *         If any of the provided features is null
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    public CompletableFuture<Icon> downloadAsIcon()
    {
        return downloadAsIcon(getUrl());
    }","/**
     * Downloads the data of this attachment, and constructs an {@link Icon} from the data.
     *
     * @return {@link CompletableFuture} which holds an {@link Icon}.
     */",net.dv8tion.jda.api.utils
"@Deprecated
    public Jitter getJitter() {
        return jitter;
    }","/**
     * Retrieve the jitter to be applied on each backoff delay.
     *
     * @return a Jitter function
     * @deprecated only select implementations will use this value. Moving forward, consider also using
     * {@link #getJitterFactor()}
     */",discord4j.common.retry
"public AccessToken getAccessToken() {
        return Optional.ofNullable(accessToken.get())
                .orElseThrow(() -> new IllegalStateException(""No valid token present""));
    }","/**
     * Return the current access token for this client. Depending on the OAuth2 scopes used, you can extract information
     * from this object to perform additional tasks. For instance, if you used {@link Scope#BOT},
     * {@link AccessToken#getGuild()} will be available; if you used {@link Scope#WEBHOOK_INCOMING},
     * {@link AccessToken#getWebhook()} will be available.
     *
     * @return the current access token authorized for this client. This is an immutable instance, so you may need to
     * call this again if the token is refreshed.
     * @throws IllegalStateException if this access token was invalidated, indicating you might require reauthorization
     */",discord4j.oauth2
void onAccelerometerTracked(Vector3D accelerometer);,"/**
     * Accelerometer tracking.
     * <p>
     *
     * Vector valuse [-1, 1]
     *
     * @param accelerometer
     *            the {@link Vector3D} acceleromter
     */",jestures.core.tracking
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoice(@Nonnull String name, @Nonnull String value)
    {
        return replyChoices(new Command.Choice(name, value));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * @param  name
     *         The choice name to show to the user, 1-{@value OptionData#MAX_CHOICE_NAME_LENGTH} characters
     * @param  value
     *         The choice value, 1-{@value OptionData#MAX_CHOICE_VALUE_LENGTH} characters
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the choice name is empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the option type is not {@link OptionType#STRING}</li>
     *             <li>If the string value of any of the choices is empty or longer than {@value OptionData#MAX_CHOICE_VALUE_LENGTH}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nullable
        String getAvatarUrl();","/**
         * Gets the avatar url of the member, or null if they do not have
         * an avatar set.
         * 
         * @return possibly-null String containing the avatar url of the
         *         member
         */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction addChoice(@Nonnull String name, double value)
    {
        return addChoices(new Command.Choice(name, value));
    }","/**
     * Add up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * @param  name
     *         The choice name to show to the user, 1-{@value OptionData#MAX_CHOICE_NAME_LENGTH} characters
     * @param  value
     *         The choice value, must be between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the choice name is empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the value is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return The same callback action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.interactions
void onDerivativeJointTracked(Vector2D derivativeJoint);,"/**
     * Derivative tracking.
     * <p>
     * Vector values [-100, 100]
     *
     * @param derivativeJoint
     *            {@link Vector2D} derivative
     */",jestures.core.tracking
"public Optional<ReactionEmoji> getEmoji() {
        return this.data.emoji().toOptional().map(ReactionEmoji::of);
    }","/**
     * Gets the emoji of the poll question.
     *
     * @return An {@link Optional} containing the emoji of the poll question, or {@link Optional#empty()} if not present
     */",discord4j.core.object.entity.poll
"public LegacyEmbedCreateSpec setTitle(String title) {
        requestBuilder.title(title);
        return this;
    }","/**
     * Sets the title of the embed.
     *
     * @param title The title of the embed.
     * @return This spec.
     */",discord4j.core.spec.legacy
"SinksEventDispatcher.Builder eventSink(Function<Sinks.ManySpec, Sinks.Many<Event>> eventSinkFactory);","/**
         * Set the underlying {@link Sinks.Many} the dispatcher will use to queue and distribute events. Defaults
         * to using a multicast buffering sink.
         *
         * @param eventSinkFactory the custom sink factory for events
         * @return this builder
         */",discord4j.core.event
"@Nullable
    public static DataArray optArray(@Nonnull DataObject root, @Nonnull String path)
    {
        if (!path.endsWith(""?""))
            path += ""?"";
        return get(root, path, DataObject::getArray, DataArray::getArray);
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The {@link DataArray} at the given path, or null if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"public Snowflake getGuildId() {
        return Snowflake.of(dispatch.guildId());
    }","/**
     * Returns the ID of the guild for this event.
     *
     * @return a {@link Snowflake} guild ID for this event
     */",discord4j.core.event.domain.thread
"public String getCustomId() {
        return getInteraction().getCommandInteraction()
                .flatMap(ApplicationCommandInteraction::getCustomId)
                .orElseThrow(IllegalStateException::new); // should always be present for modal submits
    }","/**
     * Gets the developer defined custom ID of this modal
     *
     * @return The custom ID of this modal
     */",discord4j.core.event.domain.interaction
"public static CountInGuildAction countPresencesInGuild(long guildId) {
        return new CountInGuildAction(InGuildEntity.PRESENCES, guildId);
    }","/**
     * Creates an action to count the number of presences present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link CountInGuildAction}
     */",discord4j.common.store.action.read
"@Nonnull
    static ChunkingFilter include(@Nonnull long... ids)
    {
        Checks.notNull(ids, ""ID array"");
        if (ids.length == 0)
            return NONE;
        return (guild) -> {
            for (long id : ids)
            {
                if (id == guild)
                    return true;
            }
            return false;
        };
    }","/**
     * Factory method to chunk a whitelist of guild ids.
     * <br>All guilds that are not mentioned will use lazy loading.
     *
     * <p>This is useful to only chunk specific guilds like the hub server of a bot.
     *
     * @param  ids
     *         The ids that should be chunked
     *
     * @return The resulting filter
     */",net.dv8tion.jda.api.utils
"Route.CompiledRoute route = Route.Messages.GET_MESSAGE_HISTORY.compile(channel.getId()).withQueryParams(""after"", messageId);","/**
     * Constructs a {@link net.dv8tion.jda.api.entities.MessageHistory MessageHistory} with the initially retrieved history
     * of messages sent after the mentioned message ID (exclusive).
     * <br>The provided ID need not be valid!
     *
     * <p>Alternatively you can use {@link net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#getHistoryAfter(String, int) MessageChannel.getHistoryAfter(...)}
     *
     * <p><b>Example</b>
     * <br>{@code MessageHistory history = MessageHistory.getHistoryAfter(channel, messageId).limit(60).complete()}
     * <br>Will return a MessageHistory instance with the first 60 messages sent after the provided message ID.
     *
     * <p>Alternatively you can provide an epoch millisecond timestamp using {@link TimeUtil#getDiscordTimestamp(long) MiscUtil.getDiscordTimestamp(long)}:
     * <br><pre><code>
     * long timestamp = System.currentTimeMillis(); // or any other epoch millis timestamp
     * String discordTimestamp = Long.toUnsignedString(MiscUtil.getDiscordTimestamp(timestamp));
     * MessageHistory history = MessageHistory.getHistoryAfter(channel, discordTimestamp).complete();
     * </code></pre>
     *
     * @param  channel
     *         The {@link net.dv8tion.jda.api.entities.channel.middleman.MessageChannel MessageChannel}
     * @param  messageId
     *         The pivot ID to use
     *
     * @throws java.lang.IllegalArgumentException
     *         If any of the provided arguments is {@code null};
     *         Or if the provided messageId contains whitespace
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If this is a TextChannel and the currently logged in account does not
     *         have the permission {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY Permission.MESSAGE_HISTORY}
     *
     * @return {@link net.dv8tion.jda.api.entities.MessageHistory.MessageRetrieveAction MessageRetrieveAction}
     *
     * @see    net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#getHistoryAfter(String, int)  MessageChannel.getHistoryAfter(String, int)
     * @see    net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#getHistoryAfter(long, int)    MessageChannel.getHistoryAfter(long, int)
     * @see    net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#getHistoryAfter(Message, int) MessageChannel.getHistoryAfter(Message, int)
     */",net.dv8tion.jda.api.entities
"@Nonnull
    @Unmodifiable
    List<T> getCurrentOrder();","/**
     * Immutable List representing the currently selected order
     * of entities in this OrderAction instance
     *
     * @return Immutable List representing the current order
     */",net.dv8tion.jda.api.requests.restaction.order
void setCloudflare(long timestamp);,"/**
         * Set the current cloudflare rate-limit reset time.
         * <br>This is the rate-limit applied on the current IP.
         *
         * @param timestamp
         *        The timestamp when the cloudflare rate-limit expires (unix timestamp in milliseconds)
         */",net.dv8tion.jda.api.requests
"@Nonnull
    @CheckReturnValue
    GuildManager setFeatures(@Nonnull Collection<String> features);","/**
     * Configures the new {@link Guild#getFeatures() features} of the {@link Guild}.
     * <br>The list of available features, including which ones can be configured, is available in the
     * <a href=""https://discord.com/developers/docs/resources/guild#guild-object-guild-features"" target=""_blank"">Official Discord API Documentation</a>.
     *
     * <p><b>Example</b>
     * <pre>{@code
     * List<String> features = new ArrayList<>(guild.getFeatures());
     * features.add(""INVITES_DISABLED"");
     * guild.getManager().setFeatures(features).queue();
     * }</pre>
     *
     * @param  features
     *         The new features to use
     *
     * @throws IllegalArgumentException
     *         If the provided list is null
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public Mono<User> getUser(EntityRetrievalStrategy retrievalStrategy) {
        return gateway.withRetrievalStrategy(retrievalStrategy).getUserById(getUserId());
    }","/**
     * Requests to retrieve the user this voice state is for, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the user
     * @return A {@link Mono} where, upon successful completion, emits the {@link User} this voice state is for. If an
     * error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"public LegacyGuildCreateSpec setDefaultMessageNotificationLevel(@Nullable Guild.NotificationLevel notificationLevel) {
        builder.defaultMessageNotifications(notificationLevel == null ?
                Possible.absent() : Possible.of(notificationLevel.getValue()));
        return this;
    }","/**
     * Sets the default message notification level for the created {@link Guild}.
     *
     * @param notificationLevel The default notification level for the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    public Map<String, List<IntegrationPrivilege>> getAsMap()
    {
        return privileges;
    }","/**
     * Map containing all privileges, with the command-id as the Key, and a List of {@link IntegrationPrivilege} as Value.
     *
     * <br><b>If {@link #getApplicationPrivileges()} is not null, this will also contain the privileges applied directly
     * on this application with {@link SelfUser#getApplicationId()} as the Key.</b>
     *
     * @return Unmodifiable Map containing all privileges on this guild.
     */",net.dv8tion.jda.api.interactions.commands
"FLocation relative = flocation.getRelative(x, z);","/**
     * Checks if there is another faction within a given radius other than Wilderness. Used for HCF feature that
     * requires a 'buffer' between factions.
     *
     * @param flocation - center location.
     * @param faction   - faction checking for.
     * @param radius    - chunk radius to check.
     * @return true if another Faction is within the radius, otherwise false.
     */",com.massivecraft.factions.zcore.persist
"@Builder
    public ApplicationError(HttpStatus status, String message, String path, WebRequest request) {
        this.path = path;
        this.message = message;
        this.request = request;
        this.status = status.value();
        this.time = LocalDateTime.now();
        this.code = status.getReasonPhrase();
    }","/**
     * This constructor is one of the constructors used to initialize ApplicationError class fields.
     *
     * @param message -> String comes in and field must be not null
     * @param path -> String comes in and field must be not null
     * @param request -> WebRequest comes in and field must be not null
     * @since 1.0
     */",org.khasanof.citiesapi.response
"@Nonnull
    public ChannelType getChannelType()
    {
        return this.channel.getType();
    }","/**
     * The {@link ChannelType} of the channel the event was fired from.
     *
     * @return The {@link ChannelType} of the channel the event was fired from.
     */",net.dv8tion.jda.api.events.channel
"@Nonnull
    ScheduledEventAction setStartTime(@Nonnull TemporalAccessor startTime);","/**
     * <p>Sets the time that the new {@link ScheduledEvent} will start at.
     * Events of {@link ScheduledEvent.Type#EXTERNAL Type.EXTERNAL} will automatically
     * start at this time, but events of {@link ScheduledEvent.Type#STAGE_INSTANCE Type.STAGE_INSTANCE}
     * and {@link ScheduledEvent.Type#VOICE Type.VOICE} will need to be manually started,
     * and will automatically be cancelled a few hours after the start time if not.
     *
     * @param  startTime
     *         The time that the new {@link ScheduledEvent} should start at
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided start time is {@code null}, or takes place after the end time
     *
     * @return The current ScheduledEventAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
Flux<GuildChannel> getGuildChannels(Snowflake guildId);,"/**
     * Requests to retrieve the guild's channels.
     * <p>
     * The order of items emitted by the returned {@code Flux} is unspecified. Use
     * {@link OrderUtil#orderGuildChannels(Flux)} to consistently order channels.
     *
     * @param guildId the ID of the guild.
     * @return A {@link Flux} that continually emits the guild's {@link GuildChannel channels}. If an error is received,
     *         it is emitted through the {@code Flux}.
     */",discord4j.core.retriever
"public RestGuild getGuildById(final Snowflake guildId) {
        return RestGuild.create(this, guildId);
    }","/**
     * Requests to retrieve the guild represented by the supplied ID.
     *
     * @param guildId The ID of the guild.
     * @return A {@link RestGuild} as represented by the supplied ID.
     */",discord4j.rest
Bag<GuildMessageChannel> mentions = msg.getMentions().getChannelsBag(GuildMessageChannel.class);,"/**
     * An immutable list of all mentioned {@link net.dv8tion.jda.api.entities.channel.middleman.GuildChannel GuildChannels} of type {@code clazz}.
     * <br>If none were mentioned, this list is empty. Elements are sorted in order of appearance.
     *
     * <p><b>This may include GuildChannels from other {@link net.dv8tion.jda.api.entities.Guild Guilds}</b>
     *
     * <p><b>Example</b><br>
     * <pre>{@code
     * List<GuildMessageChannel> getCoolMessageChannels(Message msg)
     * {
     *     List<GuildMessageChannel> channels = msg.getMentions().getChannels(GuildMessageChannel.class);
     *     return channels.stream()
     *         .filter(channel -> channel.getName().contains(""cool""))
     *         .collect(Collectors.toList());
     * }
     * }</pre>
     *
     * @param  clazz
     *         The {@link GuildChannel} sub-class {@link Class class object} of the type of channel desired
     *
     * @throws java.lang.IllegalArgumentException
     *         If {@code clazz} is {@code null}
     *
     * @return Immutable list of mentioned GuildChannels that are of type {@code clazz}.
     */",net.dv8tion.jda.api.entities
"@Nonnull
    @Unmodifiable
    default List<Category> getCategoriesByName(@Nonnull String name, boolean ignoreCase)
    {
        return getCategoryCache().getElementsByName(name, ignoreCase);
    }","/**
     * Gets a list of all {@link Category Categories}
     * in this Guild that have the same name as the one provided.
     * <br>If there are no channels with the provided name, then this returns an empty list.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  name
     *         The name to check
     * @param  ignoreCase
     *         Whether to ignore case on name checking
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided name is {@code null}
     *
     * @return Immutable list of all categories matching the provided name
     */",net.dv8tion.jda.api.entities.channel.attribute
"@RequestMapping(value = ""update"", method = RequestMethod.PUT)
    public Mono<Void> update(@Valid @RequestBody CityUpdateDTO dto) {
        return service.update(dto);
    }","/**
     * This method sends the DTO to the service's update method.
     *
     * @param dto -> CityUpdateDTO comes from the corresponding request body
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.controller.city
Mono<Void> deleteInitialResponse();,"/**
     * Return a {@link Mono} that upon subscription, will delete the initial response sent when accepting this
     * interaction.
     *
     * @return a {@link Mono} where, upon successful completion, emits nothing, indicating the deletion was completed.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"static boolean isPermissionChecksEnabled()
    {
        return ManagerBase.isPermissionChecksEnabled();
    }","/**
     * Whether internal checks for missing permissions are enabled
     * <br>When this is disabled the chances of hitting a
     * {@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS ErrorResponse.MISSING_PERMISSIONS} is increased significantly,
     * otherwise JDA will check permissions and cancel the execution using
     * {@link net.dv8tion.jda.api.exceptions.InsufficientPermissionException InsufficientPermissionException}.
     *
     * @return True, if internal permission checks are enabled
     *
     * @see    #setPermissionChecksEnabled(boolean)
     */",net.dv8tion.jda.api.managers
"@Nonnull
    EntitlementPaginationAction excludeEnded(boolean excludeEnded);","/**
     * Whether to exclude subscriptions which have gone past their end date.
     * <p>Test entitlements which are created through the API do not have an end date.
     *
     * @param excludeEnded
     *        Whether to exclude ended subscriptions from returned {@link Entitlement Entitlement}s
     *
     * @return The current {@link EntitlementPaginationAction EntitlementPaginationAction} for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.pagination
"public Optional<VoiceState> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old {@link VoiceState} that has been updated in this event, if present.
     * This may not be available if {@code VoiceStates} are not stored.
     *
     * @return The old {@link VoiceState}, if present.
     */",discord4j.core.event.domain
"@Nonnull
    @Unmodifiable
    default List<PermissionOverride> getRolePermissionOverrides()
    {
        return getPermissionOverrides().stream()
                .filter(PermissionOverride::isRoleOverride)
                .collect(Helpers.toUnmodifiableList());
    }","/**
     * Gets all of the {@link net.dv8tion.jda.api.entities.Role Role} {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides}
     * that are part of this {@link GuildChannel GuildChannel}.
     *
     * @return Possibly-empty immutable list of all {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides}
     *         for {@link net.dv8tion.jda.api.entities.Role Roles}
     *         for this {@link GuildChannel GuildChannel}.
     */",net.dv8tion.jda.api.entities.channel.attribute
"Mono<Role> getRoleById(Snowflake guildId, Snowflake roleId);","/**
     * Requests to retrieve the role represented by the supplied IDs.
     *
     * @param guildId The ID of the guild.
     * @param roleId  The ID of the role.
     * @return A {@link Mono} where, upon successful completion, emits the {@link Role} as represented by the supplied
     *         IDs. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
"public Flux<Role> getCurrentRoles() {
        return getClient().getGuildRoles(getGuildId())
            .filter(role -> currentRoleIds.contains(role.getId().asLong()));
    }","/**
     * Requests to receive the list of {@link Role} roles that the {@link Member} is currently assigned.
     *
     * @return A {@link Flux} emitting the {@link Role} roles that the {@link Member} is assigned.
     */",discord4j.core.event.domain.guild
"@Nullable
    default Category getCategoryById(@Nonnull String id)
    {
        return (Category) getChannelCache().getElementById(ChannelType.CATEGORY, id);
    }","/**
     * Gets a {@link Category Category} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The snowflake ID of the wanted Category
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided ID is not a valid {@code long}
     *
     * @return Possibly-null {@link Category Category} for the provided ID.
     */",net.dv8tion.jda.api.entities.channel.attribute
"default Mono<Boolean> isMemberConnected(final Snowflake memberId) {
        return getVoiceStates()
                .map(VoiceState::getUserId)
                .any(memberId::equals);
    }","/**
     * Requests to determine if the member represented by the provided {@link Snowflake} is connected to this audio
     * channel.
     *
     * @param memberId The ID of the member to check.
     * @return A {@link Mono} where, upon successful completion, emits {@code true} if the member represented by the
     * provided {@link Snowflake} is connected to this audio channel, {@code false} otherwise. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"public StageInstance getStageInstance() {
        return stageInstance;
    }","/**
     * Get the created {@link StageInstance}
     *
     * @return The created {@link StageInstance}
     */",discord4j.core.event.domain
"public UdpClient getUdpClient() {
        return udpClient;
    }","/**
     * Returns the UDP client used to create voice protocol connections.
     *
     * @return the UDP client
     */",discord4j.voice
"@RequestMapping(value = ""create"", method = RequestMethod.POST)
    public Mono<Void> create(@Valid @RequestBody CityCreateDTO dto) {
        return service.create(dto);
    }","/**
     * This method sends the DTO to the service's create method.
     *
     * @param dto -> CityCreateDTO comes from the corresponding request body
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.controller.city
"void setPresence(@Nullable OnlineStatus status, boolean idle);","/**
     * Sets two presence fields of this session.
     * <br>The third field stays untouched.
     *
     * @param  status
     *         The {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} for this session
     *         (See {@link #setStatus(OnlineStatus)})
     * @param  idle
     *         Whether to mark this session as idle (useful for client accounts {@link #setIdle(boolean)})
     *
     * @throws java.lang.IllegalArgumentException
     *         If the specified OnlineStatus is {@link net.dv8tion.jda.api.OnlineStatus#UNKNOWN UNKNOWN}
     */",net.dv8tion.jda.api.managers
Mono<Void> unicast(ShardGatewayPayload<?> payload);,"/**
     * Send a single {@link ShardGatewayPayload} to a specific {@link GatewayClient} instance, given by the
     * routing information in {@link ShardGatewayPayload#getShardIndex()} and returns a {@link Mono} that
     * signals completion when it has been sent.
     *
     * @param payload a single outbound payload
     * @return a {@link Mono} completing when the payload is sent
     */",discord4j.gateway
"public static CountTotalAction countRoles() {
        return new CountTotalAction(CountableEntity.ROLES);
    }","/**
     * Creates an action to count the number of roles present in a store.
     *
     * @return a new {@link CountTotalAction}
     */",discord4j.common.store.action.read
"public RestChannel restChannel(ChannelData data) {
        return RestChannel.create(this, Snowflake.of(data.id()));
    }","/**
     * Requests to retrieve the channel represented by the supplied {@link ChannelData}.
     *
     * @param data The data of the channel.
     * @return A {@link RestChannel} as represented by the supplied data.
     */",discord4j.rest
"@Nullable
    public ImageProxy getOldBanner()
    {
        final String oldBannerUrl = getOldBannerUrl();
        return oldBannerUrl == null ? null : new ImageProxy(oldBannerUrl);
    }","/**
     * Returns an {@link ImageProxy} for this guild's old banner.
     * <p>
     * <b>Note:</b> the old banner may not always be downloadable as it might have been removed from Discord.
     *
     * @return Possibly-null {@link ImageProxy} of this guild's old banner
     *
     * @see    #getOldBannerUrl()
     */",net.dv8tion.jda.api.events.guild.update
"@Nullable
    public String getEmoji()
    {
        return emoji;
    }","/**
     * The Unicode Emoji of this {@link net.dv8tion.jda.api.entities.Role Role} that is used instead of a custom image.
     * If no emoji has been set, this returns {@code null}.
     * <p>The Role emoji can be modified using {@link RoleManager#setIcon(String)}.
     *
     * @return Possibly-null String containing the Role's Unicode Emoji.
     *
     * @since  4.3.1
     */",net.dv8tion.jda.api.entities
"public boolean isUnavailable() {
        return unavailable;
    }","/**
     * Gets whether or not the {@link Guild} is now unavailable.
     *
     * @return Whether or not the {@link Guild} is unavailable.
     */",discord4j.core.event.domain.guild
List<ReaderStrategy<?>> readers();,"/**
     * Retrieve the list of reader strategies to convert a response body.
     *
     * @return a list of reader strategies
     */",discord4j.rest.http
Mono<Channel> getChannelById(Snowflake channelId);,"/**
     * Requests to retrieve the channel represented by the supplied ID.
     *
     * @param channelId The ID of the channel.
     * @return A {@link Mono} where, upon successful completion, emits the {@link Channel} as represented by the
     *         supplied ID. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
"@Nullable
    public OffsetDateTime getOldTime()
    {
        return oldTime;
    }","/**
     * The old {@link GuildVoiceState#getRequestToSpeakTimestamp()}
     *
     * @return The old timestamp, or null if this member did not request to speak before
     */",net.dv8tion.jda.api.events.guild.voice
"@Nullable
    public String getOldVanityCode()
    {
        return getOldValue();
    }","/**
     * The old vanity code
     *
     * @return The old vanity code
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    @Override
    default AuditableRestAction<T> timeout(long timeout, @Nonnull TimeUnit unit)
    {
        return (AuditableRestAction<T>) RestAction.super.timeout(timeout, unit);
    }","/**
     * {@inheritDoc}
     */",net.dv8tion.jda.api.requests.restaction
"public static final Route WEBHOOK_MESSAGE_DELETE = Route.delete(""/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}"");","/**
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#delete-webhook-message"">
     * https://discord.com/developers/docs/resources/webhook#delete-webhook-message</a>
     */",discord4j.rest.route
"@Nonnull
    @Unmodifiable
    default List<SelectOption> getSelectedOptions()
    {
        StringSelectMenu menu = getComponent();
        List<String> values = getValues();
        return menu.getOptions()
                .stream()
                .filter(it -> values.contains(it.getValue()))
                .collect(Helpers.toUnmodifiableList());
    }","/**
     * This resolves the selected {@link #getValues() values} to the representative {@link SelectOption SelectOption} instances.
     * <br>It is recommended to check {@link #getValues()} directly instead of using the options.
     *
     * @return Immutable {@link List} of the selected options
     */",net.dv8tion.jda.api.interactions.components.selections
"static public BigInteger unhexlify(String hexString) {
        // Only creating BigInteger from hex string with leading zeroes is working properly
        return new BigInteger(""00"" + hexString, 16);
    }","/**
 * Copyright (c) 2016 Constantin Roganov
 * <p/>
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the ""Software""), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p/>
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * <p/>
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */",threegpp.milenage.biginteger
"@Nonnull
        Guild getGuild();","/**
         * The {@link Guild} for this update
         *
         * @return The guild
         */",net.dv8tion.jda.api.hooks
"final Route.CompiledRoute route = Route.Templates.DELETE_TEMPLATE.compile(guild.getId(), this.code);","/**
     * Deletes this template.
     * <br>Requires {@link net.dv8tion.jda.api.Permission#MANAGE_SERVER MANAGE_SERVER} in the template's guild.
     * Will throw an {@link net.dv8tion.jda.api.exceptions.InsufficientPermissionException InsufficientPermissionException} otherwise.
     *
     * @throws IllegalStateException
     *         If the account is not in the template's guild
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_SERVER MANAGE_SERVER} in the template's guild
     *
     * @return {@link net.dv8tion.jda.api.requests.RestAction RestAction}
     */",net.dv8tion.jda.api.entities.templates
"public Publisher<?> onMemberUpdate(MemberUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user's nickname or roles change in a guild.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public LegacyGuildEmojiCreateSpec setImage(Image image) {
        this.image = image.getDataUri();
        return this;
    }","/**
     * Sets the image for the created {@link GuildEmoji}.
     *
     * @param image The image used for the emoji.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    default RoleManager givePermissions(@Nonnull Permission... perms)
    {
        Checks.notNull(perms, ""Permissions"");
        return givePermissions(Arrays.asList(perms));
    }","/**
     * Adds the specified {@link net.dv8tion.jda.api.Permission Permissions} to the selected {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * <p>Permissions may only include already present Permissions for the currently logged in account.
     * <br>You are unable to give permissions you don't have!
     *
     * @param  perms
     *         The permission to give to the selected {@link net.dv8tion.jda.api.entities.Role Role}
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have permission to apply one of the specified permissions
     *
     * @return RoleManager for chaining convenience
     *
     * @see    #setPermissions(Collection)
     * @see    #setPermissions(Permission...)
     * @see    net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...) Permission.getRaw(Permission...)
     */",net.dv8tion.jda.api.managers
"public static PollAnswer of(String text) {
        return new PollAnswer(PollAnswerObject.builder().data(PollMediaObject.builder().text(text).build()).build());
    }","/**
     * Creates a poll answer with the given text.
     *
     * @param text the text of the poll answer
     * @return the poll answer
     */",discord4j.core.object.entity.poll
void setUserGestureLength(GestureLength length);,"/**
     * Set the frame Length.
     *
     * @param length
     *            the {@link GestureLength}
     */",recorder.view
"public static final Route GUILD_INTEGRATION_SYNC = Route.post(""/guilds/{guild.id}/integrations/{integration.id}/sync"");","/**
     * Sync an integration. Requires the 'MANAGE_GUILD' permission. Returns a 204 empty response on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#sync-guild-integration"">
     * https://discord.com/developers/docs/resources/guild#sync-guild-integration</a>
     */",discord4j.rest.route
"@Nonnull
    public EmbedBuilder clearFields()
    {
        this.fields.clear();
        return this;
    }","/**
     * Clears all fields from the embed, such as those created with the
     * {@link net.dv8tion.jda.api.EmbedBuilder#EmbedBuilder(net.dv8tion.jda.api.entities.MessageEmbed) EmbedBuilder(MessageEmbed)}
     * constructor or via the
     * {@link net.dv8tion.jda.api.EmbedBuilder#addField(net.dv8tion.jda.api.entities.MessageEmbed.Field) addField} methods.
     *
     * @return the builder after the field has been added
     */",net.dv8tion.jda.api
"public PollResultObject getData() {
        return this.data;
    }","/**
     * Gets the raw data of the poll result.
     *
     * @return the raw data of the poll result
     */",discord4j.core.object.entity.poll
"public DefaultReactionData getData() {
        return data;
    }","/**
     * Gets the {@link DefaultReactionData} associated to this wrapper
     *
     * @return the {@link DefaultReactionData} object wrapped by this object
     */",discord4j.core.object.reaction
"public LegacyGuildMemberEditSpec setNickname(@Nullable String nickname) {
        builder.nickOrNull(nickname);
        return this;
    }","/**
     * Sets a new nickname to the targeted {@link Member}. Requires the {@link Permission#MANAGE_NICKNAMES} permission.
     *
     * @param nickname The new nickname, can be {@code null} or an empty string to reset.
     * @return This spec.
     */",discord4j.core.spec.legacy
"default Mono<Message> getMessageById(Snowflake id) {
        return getClient().getMessageById(getId(), id);
    }","/**
     * Requests to retrieve the message as represented by the supplied ID.
     *
     * @param id The ID of the message.
     * @return A {@link Mono} where, upon successful completion, emits the {@link Message} as represented by the
     * supplied ID. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"public ExtendedInvite(final GatewayDiscordClient gateway, final InviteData data) {
        super(gateway, data);
    }","/**
     * Constructs a {@code ExtendedInvite} with an associated {@link GatewayDiscordClient} and Discord data.
     *
     * @param gateway The {@link GatewayDiscordClient} associated to this object, must be non-null.
     * @param data The raw data as represented by Discord, must be non-null.
     */",discord4j.core.object
"public static final Route APPLICATION_ROLE_CONNECTION_METADATA_MODIFY = Route.put(""/applications/{application.id}/role-connections/metadata"");","/**
     * Updates and returns a list of application role connection metadata objects for the given application.
     * An application can have a maximum of 5 metadata records.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/application-role-connection-metadata#modify-application-role-connection-metadata"">https://discord.com/developers/docs/resources/application-role-connection-metadata#modify-application-role-connection-metadata</a>
     */",discord4j.rest.route
"@Nonnull
    public CompletableFuture<Path> downloadToPath(int size)
    {
        return downloadToPath(getUrl(size));
    }","/**
     * Downloads the data of this image, at the specified size, and stores it in a file with the same name as the queried file name (this would be the last segment of the URL).
     * <br><b>The image may not be resized at any size, usually Discord only allows for a few powers of 2</b>, so numbers like 128, 256, 512..., 100 might also be a valid size.
     *
     * <p>If the image is not of a valid size, the CompletableFuture will hold an exception since the HTTP request would have returned a 404.
     *
     * <p><b>Implementation note:</b>
     *       The file is first downloaded into a temporary file, the file is then moved to its real destination when the download is complete.
     *
     * @param  size
     *         The width and height of this image, must be positive
     *
     * @throws IllegalArgumentException
     *         If any of the follow checks are true
     *         <ul>
     *             <li>The requested size is negative or 0</li>
     *             <li>The URL's scheme is neither http or https</li>
     *         </ul>
     *
     * @return {@link CompletableFuture} which holds a {@link Path} which corresponds to the location the file has been downloaded.
     */",net.dv8tion.jda.api.utils
"public Mono<EmojiData> modify(GuildEmojiModifyRequest request, @Nullable String reason) {
        return restClient.getEmojiService().modifyGuildEmoji(guildId, id, request, reason);
    }","/**
     * Modify this guild emoji. Requires the {@link Permission#MANAGE_EMOJIS} permission. Returns the updated emoji
     * object on success.
     *
     * @param request the guild emoji modify request
     * @param reason an optional reason for the audit log
     * @return a {@link Mono} where, upon subscription, emits the updated {@link EmojiData} on success. If an error
     * is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
Mono<Void> create(CityCreateDTO dto);,"/**
     * This method is used to create the city entity.
     *
     * @param dto -> CityCreateDTO comes in and all its fields must be not null
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.service.city
"public int getNormal() {
        return this.data.normal();
    }","/**
     * Count of normal reactions
     *
     * @return Count of normal reactions
     */",discord4j.core.object.reaction
"public Mono<TextChannel> getChannel() {
        return getClient().getChannelById(getChannelId()).cast(TextChannel.class);
    }","/**
     * Requests to retrieve the {@link TextChannel} the webhook belongs to.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link TextChannel} involved in the event.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain
"@Nonnull
    public static SlashCommandData slash(@Nonnull String name, @Nonnull String description)
    {
        return new CommandDataImpl(name, description);
    }","/**
     * Create a slash command builder.
     *
     * @param name
     *        The command name, 1-32 lowercase alphanumeric characters
     * @param description
     *        The command description, 1-100 characters
     *
     * @throws IllegalArgumentException
     *         If any of the following requirements are not met
     *         <ul>
     *             <li>The name must be lowercase alphanumeric (with dash), 1-32 characters long</li>
     *             <li>The description must be 1-100 characters long</li>
     *         </ul>
     *
     * @return {@link SlashCommandData} builder for slash commands
     */",net.dv8tion.jda.api.interactions.commands.build
"@Nonnull
    public ThreadChannel getThread()
    {
        return thread;
    }","/**
     * The event related {@link ThreadChannel} object
     *
     * @return The event related {@link ThreadChannel} object
     */",net.dv8tion.jda.api.events.thread
"@Nonnull
    @CheckReturnValue
    ScheduledEventManager setStartTime(@Nonnull TemporalAccessor startTime);","/**
     * Sets the time that the selected {@link ScheduledEvent} should start at.
     * Events of {@link ScheduledEvent.Type#EXTERNAL Type.EXTERNAL} will automatically
     * start at this time. Events of {@link ScheduledEvent.Type#STAGE_INSTANCE Type.STAGE_INSTANCE}
     * and {@link ScheduledEvent.Type#VOICE Type.VOICE} need to be manually started.
     * If the {@link ScheduledEvent} has not begun after its scheduled start time, it will be automatically cancelled after a few hours.
     *
     * @param  startTime
     *         The time that the selected {@link ScheduledEvent} is set to start at.
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the provided start time is {@code null}</li>
     *             <li>If the provided start time is before the end time</li>
     *             <li>If the provided start time is before the current time</li>
     *         </ul>
     * @return ScheduledEventManager for chaining convenience
     *
     * @see    #setEndTime(TemporalAccessor)
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @Unmodifiable
    default List<MediaChannel> getMediaChannels()
    {
        return getMediaChannelCache().asList();
    }","/**
     * Gets all {@link MediaChannel} in the cache.
     *
     * <p>This copies the backing store into a list. This means every call
     * creates a new list with O(n) complexity. It is recommended to store this into
     * a local variable or use {@link #getForumChannelCache()} and use its more efficient
     * versions of handling these values.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return An immutable List of {@link MediaChannel}.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    @CheckReturnValue
    PermissionOverrideAction setAllowed(long allowBits);","/**
     * Sets the value of explicitly granted permissions
     * using the bitwise representation of a set of {@link net.dv8tion.jda.api.Permission Permissions}.
     * <br>This value can be retrieved through {@link net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...) Permissions.getRaw(Permission...)}!
     * <br><b>Note: Permissions not marked as {@link net.dv8tion.jda.api.Permission#isChannel() isChannel()} will have no affect!</b>
     *
     * <p>All newly granted permissions will be removed from the currently set denied permissions.
     * <br>{@code allow = allowBits; deny = deny & ~allowBits;}
     *
     * @param  allowBits
     *         The <b>positive</b> bits representing the granted
     *         permissions for the new PermissionOverride
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     *
     * @see    #setAllowed(java.util.Collection) setAllow(Collection)
     * @see    #setAllowed(net.dv8tion.jda.api.Permission...) setAllow(Permission...)
     */",net.dv8tion.jda.api.requests.restaction
"public Mono<GuildScheduledEventData> modifyScheduledEvent(Snowflake eventId,
                                                              GuildScheduledEventModifyRequest request,
                                                              @Nullable String reason) {
        return restClient.getGuildService().modifyScheduledEvent(id, eventId.asLong(), request, reason);
    }","/**
     * Requests to modify a scheduled event. Requires the {@link Permission#MANAGE_EVENTS} permission.
     * Returns the modified event object on success.
     *
     * @param eventId The ID of the event
     * @param request the request body
     * @param reason an optional reason for the audit log
     * @return A {@link Mono} where, upon subscription, emits the modified {@link GuildScheduledEventData} on success.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"public List<String> getScopes() {
        return this.data.scopes();
    }","/**
     * Gets the scopes of this configuration
     *
     * @return The scopes of this configuration
     */",discord4j.core.object
"@Nonnull
    static TextInput.Builder create(@Nonnull String id, @Nonnull String label, @Nonnull TextInputStyle style)
    {
        return new Builder(id, label, style);
    }","/**
     * Creates a new TextInput Builder.
     *
     * @param  id
     *         The custom id
     * @param  label
     *         The label
     * @param  style
     *         The {@link TextInputStyle TextInputStyle}
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If either id or label are null or blank</li>
     *             <li>If style is null or {@link TextInputStyle#UNKNOWN UNKNOWN}</li>
     *             <li>If id is longer than {@value #MAX_ID_LENGTH} characters</li>
     *             <li>If label is longer than {@value #MAX_LABEL_LENGTH} characters</li>
     *         </ul>
     *
     * @return a new TextInput Builder.
     */",net.dv8tion.jda.api.interactions.components.text
"public LegacyMessageReferenceSpec setChannelId(Snowflake channelId) {
        requestBuilder.channelId(channelId.asString());
        return this;
    }","/**
     * Sets the ID of the originating message's channel.
     *
     * @param channelId The ID of the originating message's channel.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    public ThreadCreateMetadata addTags(@Nonnull ForumTagSnowflake... tags)
    {
        Checks.noneNull(tags, ""Tags"");
        Checks.check(tags.length <= ForumChannel.MAX_POST_TAGS, ""Cannot have more than %d post tags. Provided: %d"", ForumChannel.MAX_POST_TAGS, tags.length);
        Collections.addAll(this.appliedTags, tags);
        return this;
    }","/**
     * Apply the provided tags to the forum post.
     *
     * @param  tags
     *         The tags to apply
     *
     * @throws IllegalArgumentException
     *         If null or more than {@value ForumChannel#MAX_POST_TAGS} tags are provided
     *
     * @return The updated metadata instance
     */",net.dv8tion.jda.api.requests.restaction
"public int getNewFlagsRaw()
    {
        return User.UserFlag.getRaw(next);
    }","/**
     * Gets the new {@link net.dv8tion.jda.api.entities.User.UserFlag UserFlags} of the user and returns it as bitmask representation.
     *
     * @return The new bitmask representation of the {@link net.dv8tion.jda.api.entities.User.UserFlag UserFlags}.
     */",net.dv8tion.jda.api.events.user.update
"Mono<MessageData> editFollowupMessage(long messageId, MultipartRequest<WebhookMessageEditRequest> request);","/**
     * Modify the given message by ID using the provided request. This uses a webhook tied to the interaction ID and
     * token.
     *
     * @param messageId the message ID to be modified. You can convert IDs using {@link Snowflake} methods.
     * @param request the message request to be sent as followup
     * @return a {@link Mono} where, upon successful completion, emits the edited message. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"@Nonnull
    @CheckReturnValue
    CommandEditAction setName(@Nullable String name);","/**
     * Configure the name
     *
     * @param  name
     *         The lowercase alphanumeric (with dash) name, 1-32 characters. Use null to keep the current name.
     *
     * @throws IllegalArgumentException
     *         If the name is not alphanumeric or not between 1-32 characters
     *
     * @return The CommandEditAction instance, for chaining
     */",net.dv8tion.jda.api.requests.restaction
"public List<String> getValues() {
        return getInteraction().getCommandInteraction()
                .flatMap(ApplicationCommandInteraction::getValues)
                .orElseThrow(IllegalStateException::new); // should always be present for select menus
    }","/**
     * Get the string values selected in the menu.
     * If type of select menu is not {@link MessageComponent.Type#SELECT_MENU} then ids of entities will be returned.
     *
     * @return The string values selected in the menu.
     * @see SelectMenu.Option#getValue()
     */",discord4j.core.event.domain.interaction
"public static GetMemberByIdAction getMemberById(long guildId, long userId) {
        return new GetMemberByIdAction(guildId, userId);
    }","/**
     * Creates an action to retrieve data for the member corresponding to the given guild ID and user ID.
     *
     * @param guildId the guild ID
     * @param userId  the user ID
     * @return a new {@link GetMemberByIdAction}
     */",discord4j.common.store.action.read
"public JacksonResources withMapperFunction(Function<ObjectMapper, ObjectMapper> transformer) {
        return new JacksonResources(transformer.apply(objectMapper));
    }","/**
     * Return a new {@link JacksonResources} based on this current {@link ObjectMapper} but applying the given function.
     *
     * @param transformer a mapper to enrich the current {@link ObjectMapper}
     * @return a new instance with the {@code transformer} applied
     */",discord4j.common
"public Instant getJoinTimestamp() {
        return DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(data.joinTimestamp(), Instant::from);
    }","/**
     * Gets when the user joined the thread.
     *
     * @return When the user joined the thread.
     */",discord4j.core.object.entity
"public static GetGuildScheduledEventByIdAction getScheduledEventById(long guildId, long eventId) {
        return new GetGuildScheduledEventByIdAction(guildId, eventId);
    }","/**
     * Creates an action to retrieve data for the scheduled event corresponding to the given guild ID and event ID.
     *
     * @param guildId the guild ID
     * @param eventId the event ID
     * @return a new {@link GetGuildScheduledEventByIdAction}
     */",discord4j.common.store.action.read
public abstract void onDisable();,"/**
     * Method called when addon disabled.
     */",com.massivecraft.factions.addon
"public Mono<Guild> getGuild(EntityRetrievalStrategy retrievalStrategy) {
        return getClient().withRetrievalStrategy(retrievalStrategy).getGuildById(getGuildId());
    }","/**
     * Requests to retrieve the guild this user is associated to, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the guild
     * @return A {@link Mono} where, upon successful completion, emits the {@link Guild guild} this user is associated
     * to. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"@Override
    public CompletableFuture<Boolean> disconnect() {
        return isConnected().thenApplyAsync(connected -> {
            if (!connected)
                return true;

            this.mongoClient.close();
            this.mongoClient = null;
            return true;
        });
    }",/** {@inheritDoc} */,io.github.heliumdioxid.database.mongo
"public Mono<Void> createReaction(String emoji) {
        return restClient.getChannelService().createReaction(channelId, id, emoji);
    }","/**
     * Requests to add a reaction on this message.
     *
     * @param emoji The reaction to add on this message. emoji takes the form of name:id for custom guild emoji, or
     * Unicode characters.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the reaction was added on
     * this message. If an error is received, it is emitted through the {@code Mono}.
     * @see <a href=""https://discord.com/developers/docs/resources/channel#create-reaction"">Create Reaction</a>
     */",discord4j.rest.entity
"@Nonnull
        default String getGuildId()
        {
            return Long.toUnsignedString(getGuildIdLong());
        }","/**
         * Shortcut to access the guild id
         *
         * @return The guild id
         */",net.dv8tion.jda.api.hooks
"public GatewayReactorResources build() {
            return new GatewayReactorResources(this);
        }","/**
         * Creates a new instance of {@link GatewayReactorResources}.
         *
         * @return a new instance of {@link GatewayReactorResources}
         */",discord4j.gateway
"public LegacyGuildEditSpec setRegion(@Nullable String regionId) {
        requestBuilder.region(Possible.of(Optional.ofNullable(regionId)));
        return this;
    }","/**
     * Sets the voice region for the modified {@link Guild}, automatic if null.
     *
     * @param regionId The voice region for the guild, automatic if null.
     * @return This spec.
     */",discord4j.core.spec.legacy
"Mono<StickerData> getStickerById(long guildId, long stickerId);","/**
     * Retrieves data for the sticker corresponding to the given guild ID and sticker ID.
     *
     * @param guildId the guild ID
     * @param stickerId the sticker ID
     * @return A {@link Mono} emitting the sticker, or empty if not found
     * @since 3.2.3
     */",discord4j.common.store.api.layout
"@Nonnull
    Sticker.Type getType();","/**
     * The {@link Sticker.Type Sticker Type}
     *
     * @return The type
     */",net.dv8tion.jda.api.entities.sticker
"public static final Route GUILD_BAN_GET = Route.get(""/guilds/{guild.id}/bans/{user.id}"");","/**
     * Returns a ban object for the given user or a 404 not found if the ban cannot be found. Requires the 'BAN_MEMBERS'
     * permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-ban"">
     * https://discord.com/developers/docs/resources/guild#get-guild-ban</a>
     */",discord4j.rest.route
"public boolean isGuildLinkedRole() {
        return !data.guildConnections().isAbsent();
    }","/**
     * Gets whether this role is a guild's linked role
     *
     * @return Whether this role is a guild's linked role
     */",discord4j.core.object
"public static long getUnsignedLong(@Nonnull DataArray root, @Nonnull String path, long fallback)
    {
        Long longValue = get(root, path, (obj, key) -> obj.getUnsignedLong(key, fallback), (arr, index) -> arr.getUnsignedLong(index, fallback));
        return longValue == null ? fallback : longValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     * <br>If the resulting value is a string, this will parse the string using {@link Long#parseUnsignedLong(String)}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The unsigned long value at the given path, returning the fallback if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    public Guild.NSFWLevel getOldNSFWLevel()
    {
        return getOldValue();
    }","/**
     * The old {@link Guild.NSFWLevel NSFWLevel}
     *
     * @return The old NSFWLevel
     */",net.dv8tion.jda.api.events.guild.update
"public boolean isTemporary() {
        return getData().temporary().toOptional()
            .orElseThrow(IllegalStateException::new);
    }","/**
     * Gets whether this invite only grants temporary membership.
     *
     * @return {@code true} if this invite only grants temporary membership
     */",discord4j.core.object
"@Nullable
    public String getNewIconUrl()
    {
        return next == null ? null : String.format(Guild.ICON_URL, guild.getId(), next, next.startsWith(""a_"") ? ""gif"" : ""png"");
    }","/**
     * The url of the new icon
     *
     * @return The url of the new icon, or null
     */",net.dv8tion.jda.api.events.guild.update
"public InteractionPresentModalMono presentModal() {
        return InteractionPresentModalMono.of(this);
    }","/**
     * Requests to respond to the interaction by presenting a modal for the user to fill out and submit.
     * Once the user submits the modal, it will be received as a new {@link ModalSubmitInteractionEvent}. Properties
     * specifying how to build the modal can be set via the {@code withXxx} methods of the returned
     * {@link InteractionPresentModalMono}.
     *
     * @return A {@link InteractionPresentModalMono} where, upon successful completion, emits nothing; indicating the
     * interaction response has been sent. If an error is received, it is emitted through the
     * {@code InteractionPresentModalMono}.
     */",discord4j.core.event.domain.interaction
"@Deprecated
    public Mono<Void> reply(final Consumer<? super LegacyInteractionApplicationCommandCallbackSpec> spec) {
        return Mono.defer(
                () -> {
                    LegacyInteractionApplicationCommandCallbackSpec mutatedSpec =
                            new LegacyInteractionApplicationCommandCallbackSpec();

                    getClient().getRestClient().getRestResources()
                            .getAllowedMentions()
                            .ifPresent(mutatedSpec::setAllowedMentions);

                    spec.accept(mutatedSpec);

                    return createInteractionResponse(InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
                            mutatedSpec.asRequest());
                });
    }","/**
     * Requests to respond to the interaction with a message.
     *
     * @param spec A {@link Consumer} that provides a ""blank"" {@link LegacyInteractionApplicationCommandCallbackSpec} to
     *             be operated on.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the interaction response has
     * been sent. If an error is received, it is emitted through the {@code Mono}.
     * @deprecated use {@link #reply(InteractionApplicationCommandCallbackSpec)}, {@link #reply(String)} or {@link
     * #reply()} which offer an immutable approach to build specs
     */",discord4j.core.event.domain.interaction
"@Nonnull
    @CheckReturnValue
    default R mentionRoles(@Nonnull String... roleIds)
    {
        Checks.notNull(roleIds, ""Role IDs"");
        return mentionRoles(Arrays.asList(roleIds));
    }","/**
     * Used to provide a whitelist of {@link net.dv8tion.jda.api.entities.Role Roles} that should be pinged,
     * even when they would not be pinged otherwise according to the Set of allowed mention types.
     *
     * <p><b>Note:</b> When a Role is whitelisted this way, then parsing of Role mentions is automatically disabled.
     * <br>Also note that whitelisting users or roles implicitly disables parsing of other mentions, if not otherwise set via
     * {@link #setDefaultMentions(Collection)} or {@link #setAllowedMentions(Collection)}.
     *
     * @param  roleIds
     *         Ids of Roles that should be explicitly whitelisted to be pingable.
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The same instance for chaining
     *
     * @see    #setAllowedMentions(Collection)
     * @see    #setDefaultMentions(Collection)
     */",net.dv8tion.jda.api.utils.messages
"public RestResources getRestResources() {
        return restResources;
    }","/**
     * Obtain the {@link RestResources} associated with this {@link RestClient}.
     *
     * @return the current {@link RestResources} for this client
     */",discord4j.rest
"@Nullable
    public String getNewAvatarUrl()
    {
        return next == null ? null : String.format(AVATAR_URL, getSelfUser().getId(), next, next.startsWith(""a_"") ? "".gif"" : "".png"");
    }","/**
     * The new avatar url
     *
     * @return  The new avatar url
     */",net.dv8tion.jda.api.events.self
"This method could not be tested due to the lack of a Discord verified application
    public Mono<Void> deleteTestEntitlement(Snowflake entitlementId) {
        return getApplicationInfo().flatMap(applicationInfo -> {
            return getRestClient().getMonetizationService()
                .deleteTestEntitlement(applicationInfo.getId().asLong(), entitlementId.asLong());
        });
    }","/**
     * Delete a test entitlement with the given ID.
     *
     * @param entitlementId The ID of the entitlement.
     * @return A {@link Mono} that completes upon successful deletion.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core
"@Nonnull
    @CheckReturnValue
    default RoleManager revokePermissions(@Nonnull Permission... perms)
    {
        Checks.notNull(perms, ""Permissions"");
        return revokePermissions(Arrays.asList(perms));
    }","/**
     * Revokes the specified {@link net.dv8tion.jda.api.Permission Permissions} from the selected {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * <p>Permissions may only include already present Permissions for the currently logged in account.
     * <br>You are unable to revoke permissions you don't have!
     *
     * @param  perms
     *         The permission to give to the selected {@link net.dv8tion.jda.api.entities.Role Role}
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have permission to revoke one of the specified permissions
     *
     * @return RoleManager for chaining convenience
     *
     * @see    #setPermissions(Collection)
     * @see    #setPermissions(Permission...)
     * @see    net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...) Permission.getRaw(Permission...)
     */",net.dv8tion.jda.api.managers
"public IntegrationAccountData getData() {
        return data;
    }","/**
     * Gets the data of the account.
     *
     * @return The data of the account.
     */",discord4j.core.object
"public Publisher<?> onPollVoteAdd(PollVoteAddEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user votes in a poll.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public <R> Publisher<R> execute(StoreAction<R> action) {
        return actionMapper.findHandlerForAction(action)
                .<Publisher<R>>map(h -> h.apply(action))
                .orElse(Flux.empty());
    }","/**
     * Executes the given action. The action will be routed based on the concrete type of the action, and handled
     * according to the layout given when creating this {@link Store}. If the concrete type of the action is unknown
     * and no custom mapping was defined for it, it will return empty.
     *
     * @param action the action to execute
     * @param <R>    the type of data returned by the action
     * @return a {@link Publisher} where, upon successful completion, emits the result(s) produced by the execution of
     * the action, if any. If an error is received, it is emitted through the {@link Publisher}.
     */",discord4j.common.store
"public <T> Mono<T> exchange(DiscordWebRequest request, Class<T> responseType) {
        return withAuthorizedClient(request)
                .map(it -> it.exchange(getRouter()))
                .flatMap(res -> res.bodyToMono(responseType));
    }","/**
     * Execute a given {@link DiscordWebRequest} on behalf of a user and mapping the response to the given type, using
     * the credentials stored under this client. The token fetching, refreshing (if required) and API request are run
     * once this Mono is subscribed. For more control on the authorized request and response see
     * {@link #withAuthorizedClient(DiscordWebRequest)}.
     *
     * @param request the compiled Discord REST API request to be run on behalf of a user
     * @param responseType the expected response type from the API
     * @param <T> the response type
     * @return a Mono with the mapped response if successful, otherwise an error Mono
     */",discord4j.oauth2
"@Nonnull
    Interaction getInteraction();","/**
     * The interaction attached to this hook.
     * 
     * @throws IllegalStateException
     *         If this instance was created through {@link #from(JDA, String)}
     *
     * @return The {@link Interaction}
     */",net.dv8tion.jda.api.interactions
"public Optional<IntentSet> getIntents() {
        return Optional.ofNullable(intents);
    }","/**
     * Retrieve the intents which should be subscribed from the gateway when identifying.
     *
     * @return {@code Possible.absent()} when no intents are set or the raw intent value which should be subscribed
     */",discord4j.gateway
"@Nullable
    public OffsetDateTime getNewTimeBoosted()
    {
        return getNewValue();
    }","/**
     * The new boost time
     *
     * @return The new boost time
     */",net.dv8tion.jda.api.events.guild.member.update
void disconnect(@Nonnull Guild guild);,"/**
     * Requests to terminate the connection to a voice channel.
     *
     * @param guild
     *        The guild we were connected to
     *
     * @see   #reconnect(AudioChannel)
     */",net.dv8tion.jda.api.managers
int getColorRaw();,"/**
     * The raw color RGB value used for this role
     * <br>Defaults to {@link #DEFAULT_COLOR_RAW} if this role has no set color
     *
     * @return The raw RGB color value or default
     */",net.dv8tion.jda.api.entities
"@Deprecated
    public LegacyMessageEditSpec setEmbed(@Nullable Consumer<? super LegacyEmbedCreateSpec> spec) {
        if (spec != null) {
            final LegacyEmbedCreateSpec mutatedSpec = new LegacyEmbedCreateSpec();
            spec.accept(mutatedSpec);
            this.embeds = Possible.of(Optional.of(Collections.singletonList(mutatedSpec.asRequest())));
        } else {
            this.embeds = Possible.of(Optional.empty());
        }

        return this;
    }","/**
     * Sets the new rich content for the edited {@link Message}.
     *
     * @param spec An {@link LegacyEmbedCreateSpec} consumer used to attach rich content when creating a message.
     * @return This spec.
     * @deprecated Use {@link #addEmbed(Consumer)} or {@link #removeEmbeds()}
     */",discord4j.core.spec.legacy
"public Optional<AvatarDecoration> getAvatarDecoration() {
        return Possible.flatOpt(data.avatarDecoration())
            .map(data -> new AvatarDecoration(this.getClient(), data));
    }","/**
     * Gets the user avatar decoration, if present.
     *
     * @return The user avatar decoration, if present.
     */",discord4j.core.object.command
"@Deprecated
    public String getOldFactionTag() {
        return getFaction().getTag();
    }","/**
     * Get the faction tag before it was renamed.
     *
     * @return old faction tag.
     * @deprecated use getFaction().getTag() instead.
     */",com.massivecraft.factions.event
"@Nonnull
    AuditLogPaginationAction type(@Nullable ActionType type);","/**
     * Filters retrieved entities by the specified {@link net.dv8tion.jda.api.audit.ActionType ActionType}
     *
     * @param  type
     *         {@link net.dv8tion.jda.api.audit.ActionType ActionType} used to filter,
     *         or {@code null} to remove type filtering
     *
     * @return The current AuditLogPaginationAction for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.pagination
"@Nonnull
    @CheckReturnValue
    default MessageCreateAction sendStickers(@Nonnull StickerSnowflake... stickers)
    {
        Checks.notEmpty(stickers, ""Stickers"");
        return sendStickers(Arrays.asList(stickers));
    }","/**
     * Send up to 3 stickers in this channel.
     * <br>Bots can only send {@link GuildSticker GuildStickers} from the same {@link net.dv8tion.jda.api.entities.Guild}.
     * Bots cannot use {@link net.dv8tion.jda.api.entities.sticker.StandardSticker StandardStickers}.
     *
     * @param  stickers
     *         The 1-3 stickers to send
     *
     * @throws MissingAccessException
     *         If the currently logged in account does not have {@link Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} in this channel
     * @throws InsufficientPermissionException
     *         <ul>
     *           <li>If this is a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND_IN_THREADS Permission.MESSAGE_SEND_IN_THREADS}</li>
     *           <li>If this is not a {@link ThreadChannel} and the bot does not have {@link Permission#MESSAGE_SEND Permission.MESSAGE_SEND}</li>
     *         </ul>
     * @throws IllegalArgumentException
     *         <ul>
     *           <li>If any of the provided stickers is a {@link GuildSticker},
     *               which is either {@link GuildSticker#isAvailable() unavailable} or from a different guild.</li>
     *           <li>If the list is empty or has more than 3 stickers</li>
     *           <li>If null is provided</li>
     *         </ul>
     *
     * @return {@link MessageCreateAction}
     *
     * @see    Sticker#fromId(long)
     */",net.dv8tion.jda.api.entities.channel.middleman
"public static final Route GUILD_WIDGET_MODIFY = Route.patch(""/guilds/{guild.id}/widget"");","/**
     * Modify a guild widget object for the guild. All attributes may be passed in with JSON and modified. Requires the
     * 'MANAGE_GUILD' permission. Returns the updated guild widget object.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#modify-guild-widget"">
     * https://discord.com/developers/docs/resources/guild#modify-guild-widget</a>
     */",discord4j.rest.route
"Mono<GuildScheduledEventData> onGuildScheduledEventUpdate(int shardIndex, GuildScheduledEventUpdate dispatch);","/**
     * Updates the internal state of the store according to the {@link GuildScheduledEventUpdate} gateway dispatch. This
     * will typically perform an update operation on a related {@link GuildScheduledEventData} already present in the
     * store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning {@link GuildScheduledEventData}
     * in a state before the update
     */",discord4j.common.store.api.layout
"@Nonnull
    @Override
    public List<ItemComponent> getComponents()
    {
        return components;
    }","/**
     * Mutable list of components in this ActionRow.
     * <br>ActionRows should not be empty and are limited to 5 buttons.
     *
     * @return The list of components
     */",net.dv8tion.jda.api.interactions.components
"@Nullable
    default StandardSticker getCoverSticker()
    {
        long id = getCoverIdLong();
        if (id == 0L)
            return null;
        return getStickers().stream().filter(s -> s.getIdLong() == id).findFirst().orElse(null);
    }","/**
     * The {@link StandardSticker} shown as cover.
     *
     * @return The cover sticker, or {@code null} if there is no cover
     */",net.dv8tion.jda.api.entities.sticker
"public List<ApplicationCommandInteractionOption> getOptions() {
        return getInteraction().getCommandInteraction()
                .orElseThrow(IllegalStateException::new) // should always be present for app command auto-complete
                .getOptions();
    }","/**
     * Gets the options of the invoked command.
     *
     * @return The options of the invoked command.
     */",discord4j.core.event.domain.interaction
"default boolean isThreadOwner()
    {
        return getThread().getOwnerIdLong() == getIdLong();
    }","/**
     * True, if this {@link ThreadMember} owns the subscribed {@link ThreadChannel}.
     *
     * @return True, if this {@link ThreadMember} owns the subscribed {@link ThreadChannel}.
     */",net.dv8tion.jda.api.entities
FollowupInteractionHandler acknowledge();,"/**
     * Build an interaction handler that will acknowledge this request, displaying a loading state.
     *
     * @return a followup handler to continue processing this interaction asynchronously, until the interaction token
     * bound to this interaction expires after 15 minutes.
     */",discord4j.rest.interaction
"@Nonnull
    default ForumPostAction setTags(@Nonnull ForumTagSnowflake... tags)
    {
        Checks.noneNull(tags, ""Tags"");
        return setTags(Arrays.asList(tags));
    }","/**
     * Configures that tags which should be applied to the new post.
     * <br>Some forums require setting at least one tag.
     *
     * @param  tags
     *         Up to {@value ForumChannel#MAX_POST_TAGS} tags to apply
     *
     * @throws IllegalArgumentException
     *         If null is provided or more than {@value ForumChannel#MAX_POST_TAGS} tags are provided,
     *         or if at least one is {@link ForumChannel#isTagRequired() required} and none were provided.
     *
     * @return The current ForumPostAction for chaining convenience
     *
     * @see    ForumTagSnowflake#fromId(long)
     */",net.dv8tion.jda.api.requests.restaction
"public Optional<ApplicationCommandInteractionOption> getOption(final String name) {
        return data.options().toOptional().orElse(Collections.emptyList()).stream()
                .filter(data -> data.name().equals(name))
                .findFirst()
                .map(data -> new ApplicationCommandInteractionOption(gateway, data, guildId, resolved));
    }","/**
     * Gets the option corresponding to the provided name, if present.
     *
     * @param name The name of the option.
     * @return The option corresponding to the provided name, if present.
     */",discord4j.core.object.command
"@Nonnull
    @CheckReturnValue
    CommandEditAction setDescription(@Nullable String description);","/**
     * Configure the description
     *
     * @param  description
     *         The description, 1-100 characters. Use null to keep the current description.
     *
     * @throws IllegalArgumentException
     *         If the name is null or not between 1-100 characters
     *
     * @return The CommandEditAction instance, for chaining
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    IPermissionContainer getChannel();","/**
     * The {@link IPermissionContainer} this will be created in
     *
     * @return The channel
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    PermissionOverride getPermissionOverride(@Nonnull IPermissionHolder permissionHolder);","/**
     * The {@link net.dv8tion.jda.api.entities.PermissionOverride} relating to the specified {@link net.dv8tion.jda.api.entities.Member Member} or {@link net.dv8tion.jda.api.entities.Role Role}.
     * If there is no {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride} for this {@link GuildChannel GuildChannel}
     * relating to the provided Member or Role, then this returns {@code null}.
     *
     * @param  permissionHolder
     *         The {@link net.dv8tion.jda.api.entities.Member Member} or {@link net.dv8tion.jda.api.entities.Role Role} whose
     *         {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride} is requested.
     *
     * @throws IllegalArgumentException
     *         If the provided permission holder is null, or from a different guild
     *
     * @return Possibly-null {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *         relating to the provided Member or Role.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public LegacyTextChannelCreateSpec setNsfw(boolean nsfw) {
        requestBuilder.nsfw(nsfw);
        return this;
    }","/**
     * Sets whether the created {@link TextChannel} is NSFW (not safe for work).
     *
     * @param nsfw The channel nsfw property.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    ChannelAction<StageChannel> createStageChannel(@Nonnull String name);","/**
     * Creates a new {@link StageChannel StageChannel} with this Category as parent.
     * For this to be successful, the logged in account has to have the
     * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission in this Category.
     *
     * <p>This will copy all {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides} of this Category!
     * Unless the bot is unable to sync it with this category due to permission escalation.
     * See {@link IPermissionHolder#canSync(IPermissionContainer, IPermissionContainer)} for details.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_CHANNELS MAX_CHANNELS}
     *     <br>The maximum number of channels were exceeded</li>
     * </ul>
     *
     * @param  name
     *         The name of the StageChannel to create (up to {@value Channel#MAX_NAME_LENGTH} characters)
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL} permission
     * @throws IllegalArgumentException
     *         If the provided name is {@code null}, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters
     *
     * @return A specific {@link ChannelAction ChannelAction}
     *         <br>This action allows to set fields for the new StageChannel before creating it
     */",net.dv8tion.jda.api.entities.channel.concrete
"static EventDispatcher withLatestEvents(int bufferSize) {
        return builder()
                .eventProcessor(EmitterProcessor.create(bufferSize, false))
                .overflowStrategy(FluxSink.OverflowStrategy.LATEST)
                .build();
    }","/**
     * Create an {@link EventDispatcher} that will buffer incoming events up to the given {@code bufferSize} elements,
     * where earliest events will be dropped in favor of retaining the latest ones. Startup events collected before
     * the first subscription are only forwarded to that subscriber.
     *
     * @param bufferSize the number of events to keep in the backlog
     * @return an {@link EventDispatcher} keeping the latest events backed by an {@link EmitterProcessor}
     * @deprecated due to Processor API being deprecated, we recommend moving to {@link #replayingWithSize(int)} for a
     * dispatcher that is able to retain a given number of latest events
     */",discord4j.core.event
"public LegacyGuildCreateFromTemplateSpec setName(String name) {
        this.name = name;
        return this;
    }","/**
     * Sets the name for the created guild.
     *
     * @param name The name of the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public StageInstanceData getData() {
        return this.data;
    }","/**
     * Gets the data of the stage instance.
     *
     * @return The data of the stage instance.
     */",discord4j.core.object.entity
"default <E extends Event, T> Flux<T> on(Class<E> eventClass, Function<E, Publisher<T>> mapper) {
        return on(eventClass)
                .flatMap(event -> Flux.defer(() -> mapper.apply(event))
                        .contextWrite(ctx -> ctx.put(LogUtil.KEY_SHARD_ID, event.getShardInfo().getIndex()))
                        .onErrorResume(t -> {
                            log.warn(format(Context.of(LogUtil.KEY_SHARD_ID, event.getShardInfo().getIndex()),
                                    ""Error while handling {}""), eventClass.getSimpleName(), t);
                            return Mono.empty();
                        }));
    }","/**
     * Retrieves a {@link Flux} with elements of the given {@link Event} type, to be processed through a given
     * {@link Function} upon subscription. Errors occurring within the mapper will be logged and discarded, preventing
     * the termination of the ""infinite"" event sequence. See {@link Event} class for the list of possible event classes.
     * <p>
     * There are multiple ways of using this event handling method, for example:
     * <pre>
     * client.on(MessageCreateEvent.class, event -&gt; {
     *         // myCodeThatMightThrow should return a Reactor type (Mono or Flux)
     *         return myCodeThatMightThrow(event);
     *     })
     *     .subscribe();
     *
     * client.on(MessageCreateEvent.class, event -&gt; {
     *         // myCodeThatMightThrow *can* be blocking, so wrap it in a Reactor type
     *         return Mono.fromRunnable(() -&gt; myCodeThatMightThrow(event));
     *     })
     *     .subscribe();
     * </pre>
     * <p>
     * Continuing the chain after {@code on(class, event -> ...)} will require your own error handling strategy.
     * Check the docs for {@link #on(Class)} for more details.
     *
     * @param eventClass the event class to obtain events from
     * @param mapper an event mapping function called on each event. If you do not wish to perform further operations
     * you can return {@code Mono.empty()}.
     * @param <E> the type of the event class
     * @param <T> the type of the event mapper function
     * @return a new {@link Flux} with the type resulting from the given event mapper
     */",discord4j.core.event
"Get the size of the file
            long length = file.length();","/**
     * Used as an alternate to Java's nio Files.readAllBytes.
     *
     * <p>This customized version for File is provide (instead of just using {@link #readFully(java.io.InputStream)} with a FileInputStream)
     * because with a File we can determine the total size of the array and do not need to have a buffer.
     * This results in a memory footprint that is half the size of {@link #readFully(java.io.InputStream)}
     *
     * <p>Code provided from <a href=""http://stackoverflow.com/a/6276139"">Stackoverflow</a>
     *
     * @param  file
     *         The file from which we should retrieve the bytes from
     *
     * @throws java.io.IOException
     *         Thrown if there is a problem while reading the file.
     *
     * @return A byte[] containing all of the file's data
     */",net.dv8tion.jda.internal.utils
"@Nonnull
    @CheckReturnValue
    RoleManager setIcon(@Nullable String emoji);","/**
     * Sets the Unicode Emoji of this {@link net.dv8tion.jda.api.entities.Role Role} instead of a custom image.
     *
     * @param  emoji
     *         The new Unicode Emoji for this {@link net.dv8tion.jda.api.entities.Role Role}
     *         or {@code null} to reset
     *
     * @return RoleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public LegacyGuildCreateSpec addRole(Consumer<? super LegacyRoleCreateSpec> legacyroleSpec) {
        final LegacyRoleCreateSpec mutatedSpec = new LegacyRoleCreateSpec();
        legacyroleSpec.accept(mutatedSpec);
        roles.add(mutatedSpec.asRequest());
        return this;
    }","/**
     * Adds the role spec to the list of roles for the created {@link Guild}.
     *
     * @param legacyroleSpec The role spec to add to the list of roles.
     * @return This spec.
     */",discord4j.core.spec.legacy
List<WriterStrategy<?>> writers();,"/**
     * Retrieve the list of writer strategies to convert a request body.
     *
     * @return a list of writer strategies
     */",discord4j.rest.http
"public static DiscordOAuth2Client createFromCredentials(RestClient restClient,
                                                            ClientCredentialsGrantRequest request) {
        return new DiscordOAuth2Client(restClient, request.clientId(), request.clientSecret(),
                service -> service.exchangeClientCredentials(request).map(AccessToken::new));
    }","/**
     * Create an OAuth2 client by performing a client credentials flow. This is a quick and easy way as a bot developer
     * to get an access token for testing purposes. Build a {@link ClientCredentialsGrantRequest} using your
     * application parameters and intended {@link Scope} values, separated by spaces.
     *
     * @param restClient a Discord REST API client for performing requests
     * @param request an object with all parameters required to complete a client credentials grant request
     * @return a client that can work with a valid token for your user to perform API requests
     */",discord4j.oauth2
"public Publisher<?> onTextChannelCreate(TextChannelCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild text channel is created.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public HttpClient getHttpClient() {
        return httpClient;
    }","/**
     * Get the {@link HttpClient} configured by this provider.
     *
     * @return a Reactor Netty HTTP client ready to perform requests
     */",discord4j.common
"public static final Route CURRENT_USER_GUILDS_GET = Route.get(""/users/@me/guilds"");","/**
     * Returns a list of partial guild objects the current user is a member of. Requires the guilds OAuth2 scope.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/user#get-current-user-guilds"">
     * https://discord.com/developers/docs/resources/user#get-current-user-guilds</a>
     */",discord4j.rest.route
"public Mono<Void> presentModal(String title, String customId, Collection<LayoutComponent> components) {
        return presentModal().withTitle(title).withCustomId(customId).withComponents(components);
    }","/**
     * Requests to respond to the interaction by presenting a modal for the user to fill out and submit.
     * Once the user submits the modal, it will be received as a new {@link ModalSubmitInteractionEvent}.
     *
     * @param title The title of the modal
     * @param customId A developer defined ID for the modal
     * @param components A collection of components the modal should contain
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the interaction response has
     * been sent. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.interaction
"public CategoryEditMono edit() {
        return CategoryEditMono.of(this);
    }","/**
     * Requests to edit this category. Properties specifying how to edit this category can be set via the {@code
     * withXxx} methods of the returned {@link CategoryEditMono}.
     *
     * @return A {@link CategoryEditMono} where, upon successful completion, emits the edited {@link Category}. If an
     * error is received, it is emitted through the {@code CategoryEditMono}.
     */",discord4j.core.object.entity.channel
"public Mono<GuildEmoji> edit(GuildEmojiEditSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(
                () -> gateway.getRestClient().getEmojiService()
                        .modifyGuildEmoji(getGuildId().asLong(), getId().asLong(), spec.asRequest(),
                                spec.reason()))
                .map(data -> new GuildEmoji(gateway, data, getGuildId().asLong()));
    }","/**
     * Requests to edit this guild emoji.
     *
     * @param spec an immutable object that specifies how to edit this emoji
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link GuildEmoji}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"public LegacyAuditLogQuerySpec setResponsibleUser(final Snowflake userId) {
        request.put(""user_id"", userId.asLong());
        return this;
    }","/**
     * Sets the query to only return entries where the user specified is responsible for the action.
     *
     * @param userId The {@code Snowflake} of the responsible user to filter by.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nullable
    Message getMessage();","/**
     * Message this modal came from, if it was a reply to a {@link net.dv8tion.jda.api.interactions.components.ComponentInteraction ComponentInteraction}.
     *
     * @return The message the component is attached to, or {@code null}
     */",net.dv8tion.jda.api.interactions.modals
final Employee manager = this.employeeService.findById(this.credentialService.findByUsername(authentication.getName()).getEmployee().getEmployeeId());,"/**
	 * display manager-info view
	 * @param authentication
	 * @param model
	 * @return manager-info view (using default view resolver)
	 */",com.pfa.app.controller.web.manager
"public Category(final GatewayDiscordClient gateway, final ChannelData data) {
        super(gateway, data);
    }","/**
     * Constructs an {@code Category} with an associated {@link GatewayDiscordClient} and Discord data.
     *
     * @param gateway The {@link GatewayDiscordClient} associated to this object, must be non-null.
     * @param data The raw data as represented by Discord, must be non-null.
     */",discord4j.core.object.entity.channel
"@Nonnull
    @Unmodifiable
    default List<ForumChannel> getForumChannels()
    {
        return getGuild().getForumChannelCache().applyStream(stream ->
            stream.filter(channel -> equals(channel.getParentCategory()))
                  .sorted()
                  .collect(Helpers.toUnmodifiableList())
        );
    }","/**
     * All {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels} listed for this Category
     *
     * @return Immutable list of all child ForumChannels
     */",net.dv8tion.jda.api.entities.channel.concrete
"public Guild getCurrent() {
        return current;
    }","/**
     * Gets the current version of the {@link Guild} involved in this event.
     *
     * @return The current {@link Guild} involved in this event.
     */",discord4j.core.event.domain.guild
"@Nullable
    public TemplateChannel getAfkChannel()
    {
        return this.afkChannel;
    }","/**
     * Provides the {@link net.dv8tion.jda.api.entities.templates.TemplateChannel TemplateChannel} that has been set as the channel
     * which {@link net.dv8tion.jda.api.entities.Member Members} will be moved to after they have been inactive in a
     * {@link net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel VoiceChannel} for longer than {@link #getAfkTimeout()}.
     * <br>If no channel has been set as the AFK channel, this returns {@code null}.
     *
     * @return Possibly-null {@link net.dv8tion.jda.api.entities.templates.TemplateChannel TemplateChannel} that is the AFK Channel.
     */",net.dv8tion.jda.api.entities.templates
"public Publisher<?> onTextChannelDelete(TextChannelDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild text channel is deleted.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static final Route GUILD_SCHEDULED_EVENT_CREATE = Route.post(""/guilds/{guild.id}/scheduled-events"");","/**
     * Creates a guild scheduled event for the given guild. Returns a scheduled event object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event"">
     * ttps://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    default RestAction<Message> crosspostMessageById(long messageId)
    {
        return crosspostMessageById(Long.toUnsignedString(messageId));
    }","/**
     * Attempts to crosspost the provided message.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#ALREADY_CROSSPOSTED ALREADY_CROSSPOSTED}
     *     <br>The target message has already been crossposted.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The request was attempted after the account lost access to the
     *         {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed, or after {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}
     *         was revoked in the {@link TextChannel TextChannel}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The request was attempted after the account lost
     *         {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE} in the TextChannel.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
     *         the message it referred to has already been deleted.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>The request was attempted after the channel was deleted.</li>
     * </ul>
     *
     * @param  messageId
     *         The messageId to crosspost
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have
     *         {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} in this channel.
     *
     * @return {@link net.dv8tion.jda.api.requests.RestAction} - Type: {@link Message}
     *
     * @since  4.2.1
     */",net.dv8tion.jda.api.entities.channel.concrete
int getDefaultThreadSlowmode();,"/**
     * The default {@link ISlowmodeChannel#getSlowmode() slowmode} for thread channels that is copied on thread creation.
     * <br>Users have to wait this amount of seconds before sending another message to the same thread.
     *
     * @return The default slowmode seconds for new threads, or {@code 0} if unset
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Mono<Poll> getPoll() {
        return super.getClient().getMessageById(this.channelId, this.messageId)
            .map(Message::getPoll)
            .flatMap(Mono::justOrEmpty);
    }","/**
     * Get the {@link Poll} where the vote was added.
     *
     * @return The poll where the vote was added.
     */",discord4j.core.event.domain.poll
"Route.CompiledRoute route = Route.Messages.CROSSPOST_MESSAGE.compile(getId(), messageId);","/**
     * Attempts to crosspost the provided message.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#ALREADY_CROSSPOSTED ALREADY_CROSSPOSTED}
     *     <br>The target message has already been crossposted.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The request was attempted after the account lost access to the
     *         {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed, or after {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}
     *         was revoked in the {@link TextChannel TextChannel}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The request was attempted after the account lost
     *         {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE} in the TextChannel.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The provided {@code messageId} is unknown in this MessageChannel, either due to the id being invalid, or
     *         the message it referred to has already been deleted.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>The request was attempted after the channel was deleted.</li>
     * </ul>
     *
     * @param  messageId
     *         The messageId to crosspost
     *
     * @throws java.lang.IllegalArgumentException
     *         If provided {@code messageId} is {@code null} or empty.
     * @throws MissingAccessException
     *         If the currently logged in account does not have {@link Member#hasAccess(net.dv8tion.jda.api.entities.channel.middleman.GuildChannel) access} in this channel.
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have
     *         {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} in this channel.
     *
     * @return {@link net.dv8tion.jda.api.requests.RestAction} - Type: {@link Message}
     *
     * @since  4.2.1
     */",net.dv8tion.jda.api.entities.channel.concrete
"public Mono<Void> deleteReactions(String emoji) {
        return restClient.getChannelService().deleteReactions(channelId, id, emoji);
    }","/**
     * Requests to remove a specified reaction on this message.
     *
     * @param emoji The reaction to remove on this message.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the reaction from the
     * specified user was removed on this message. If an error is received, it is emitted through the {@code Mono}.
     * @see
     * <a href=""https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji"">Delete All Reactions for Emoji</a>
     */",discord4j.rest.entity
"public Publisher<?> onIntegrationUpdate(IntegrationUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an integration has been updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
ApplicationCommandInteractionData getCommandInteractionData();,"/**
     * Return the raw application command interaction data from this interaction.
     *
     * @return an application command interaction data object
     */",discord4j.rest.interaction
"@Nonnull
    @CheckReturnValue
    RestAction<Void> approveSpeaker();","/**
     * Promote the member to speaker.
     * <p>This requires a non-null {@link #getRequestToSpeakTimestamp()}.
     * You can use {@link #inviteSpeaker()} to invite the member to become a speaker if they haven't requested to speak.
     *
     * <p>This does nothing if the member is not connected to a {@link StageChannel}.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#VOICE_MUTE_OTHERS Permission.VOICE_MUTE_OTHERS}
     *         in the associated {@link StageChannel}
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.entities
"@Nonnull
    M swapPosition(int swapPosition);","/**
     * Swaps the currently selected entity with the entity located
     * at the specified position. No other entities are affected by this operation.
     *
     * @param  swapPosition
     *         0 based index of target position
     *
     * @throws java.lang.IllegalStateException
     *         If no entity has been selected yet, use {@link #selectPosition(Object)}
     * @throws java.lang.IllegalArgumentException
     *         If the specified position is out-of-bounds
     *
     * @return The current OrderAction sub-implementation instance
     */",net.dv8tion.jda.api.requests.restaction.order
Mono<CloseStatus> close(boolean allowResume);,"/**
     * Terminates this client's current gateway connection.
     *
     * @param allowResume if resuming this session after closing is possible. if set to {@code true} the main
     * execution {@link Mono} will complete with a {@link PartialDisconnectException} you can
     * use to perform additional behavior or reconnect.
     * @return a {@link Mono} deferring completion until the disconnection has completed. If this client closed due
     * to an error it is emitted through the Mono. If available, a {@link CloseStatus} will be present.
     */",discord4j.gateway
"@Nullable
    public TextChannel getNewRulesChannel()
    {
        return getNewValue();
    }","/**
     * The new rules channel.
     *
     * @return The new rules channel
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    @CheckReturnValue
    GuildManager setVerificationLevel(@Nonnull Guild.VerificationLevel level);","/**
     * Sets the {@link net.dv8tion.jda.api.entities.Guild.VerificationLevel Verification Level} of this {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  level
     *         The new Verification Level for this {@link net.dv8tion.jda.api.entities.Guild Guild}
     *
     * @throws IllegalArgumentException
     *         If the provided level is {@code null} or UNKNOWN
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
InteractionHandler createResponseHandler(RestInteraction interaction);,"/**
     * Return the actual component responsible for maintaining interaction responses.
     *
     * @param interaction the interaction this command is handling
     * @return a source for responses around the given interaction
     */",discord4j.rest.interaction
"public boolean isRelative()
        {
            return isRelative;
        }","/**
         * Whether to use {@link #RESET_AFTER_HEADER}.
         * <br>This is primarily to avoid NTP sync issues.
         *
         * @return True, if {@link #RESET_AFTER_HEADER} should be used instead of {@link #RESET_HEADER}
         */",net.dv8tion.jda.api.requests
"@Override
    public int hashCode() {
        return Long.hashCode(id);
    }","/**
     * Gets the hash code value of the {@link #asLong() ID}.
     *
     * @return The hash code value of the {@link #asLong() ID}.
     */",discord4j.common.util
"@Nonnull
    public Guild getGuild()
    {
        return role.getGuild();
    }","/**
     * The guild of the role
     *
     * @return The guild of the role
     */",net.dv8tion.jda.api.events.role
"public Builder writerStrategy(WriterStrategy<?> writerStrategy) {
            writerStrategies.add(writerStrategy);
            return this;
        }","/**
         * Add a new writer strategy for request body conversion.
         *
         * @param writerStrategy the strategy to add
         * @return this builder, for chaining
         */",discord4j.rest.http
"public Publisher<?> onWebhooksUpdate(WebhooksUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a webhook is updated in a guild. Discord does not send any information about what was
     * actually updated. This is simply a notification of some update.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nullable
        default String getBotId()
        {
            return isBot() ? Long.toUnsignedString(getBotIdLong()) : null;
        }","/**
         * The id for the bot associated with this role.
         *
         * @return The bot id, or null if this role is not for a bot
         *
         * @see    #isBot()
         */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    default WebhookMessageEditAction<Message> editOriginalEmbeds(@Nonnull Collection<? extends MessageEmbed> embeds)
    {
        return editMessageEmbedsById(""@original"", embeds);
    }","/**
     * Edit the source message sent by this interaction.
     * <br>For {@link IMessageEditCallback#editComponents(Collection)} and {@link IMessageEditCallback#deferEdit()} this will be the message the components are attached to.
     * For {@link IReplyCallback#deferReply()} and {@link IReplyCallback#reply(String)} this will be the reply message instead.
     *
     * <p>This method will be delayed until the interaction is acknowledged.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_WEBHOOK UNKNOWN_WEBHOOK}
     *     <br>The webhook is no longer available, either it was deleted or in case of interactions it expired.</li>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The message for that id does not exist</li>
     * </ul>
     *
     * @param  embeds
     *         {@link MessageEmbed MessageEmbeds} to use (up to {@value Message#MAX_EMBED_COUNT} in total)
     *
     * @throws IllegalArgumentException
     *         If the provided embeds are null, or more than {@value Message#MAX_EMBED_COUNT}
     *
     * @return {@link WebhookMessageEditAction}
     */",net.dv8tion.jda.api.interactions
"@Nullable
    public OffsetDateTime getNewTime()
    {
        return newTime;
    }","/**
     * The new {@link GuildVoiceState#getRequestToSpeakTimestamp()}
     *
     * @return The new timestamp, or null if the request to speak was declined or cancelled
     */",net.dv8tion.jda.api.events.guild.voice
"public GuildTemplateEditMono edit() {
        return GuildTemplateEditMono.of(this);
    }","/**
     * Requests to edit this guild template. Properties specifying how to edit this template can be set via the {@code
     * withXxx} methods of the returned {@link GuildTemplateEditMono}.
     *
     * @return A {@link GuildTemplateEditMono} where, upon successful completion, emits the edited {@link
     * GuildTemplate}. If an error is received, it is emitted through the {@code GuildTemplateEditMono}.
     */",discord4j.core.object
"@Nonnull
    public String getKey()
    {
        return key;
    }","/**
     * The key which defines the field that was updated
     * by this change
     *
     * @return The key
     */",net.dv8tion.jda.api.audit
"@Nonnull
    @CheckReturnValue
    RoleManager setName(@Nonnull String name);","/**
     * Sets the <b><u>name</u></b> of the selected {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * <p>A role name <b>must not</b> be {@code null} nor less than 1 characters or more than 32 characters long!
     *
     * @param  name
     *         The new name for the selected {@link net.dv8tion.jda.api.entities.Role Role}
     *
     * @throws IllegalArgumentException
     *         If the provided name is {@code null} or not between 1-100 characters long
     *
     * @return RoleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static <T> Function<Mono<T>, Publisher<T>> retryOnceOnStatus(int code) {
        return mono -> mono.retryWhen(Retry.backoff(1, Duration.ofSeconds(1)).filter(isStatusCode(code)));
    }","/**
     * Transformation function that can be used within an operator such as {@link Mono#transform(Function)} or
     * {@link Mono#transformDeferred(Function)} to apply a retrying strategy in case of an error matching the given
     * HTTP status
     * code. The provided retrying strategy will wait 1 second, and then retry once.
     *
     * @param code the status code that should be retried
     * @param <T> the type of the response
     * @return a transformation function that retries error sequences
     */",discord4j.rest.http.client
"@Nonnull
    default Task<T> setTimeout(long timeout, TimeUnit unit)
    {
        Checks.notNull(unit, ""TimeUnit"");
        return setTimeout(Duration.ofMillis(unit.toMillis(timeout)));
    }","/**
     * Change the timeout duration for this task.
     * <br>This may be ignored for certain operations.
     *
     * <p>The provided timeout is relative to the start time of the task.
     * If the time has already passed, this will immediately cancel the task.
     *
     * @param  timeout
     *         The new timeout duration
     * @param  unit
     *         The time unit of the timeout
     *
     * @throws IllegalArgumentException
     *         If null is provided or the timeout is not positive
     *
     * @return The current Task instance for chaining
     */",net.dv8tion.jda.api.utils.concurrent
"@Nonnull
    default String getApplicationId()
    {
        return Long.toUnsignedString(getApplicationIdLong());
    }","/**
     * The associated application id for the bot account.
     * <br>For most bots this is identical to the user id.
     *
     * @return The application id
     */",net.dv8tion.jda.api.entities
Mono<Integer> getConnectedCount();,"/**
     * Return the number of currently connected shards.
     *
     * @return a {@link Mono} with the number of connected shards
     */",discord4j.core.shard
"public void pause() {
    writeLine(""Press ENTER to continue..."");
    readLine();  
  }","/**
   * Pauses the execution until ENTER key is pressed.
   */",io.github.augustoravazoli.termenu.io
"@Nonnull
    GuildSticker asGuildSticker();","/**
     * Returns the underlying {@link GuildSticker} if applicable.
     *
     * @throws IllegalStateException
     *         If this is not a {@link GuildSticker}
     *
     * @return The {@link GuildSticker}
     */",net.dv8tion.jda.api.entities.sticker
"@Nonnull
    public Result<T> expect(@Nonnull Predicate<? super Throwable> predicate)
    {
        Checks.notNull(predicate, ""Predicate"");
        if (isFailure() && predicate.test(error))
            throw new IllegalStateException(error);
        return this;
    }","/**
     * Throws the wrapped exception if the provided predicate returns true.
     * <br>This will never provide a null error to the predicate.
     * A successful result will never throw.
     *
     * @param  predicate
     *         The test predicate
     *
     * @throws IllegalArgumentException
     *         If the provided predicate is null
     * @throws IllegalStateException
     *         If the predicate returns true, the {@link Throwable#getCause() cause} will be the wrapped exception
     *
     * @return The same result instance
     */",net.dv8tion.jda.api.utils
"@Nullable
        String getNickname();","/**
         * Gets the nickname of the member. If they do not have a nickname on
         * the guild, this will return null;
         * 
         * @return possibly-null String containing the nickname of the member
         */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    @Deprecated
    @ForRemoval(deadline = ""5.1.0"")
    StageInstanceManager setPrivacyLevel(@Nonnull StageInstance.PrivacyLevel level);","/**
     * Sets the {@link net.dv8tion.jda.api.entities.StageInstance.PrivacyLevel PrivacyLevel} for this stage instance.
     * <br>This indicates whether guild lurkers are allowed to join the stage instance or only guild members.
     *
     * @param  level
     *         The privacy level
     *
     * @throws IllegalArgumentException
     *         If the privacy level is null, {@link net.dv8tion.jda.api.entities.StageInstance.PrivacyLevel#UNKNOWN UNKNOWN}.
     *
     * @return StageInstanceManager for chaining convenience
     *
     * @deprecated Obsolete.
     */",net.dv8tion.jda.api.managers
Mono<Long> countStickers();,"/**
     * Counts the number of stickers present in the store.
     *
     * @return A {@link Mono} emitting the sticker count
     * @since 3.2.3
     */",discord4j.common.store.api.layout
"@Nonnull
    static Button success(@Nonnull String id, @Nonnull String label)
    {
        Checks.notEmpty(id, ""Id"");
        Checks.notEmpty(label, ""Label"");
        Checks.notLonger(id, ID_MAX_LENGTH, ""Id"");
        Checks.notLonger(label, LABEL_MAX_LENGTH, ""Label"");
        return new ButtonImpl(id, label, ButtonStyle.SUCCESS, false, null);
    }","/**
     * Creates a button with {@link ButtonStyle#SUCCESS SUCCESS} Style.
     * <br>The button is enabled and has no emoji attached by default.
     * You can use {@link #asDisabled()} and {@link #withEmoji(Emoji)} to further configure it.
     *
     * @param  id
     *         The custom button ID
     * @param  label
     *         The text to display on the button
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any provided argument is null or empty.</li>
     *             <li>If the character limit for {@code id}, defined by {@link #ID_MAX_LENGTH} as {@value #ID_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the character limit for {@code label}, defined by {@link #LABEL_MAX_LENGTH} as {@value #LABEL_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
"public ForumChannel getCurrent() {
        return current;
    }","/**
     * Gets the current, new version of the {@link ForumChannel} that was updated in this event.
     *
     * @return The current version of the updated {@link ForumChannel}.
     */",discord4j.core.event.domain.channel
"@Nonnull
    public AutoModRule getRule()
    {
        return rule;
    }","/**
     * The {@link AutoModRule} that was created/removed/updated.
     *
     * @return The {@link AutoModRule}
     */",net.dv8tion.jda.api.events.automod
"public Publisher<?> onIntegrationCreate(IntegrationCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an integration has been created.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
long now = System.nanoTime();,"/**
     * Creates a {@link ClockGlobalRateLimiter} with a specified interval and number of
     * permits per tick.
     *
     * @param permitsPerTick the max number of requests per tick
     * @param interval the interval between two ticks
     */",discord4j.rest.request
"public int getBlue() {
        return rgb & 0xFF;
    }","/**
     * Returns the blue value for this color, as an integer in the range 0-255.
     *
     * @return The blue value for this color.
     */",discord4j.rest.util
"@Nonnull
    default RestRateLimiter.GlobalRateLimit getRateLimitHandle()
    {
        return RestRateLimiter.GlobalRateLimit.create();
    }","/**
     * The store for global rate-limits of all types.
     * <br>This can be used to share the global rate-limit information between shards on the same IP.
     *
     * @return The global rate-limiter
     */",net.dv8tion.jda.api.utils
"public static GuildCommandRegistrar create(RestClient restClient, List<ApplicationCommandRequest> commandRequests) {
        return new GuildCommandRegistrar(restClient, commandRequests);
    }","/**
     * Create a registrar using a list of {@link ApplicationCommandRequest} entries. Run the command registration
     * process by subscribing to {@link #registerCommands(Snowflake)}.
     *
     * @param restClient a Discord web client to perform API requests
     * @param commandRequests a list of command definitions
     * @return a registrar that can register application commands by subscribing to {@link #registerCommands(Snowflake)}
     */",discord4j.rest.interaction
"default WebhookCreateMono createWebhook(String name) {
        return WebhookCreateMono.of(name, this);
    }","/**
     * Requests to create a webhook. Properties specifying how to create the webhook can be set via the {@code withXxx}
     * methods of the returned {@link WebhookCreateMono}.
     *
     * @return A {@link Mono} where, upon successful completion, emits the created {@link Webhook}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"public static final Route USER_GET = Route.get(""/users/{user.id}"");","/**
     * Returns a user object for a given user ID.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/user#get-user"">
     * https://discord.com/developers/docs/resources/user#get-user</a>
     */",discord4j.rest.route
ByteBuffer buffer = ByteBuffer.allocate(1024);,"/**
     * Encodes the provided object into an ETF buffer.
     *
     * <p><b>The mapping is as follows:</b><br>
     * <ul>
     *     <li>{@code String -> Binary}</li>
     *     <li>{@code Map -> Map}</li>
     *     <li>{@code Collection -> List | NIL}</li>
     *     <li>{@code Byte -> Small Int}</li>
     *     <li>{@code Integer, Short -> Int | Small Int}</li>
     *     <li>{@code Long -> Small BigInt | Int | Small Int}</li>
     *     <li>{@code Float, Double -> New Float}</li>
     *     <li>{@code Boolean -> Atom(Boolean)}</li>
     *     <li>{@code null -> Atom(""nil"")}</li>
     * </ul>
     *
     * @param  data
     *         The object to encode
     *
     * @throws UnsupportedOperationException
     *         If there is no type mapping for the provided object
     *
     * @return {@link ByteBuffer} with the encoded ETF term
     */",net.dv8tion.jda.api.utils.data.etf
"@Nullable
    public String getNewVanityUrl()
    {
        return getNewVanityCode() == null ? null : ""https://discord.gg/"" + getNewVanityCode();
    }","/**
     * The new vanity url
     *
     * @return The new vanity url
     */",net.dv8tion.jda.api.events.guild.update
"public int getColorRaw()
    {
        return this.color;
    }","/**
     * The raw color RGB value used for this role
     * <br>Defaults to {@link net.dv8tion.jda.api.entities.Role#DEFAULT_COLOR_RAW} if this role has no set color
     *
     * @return The raw RGB color value or default
     */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    static Button primary(@Nonnull String id, @Nonnull Emoji emoji)
    {
        Checks.notEmpty(id, ""Id"");
        Checks.notNull(emoji, ""Emoji"");
        Checks.notLonger(id, ID_MAX_LENGTH, ""Id"");
        return new ButtonImpl(id, """", ButtonStyle.PRIMARY, false, emoji);
    }","/**
     * Creates a button with {@link ButtonStyle#PRIMARY PRIMARY} Style.
     * <br>The button is enabled and has no text label.
     * To use labels you can use {@code primary(id, label).withEmoji(emoji)}
     *
     * <p>To disable the button you can use {@link #asDisabled()}.
     *
     * @param  id
     *         The custom button ID
     * @param  emoji
     *         The emoji to use as the button label
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any provided argument is null or empty.</li>
     *             <li>If the character limit for {@code id}, defined by {@link #ID_MAX_LENGTH} as {@value #ID_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
"@Nonnull
    MessageReaction getReaction();","/**
     * The current target {@link net.dv8tion.jda.api.entities.MessageReaction MessageReaction}
     *
     * @throws IllegalStateException
     *         If this was created by {@link Message#retrieveReactionUsers(Emoji) Message.retrieveReactionUsers(...)} or {@link MessageChannel#retrieveReactionUsersById(long, Emoji) MessageChannel.retrieveReactionUsersById(...)}
     *
     * @return The current MessageReaction
     */",net.dv8tion.jda.api.requests.restaction.pagination
"@Nonnull
    EnumSet<Permission> getPermissionsExplicit();","/**
     * The explicitly granted permissions for this permission holder in the guild.
     * <br>This disregards owner and administrator privileges.
     * For a role this is identical to {@link #getPermissions()} and members have all their roles taken into consideration.
     * <br><u>Changes to the returned set do not affect this entity directly.</u>
     *
     * @return EnumSet of the explicitly granted permissions
     */",net.dv8tion.jda.api.entities
"@Deprecated
    public Mono<Guild> createGuild(final Consumer<? super LegacyGuildCreateFromTemplateSpec> spec) {
        return Mono.defer(
                () -> {
                    LegacyGuildCreateFromTemplateSpec mutatedSpec = new LegacyGuildCreateFromTemplateSpec();
                    spec.accept(mutatedSpec);
                    return gateway.getRestClient().getTemplateService()
                            .createGuild(getCode(), mutatedSpec.asRequest());
                })
                .map(data -> new Guild(gateway, data));
    }","/**
     * Requests to create a new guild from this template.
     *
     * @param spec A {@link Consumer} that provides a ""blank"" {@link LegacyGuildCreateFromTemplateSpec} to be operated
     *             on.
     * @return A {@link Mono} where, upon successful completion, emits the {@link Guild created guild}. If an error is
     * received, it is emitted through the {@code Mono}.
     * @deprecated use {@link #createGuild(GuildCreateFromTemplateSpec)} or {@link #createGuild(String)} which offer an
     * immutable approach to build specs
     */",discord4j.core.object
"public ReconnectOptions getVoiceReconnectOptions() {
        return voiceReconnectOptions;
    }","/**
     * Return the reconnect policy used to retry a connection to the Voice Gateway.
     *
     * @return a reconnection policy
     */",discord4j.core
"public Mono<UserData> getSelf() {
        return userService.getCurrentUser();
    }","/**
     * Requests to retrieve the bot user.
     *
     * @return A {@link Mono} where, upon successful completion, emits the bot {@link UserData user}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.rest
"@Nonnull
    public List<UserSnowflake> getFailedUsers()
    {
        return failedUsers;
    }","/**
     * List of users which could not be banned.
     *
     * @return {@link List} of {@link UserSnowflake}
     */",net.dv8tion.jda.api.entities
"public Mono<User> getUser() {
        return super.getClient().getUserById(this.userId);
    }","/**
     * Get the {@link User} who voted in this event.
     *
     * @return The user who voted.
     */",discord4j.core.event.domain.poll
"@Nonnull
    Map<DiscordLocale, String> apply(@Nonnull String localizationKey);","/**
     * Retrieves the localization mappings of the specified localization key
     *
     * @param  localizationKey
     *         The localization key to get the translations from
     *
     * @return Never-null map of discord locales to their localized strings
     */",net.dv8tion.jda.api.interactions.commands.localization
"default Mono<ThreadChannel> startPublicThreadWithoutMessage(StartThreadWithoutMessageSpec spec) {
        return getRestChannel().startThreadWithoutMessage(spec.asRequest())
            .map(data -> new ThreadChannel(getClient(), data));
    }","/**
     * Start a new public thread that is not connected to an existing message. Properties specifying how to create the thread
     * can be set via the {@link StartThreadWithoutMessageSpec} specifier.
     *
     * @param spec the properties to create the thread with
     * @return A {@link Mono} where, upon successful completion, emits the created {@link ThreadChannel}.
     * If an error is received, it is emitted through the {@link Mono}.
     */",discord4j.core.object.entity.channel
"public Publisher<?> onMessageUpdate(MessageUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a message is updated. This event includes both normal message editing as well as the following
     * behavior regarding embeds: When a message with a link is sent, it does not initially contain its embed. When
     * Discord creates the embed, this event is fired with it added to the embeds list.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
long getExpirationTimestamp();,"/**
     * The unix millisecond timestamp for the expiration of this interaction hook.
     * <br>An interaction hook expires after 15 minutes of its creation.
     *
     * @return The timestamp in millisecond precision
     *
     * @see    System#currentTimeMillis()
     * @see    #isExpired()
     */",net.dv8tion.jda.api.interactions
"@Nonnull
    Task<T> onError(@Nonnull Consumer<? super Throwable> callback);","/**
     * Provide a callback for exception handling.
     * <br>This is an asynchronous operation.
     *
     * <p>The error will be logged regardless of your callback, this only exists to handle
     * failures for other purposes.
     *
     * @param  callback
     *         The error callback
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The current Task instance for chaining
     */",net.dv8tion.jda.api.utils.concurrent
"@Nonnull
    static InteractionHook from(@Nonnull JDA jda, @Nonnull String token)
    {
        Checks.notNull(jda, ""JDA"");
        Checks.notBlank(token, ""Token"");

        return new InteractionHookImpl(jda, token);
    }","/**
     * Creates an instance of {@link InteractionHook} capable of executing webhook requests.
     * <p>Messages created by this client may not have a fully accessible channel or guild available, and {@link #getInteraction()} throws.
     * The messages might report a channel of type {@link net.dv8tion.jda.api.entities.channel.ChannelType#UNKNOWN UNKNOWN},
     * in which case the channel is assumed to be inaccessible and limited to only webhook requests.
     *
     * @param  jda
     *         The JDA instance, used to handle rate-limits
     * @param  token
     *         The interaction token for the webhook
     *
     * @throws IllegalArgumentException
     *         If null is provided or the token is blank
     *
     * @return The {@link InteractionHook} instance
     */",net.dv8tion.jda.api.interactions
"@Nonnull
    @CheckReturnValue
    AccountManager setAvatar(@Nullable Icon avatar);","/**
     * Sets the avatar for the currently logged in account
     *
     * @param  avatar
     *         An {@link net.dv8tion.jda.api.entities.Icon Icon} instance representing
     *         the new Avatar for the current account, {@code null} to reset the avatar to the default avatar.
     *
     * @return AccountManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"SensorException(final String message) {
        super(message);

    }","/**
     * The @link{SensorException.java} constructor.
     *
     * @param message
     *            the exception message.
     */",jestures.sensor
"public Snowflake getOwnerId() {
        return Snowflake.of(data.ownerUserId().asLong());
    }","/**
     * Gets the user id of the current team owner.
     *
     * @return The user id of the current team owner.
     */",discord4j.core.object.entity
void attacheTracker(SensorObserver recognizer);,"/**
     * Attache the tracker.
     *
     * @param recognizer
     *            the {@link SensorObserver}
     */",jestures.sensor
RestMember asRestMember();,"/**
     * Return a REST operations handler for this interaction member. Can be followed by {@link RestMember#guild()} or
     * {@link RestMember#user()} to access their guild or associated user REST entity.
     *
     * @return a {@link RestMember} facade to operate on this member at the REST API level
     */",discord4j.rest.interaction
"@Nonnull
    public StageInstance getInstance()
    {
        return instance;
    }","/**
     * The affected {@link StageInstance}
     *
     * @return The {@link StageInstance}
     */",net.dv8tion.jda.api.events.stage
"public Mono<RoleData> getData() {
        return restClient.getGuildService()
                .getGuildRoles(guildId)
                .filter(response -> Snowflake.asLong(response.id()) == id)
                .singleOrEmpty();
    }","/**
     * Retrieve this role's data upon subscription.
     *
     * @return a {@link Mono} where, upon successful completion, emits the {@link RoleData} belonging to this role.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"static MemberRequestFilter none() {
        return data -> Mono.just(false);
    }","/**
     * Do not request guild members.
     *
     * @return a {@link MemberRequestFilter} not requesting any member
     */",discord4j.core.shard
"public Flux<RoleData> changePosition(final int position, @Nullable final String reason) {
        final RolePositionModifyRequest[] requests = {RolePositionModifyRequest.builder()
            .id(Snowflake.asString(id))
            .positionOrNull(position)
            .build()};
        return restClient.getGuildService().modifyGuildRolePositions(guildId, requests, reason);
    }","/**
     * Requests to change this role's position.
     *
     * @param position The position to change for this role.
     * @param reason The reason, if present.
     * @return A {@link Flux} that continually emits all the {@link RoleData roles} associated to this role's
     * guild. If an error is received, it is emitted through the {@code Flux}.
     */",discord4j.rest.entity
"public LegacyEmbedCreateSpec setTimestamp(Instant timestamp) {
        requestBuilder.timestamp(DateTimeFormatter.ISO_INSTANT.format(timestamp));
        return this;
    }","/**
     * Sets the timestamp to display in the embed. The timestamp is displayed locally for each user's timezone.
     *
     * @param timestamp A {@link Instant} to display in the embed footer.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Builder sendTaskScheduler(Scheduler sendTaskScheduler) {
            this.sendTaskScheduler = sendTaskScheduler;
            return this;
        }","/**
         * Set the {@link Scheduler} used for voice send loop.
         *
         * @param sendTaskScheduler the voice send scheduler
         * @return this builder
         */",discord4j.voice
"public Optional<User> getBot() {
        return data.bot().toOptional()
                .map(data -> new User(gateway, data));
    }","/**
     * Gets the bot associated with this application, if present.
     *
     * @return The bot associated with this application, if present.
     */",discord4j.core.object.entity
"public Mono<MemberData> getCurrentUserGuildMember(long guildId) {
        return exchange(Routes.CURRENT_USER_GUILD_MEMBER_GET.newRequest(guildId), MemberData.class);
    }","/**
     * Returns a member object from the current user in the given guild. Request the
     * {@link Scope#GUILDS_MEMBERS_READ} scope.
     *
     * @param guildId the guild to query the current user member object
     * @return a Mono with member information, otherwise an error Mono
     */",discord4j.oauth2
"public ActionRow withRemovedComponent(String customId) {
        List<MessageComponent> components = getChildren()
                .stream()
                .filter(it -> !it.getData().customId()
                        .toOptional()
                        .filter(customId::equals)
                        .isPresent())
                .collect(Collectors.toList());
        return new ActionRow(ComponentData.builder()
                .type(Type.ACTION_ROW.getValue())
                .components(components.stream().map(MessageComponent::getData).collect(Collectors.toList()))
                .build());
    }","/**
     * Create a new {@link ActionRow} instance from {@code this}, removing any existing component by {@code customId}.
     *
     * @param customId the customId of the component to remove
     * @return an {@code ActionRow} containing all components that did not match the given {@code customId}
     */",discord4j.core.object.component
"public static void showConfirmDialog(final StackPane mainPane, final String title, final String description,
            final DimDialogs size, final EventHandler<? super MouseEvent> ev) {
        String css = """";
        final JFXDialogLayout content = new JFXDialogLayout();
        final Text titolo = new Text(title);
        final Text descrizione = new Text(description);
        final JFXButton buttonYes = new JFXButton(""YES"");
        final JFXButton buttonNo = new JFXButton(""NO"");
        switch (size) {
        case SMALL:
            css = ""confirmDialogTextSmall"";
            break;
        case MEDIUM:
            css = ""confirmDialogTextMedium"";
            break;
        case BIG:
            css = ""confirmDialogTextBig"";
            break;
        default:
            break;
        }
        descrizione.getStyleClass().add(css);
        titolo.getStyleClass().add(css);
        content.setHeading(titolo);
        content.setBody(descrizione);
        content.setActions(buttonYes, buttonNo);
        content.getStyleClass().add(""confirmDialogContentBackground"");
        final JFXDialog dialog = new JFXDialog(mainPane, content, JFXDialog.DialogTransition.CENTER);
        dialog.getStyleClass().add(""confirmDialogBackground"");
        buttonYes.setOnMouseClicked(ev);
        buttonNo.setOnMouseClicked(ev);
        buttonYes.setOnAction(t -> dialog.close());
        buttonNo.setOnAction(t -> dialog.close());
        dialog.show();

    }","/**
     * Show a {@link JFXDialog} into the main {@link Pane}.
     *
     * @param mainPane
     *            the main {@link StackPane}
     * @param title
     *            the String title dialog
     * @param description
     *            the STring description
     * @param size
     *            the {@link DimDialogs} size
     * @param ev
     *            the {@link MouseEvent} get text and check if is YES or NO
     */",jestures.core.view.utils
"public static final Route GUILD_BANS_GET = Route.get(""/guilds/{guild.id}/bans"");","/**
     * Returns a list of ban objects for the users banned from this guild. Requires the 'BAN_MEMBERS' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-bans"">
     * https://discord.com/developers/docs/resources/guild#get-guild-bans</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    default PermissionOverrideAction setAllowed(@Nullable Permission... permissions)
    {
        if (permissions == null || permissions.length == 0)
            return setAllowed(0);
        Checks.noneNull(permissions, ""Permissions"");
        return setAllowed(Permission.getRaw(permissions));
    }","/**
     * Sets the value of explicitly granted permissions
     * using a set of {@link net.dv8tion.jda.api.Permission Permissions}.
     * <br><b>Note: Permissions not marked as {@link net.dv8tion.jda.api.Permission#isChannel() isChannel()} will have no affect!</b>
     *
     * @param  permissions
     *         The Permissions representing the granted
     *         permissions for the new PermissionOverride.
     *         <br>If the provided value is {@code null} the permissions are reset to the default of none
     *
     * @throws java.lang.IllegalArgumentException
     *         If the any of the specified Permissions is {@code null}
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public LegacyMessageReferenceSpec setMessageId(Snowflake messageId) {
        requestBuilder.messageId(messageId.asString());
        return this;
    }","/**
     * Sets the ID of the originating message.
     *
     * @param messageId The ID of the originating message.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Optional<Attachment> getOptionAsAttachment(final String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asAttachment);
    }","/**
     * Gets the value of the option corresponding to the provided name, if present, as an {@link Attachment}.
     *
     * @param name The name of the option.
     * @return An {@link Optional} containing the value of the option corresponding to the provided name, if present, or empty otherwise.
     * @throws IllegalArgumentException If the option is present but its value cannot be converted to an attachment.
     */",discord4j.core.event.domain.interaction
"Mono<ChannelData> onChannelDelete(int shardIndex, ChannelDelete dispatch);","/**
     * Updates the internal state of the store according to the given {@link ChannelDelete} gateway dispatch. This
     * will typically perform a delete operation on a related {@link ChannelData} that is already present in the
     * store, and remove the ID from the list returned by {@link GuildData#channels()} if applicable.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link ChannelData} before the deletion
     */",discord4j.common.store.api.layout
"public static final Route APPLICATION_EMOJI_MODIFY = Route.patch(""/applications/{application.id}/emojis/{emoji.id}"");","/**
     * Modify the given emoji. Returns the updated emoji object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/emoji#modify-application-emoji"">https://discord.com/developers/docs/resources/emoji#modify-application-emoji</a>
     */",discord4j.rest.route
"public Map<Snowflake, Message> getMessages() {
        return data.messages().toOptional()
                .map(map -> map.entrySet().stream()
                        .map(entry -> Tuples.of(Snowflake.of(entry.getKey()),
                                new Message(gateway, entry.getValue())))
                        .collect(Collectors.toMap(Tuple2::getT1, Tuple2::getT2)))
                .orElseGet(Collections::emptyMap);
    }","/**
     * Gets a map containing the resolved messages associated by their IDs
     *
     * @return the resolved messages
     */",discord4j.core.object.command
"default Flux<ExtendedInvite> getInvites() {
        return getClient().getRestClient().getChannelService()
                .getChannelInvites(getId().asLong())
                .map(data -> new ExtendedInvite(getClient(), data));
    }","/**
     * Requests to retrieve this channel's invites.
     *
     * @return A {@link Flux} that continually emits this channel's {@link ExtendedInvite invites}. If an error is
     * received, it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
"public int getLargeThreshold() {
        return largeThreshold;
    }","/**
     * Retrieve the number of members used to determine if a guild is ""large"". Gateway will not send offline member
     * information for a large guild member list.
     *
     * @return the value used to determine if a guild is considered large
     */",discord4j.gateway
"@Nonnull
    @CheckReturnValue
    default R mentionUsers(@Nonnull long... userIds)
    {
        Checks.notNull(userIds, ""UserId array"");
        String[] stringIds = new String[userIds.length];
        for (int i = 0; i < userIds.length; i++)
            stringIds[i] = Long.toUnsignedString(userIds[i]);
        return mentionUsers(stringIds);
    }","/**
     * Used to provide a whitelist of {@link net.dv8tion.jda.api.entities.User Users} that should be pinged,
     * even when they would not be pinged otherwise according to the Set of allowed mention types.
     *
     * <p><b>Note:</b> When a User is whitelisted this way, then parsing of User mentions is automatically disabled.
     * <br>Also note that whitelisting users or roles implicitly disables parsing of other mentions, if not otherwise set via
     * {@link #setDefaultMentions(Collection)} or {@link #setAllowedMentions(Collection)}.
     *
     * @param  userIds
     *         Ids of Users that should be explicitly whitelisted to be pingable.
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The same instance for chaining
     *
     * @see    #setAllowedMentions(Collection)
     * @see    #setDefaultMentions(Collection)
     */",net.dv8tion.jda.api.utils.messages
"@Override
    public String toString() {
        return ""Snowflake{"" + asString() + ""}"";
    }","/**
     * Gets the String representation of this {@code Snowflake}.
     * <p>
     * The format returned by this method is unspecified and may vary between implementations; however, it is guaranteed
     * to always be non-empty. This method is not suitable for obtaining the ID; use {@link #asString()} instead.
     *
     * @return The String representation of this {@code Snowflake}.
     * @see #asString()
     */",discord4j.common.util
"void addFeatureVectorToDataset(String gesture, int indexClicked);","/**
     * Add the selected feature vector to database.
     *
     * @param gesture
     *            the String gesture
     * @param indexClicked
     *            the index
     */",recorder.view
"public static final Route AUTO_MOD_RULE_DELETE = Route.patch(""/guilds/{guild.id}/auto-moderation/rules/{auto_moderation_rule.id}"");","/**
     * Delete a rule. Returns a 204 on success. Requires the 'MANAGE_GUILD' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/auto-moderation#delete-auto-moderation-rule"">
     * https://discord.com/developers/docs/resources/auto-moderation#delete-auto-moderation-rule</a>
     */",discord4j.rest.route
"public Mono<StageChannel> edit(StageChannelEditSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(() -> getClient().getRestClient().getChannelService()
                        .modifyChannel(getId().asLong(), spec.asRequest(), spec.reason()))
                .map(data -> EntityUtil.getChannel(getClient(), data))
                .cast(StageChannel.class);
    }","/**
     * Requests to edit this stage channel.
     *
     * @param spec an immutable object that specifies how to edit this stage channel
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link StageChannel}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"String sanitized = MarkdownSanitizer.escape(input, ~MarkdownSanitizer.QUOTE);","/**
     * Escapes already existing quote regions in the input
     * and applies quote formatting to the entire string.
     * <br>The resulting string will be {@code ""> "" + escaped(input).replace(""\n"", ""\n> "")}.
     *
     * @param  input
     *         The input to quote
     *
     * @return The resulting output
     */",net.dv8tion.jda.api.utils
"default void setActivity(@Nullable final Activity activity)
    {
        this.setActivityProvider(id -> activity);
    }","/**
     * Sets the {@link net.dv8tion.jda.api.entities.Activity Activity} for all shards.
     * <br>An Activity can be retrieved via {@link net.dv8tion.jda.api.entities.Activity#playing(String)}.
     * For streams you provide a valid streaming url as second parameter.
     *
     * <p>This will also change the activity for shards that are created in the future.
     *
     * @param  activity
     *         A {@link net.dv8tion.jda.api.entities.Activity Activity} instance or null to reset
     *
     * @see    net.dv8tion.jda.api.entities.Activity#playing(String)
     * @see    net.dv8tion.jda.api.entities.Activity#streaming(String, String)
     */",net.dv8tion.jda.api.sharding
String desc = permissionDescriptions.get(perm);,"/**
     * This method hooks into all permission plugins we are supporting
     */",com.massivecraft.factions.zcore.util
"public Publisher<?> onMessageInteraction(MessageInteractionEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user issues a message command (context menu action on a message).
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
Flux<ChannelData> getChannelsInGuild(long guildId);,"/**
     * Retrieves data for all channels present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Flux} emitting the channels, or empty if none is present
     */",discord4j.common.store.api.layout
"public LegacyGuildEditSpec setExplicitContentFilter(Guild.ContentFilterLevel level) {
        requestBuilder.explicitContentFilterOrNull(level.getValue());
        return this;
    }","/**
     * Sets the explicit content filter level for the modified {@link Guild}.
     *
     * @param level The explicit content filter level for the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"default Flux<Member> getMembers() {
        return getGuild()
                .flatMapMany(Guild::getMembers)
                .filterWhen(member -> getEffectivePermissions(member.getId())
                        .map(permissions -> permissions.contains(Permission.VIEW_CHANNEL)));
    }","/**
     * Returns all members in the guild which have access to <b>view</b> this channel.
     *
     * @return A {@link Flux} that continually emits all members from {@link Guild#getMembers()} which have access to
     * view this channel {@link discord4j.rest.util.Permission#VIEW_CHANNEL}
     */",discord4j.core.object.entity.channel
"public static final Route APPLICATION_EMOJIS_GET = Route.get(""/applications/{application.id}/emojis"");","/**
     * Returns an object containing a list of emoji objects for the given application under the items key.
     * <br>
     * Includes a user object for the team member that uploaded the emoji from the app's settings, or for the bot user if uploaded using the API.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/emoji#list-application-emojis"">https://discord.com/developers/docs/resources/emoji#list-application-emojis</a>
     */",discord4j.rest.route
"public List<PollAnswerCount> getAnswerCount() {
        return this.answerCount;
    }","/**
     * Gets the answer counts of the poll result.
     *
     * @return the answer counts of the poll result
     */",discord4j.core.object.entity.poll
"public int getUses() {
        return getData().uses().toOptional()
                .orElseThrow(IllegalStateException::new);
    }","/**
     * Gets the number of times this invite has been used.
     *
     * @return The number of times this invite has been used.
     */",discord4j.core.object
"public Mono<Void> delete(@Nullable String reason) {
        return restClient.getStickerService().deleteGuildSticker(guildId, id, reason);
    }","/**
     * Delete this guild sticker. Requires the {@link Permission#MANAGE_EMOJIS_AND_STICKERS} permission. Returns empty on success.
     *
     * @param reason an optional reason for the audit log
     * @return a {@link Mono} where, upon subscription, emits a complete signal on success. If an error is received, it
     * is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"public int getMaxAge() {
        return maxAge;
    }","/**
     * Gets how long the invite is valid for (in seconds).
     *
     * @return How long the invite is valid for (in seconds).
     */",discord4j.core.event.domain
"public Optional<String> getNickname() {
        return Possible.flatOpt(data.nick());
    }","/**
     * Gets the user's guild nickname (if one is set).
     *
     * @return The user's guild nickname (if one is set).
     */",discord4j.core.object.command
"public long getInheritRaw()
        {
            return ~(allow | deny);
        }","/**
         * This is the raw binary representation (as a base 10 long) of the permissions <b>not affected</b> by this override.
         * <br>The long relates to the offsets used by each {@link net.dv8tion.jda.api.Permission Permission}.
         *
         * @return Never-negative long containing the binary representation of the unaffected permissions of this override.
         */",net.dv8tion.jda.api.entities.templates
FollowupInteractionHandler reply(String content);,"/**
     * Build an interaction handler that will produce a text reply to the interaction member.
     *
     * @param content the content to be sent as reply
     * @return a followup handler to continue processing this interaction asynchronously, until the interaction token
     * bound to this interaction expires after 15 minutes.
     */",discord4j.rest.interaction
"@Nonnull
    public Guild.NSFWLevel getNewNSFWLevel()
    {
        return getNewValue();
    }","/**
     * The new {@link Guild.NSFWLevel NSFWLevel}
     *
     * @return The new NSFWLevel
     */",net.dv8tion.jda.api.events.guild.update
"public LegacyGuildMemberEditSpec setRoles(Set<Snowflake> roles) {
        builder.roles(roles.stream().map(Snowflake::asString).collect(Collectors.toList()));
        return this;
    }","/**
     * Sets the new role identifiers the targeted {@link Member} is assigned. Requires the
     * {@link Permission#MANAGE_ROLES} permission.
     *
     * @param roles The set of role identifiers.
     * @return This spec.
     */",discord4j.core.spec.legacy
"This method could not be tested due to the lack of a Discord verified application
    public CreateTestEntitlementMono createTestEntitlementForGuild(Snowflake skuId, Snowflake guildId) {
        return CreateTestEntitlementMono.of(skuId, guildId, Entitlement.OwnerType.GUILD, this, discordClient);
    }","/**
     * Create a test entitlement for the given {@link SKU} and guild ID.
     *
     * @param skuId   The ID of the SKU.
     * @param guildId The ID of the guild.
     * @return A {@link CreateTestEntitlementMono} that emits the created {@link Entitlement} upon successful
     * completion. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core
"public Publisher<?> onStickersUpdate(StickersUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a sticker is added, deleted or edited in a guild. The emojis set includes ALL stickers of the guild.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @Override
    default String getAsMention()
    {
        return (isAnimated() ? ""<a:"" : ""<:"") + getName() + "":"" + getId() + "">"";
    }","/**
     * Usable representation of this emoji (used to display in the client just like mentions with a specific format)
     * <br>Emojis are used with the format <code>&lt;:{@link #getName getName()}:{@link #getId getId()}&gt;</code>
     *
     * @return A usable String representation for this emoji
     *
     * @see    <a href=""https://discord.com/developers/docs/resources/channel#message-formatting"">Message Formatting</a>
     */",net.dv8tion.jda.api.entities.emoji
"private void storeAttribute(Attr attribute) {
		// examine the attributes in namespace xmlns
		if (attribute.getNamespaceURI() != null
				&& attribute.getNamespaceURI().equals(
						XMLConstants.XMLNS_ATTRIBUTE_NS_URI)) {
			// Default namespace xmlns=""uri goes here""
			if (attribute.getNodeName().equals(XMLConstants.XMLNS_ATTRIBUTE)) {
				putInCache(DEFAULT_NS, attribute.getNodeValue());
			} else {
				// Here are the defined prefixes stored
				putInCache(attribute.getLocalName(), attribute.getNodeValue());
			}
		}

	}","/**
	 * This method looks at an attribute and stores it, if it is a namespace
	 * attribute.
	 * 
	 * @param attribute
	 *            to examine
	 */",net.winroad.wrdoclet.utils
"public Mono<OnboardingData> getOnboarding() {
        return this.restClient.getGuildService().getOnboarding(this.id);
    }","/**
     * Request to retrieve the onboarding of the guild.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link OnboardingData}. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"@Nonnull
    @SuppressWarnings(""unchecked"")
    default Class<E> getEntityType()
    {
        return (Class<E>) getEntity().getClass();
    }","/**
     * Class representation of the affected entity, useful when dealing with refection.
     *
     * @return The class of the affected entity
     */",net.dv8tion.jda.api.events
"@Nonnull
    @CheckReturnValue
    CategoryOrderAction modifyVoiceChannelPositions();","/**
     * Modifies the positional order of this Category's nested {@link #getVoiceChannels() VoiceChannels} and {@link #getStageChannels() StageChannels}.
     * <br>This uses an extension of {@link ChannelOrderAction ChannelOrderAction}
     * specialized for ordering the nested {@link VoiceChannel VoiceChannels}
     * and {@link StageChannel StageChannels} of this {@link Category Category}.
     * <br>Like {@link ChannelOrderAction}, the returned {@link CategoryOrderAction CategoryOrderAction}
     * can be used to move VoiceChannels/StageChannels {@link OrderAction#moveUp(int) up},
     * {@link OrderAction#moveDown(int) down}, or
     * {@link OrderAction#moveTo(int) to} a specific position.
     * <br>This uses <b>ascending</b> order with a 0 based index.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNNKOWN_CHANNEL}
     *     <br>One of the channels has been deleted before the completion of the task.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The currently logged in account was removed from the Guild.</li>
     * </ul>
     *
     * @return A {@link CategoryOrderAction CategoryOrderAction} for
     *         ordering the Category's {@link VoiceChannel VoiceChannels}
     *         and {@link StageChannel StageChannels}.
     */",net.dv8tion.jda.api.entities.channel.concrete
"@Nullable
    String getRegionRaw();","/**
     * The raw region name for this channel.
     * <br>This will return null if the region is set to Automatic.
     *
     * @return Raw region name, or {@code null} if the region is set to automatic.
     */",net.dv8tion.jda.api.entities.channel.middleman
"public HttpClientResponse getResponse() {
        return response;
    }","/**
     * Return the {@link HttpClientResponse} encapsulating a low-level Discord API response.
     *
     * @return the low-level response that caused this exception
     */",discord4j.rest.http.client
"@Nullable
    public String getNewBannerId()
    {
        return getNewValue();
    }","/**
     * The new banner id
     *
     * @return The new banner id, or null if the banner was removed
     */",net.dv8tion.jda.api.events.guild.update
"public Optional<ReactionEmoji> getEmoji() {
        return Optional.ofNullable(this.emoji);
    }","/**
     * Gets the emoji of the option.
     *
     * @return An {@link Optional} containing the emoji of the option or {@link Optional#empty()} if not present.
     */",discord4j.core.object.onboarding
"@Override
        public String toString() {
            return ""[gateway_disconnected_resume]"";
        }","/**
     * Propagated when a gateway connection has been closed but is still open for a RESUME attempt.
     */",discord4j.gateway
"public static final Route GUILD_INTEGRATION_DELETE = Route.delete(""/guilds/{guild.id}/integrations/{integration.id}"");","/**
     * Delete the attached integration object for the guild. Requires the 'MANAGE_GUILD' permission. Returns a 204
     * empty response on success. Fires a Guild Integrations Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#delete-guild-integration"">
     * https://discord.com/developers/docs/resources/guild#delete-guild-integration</a>
     */",discord4j.rest.route
"public static final Route CHANNEL_MODIFY_PARTIAL = Route.patch(""/channels/{channel.id}"");","/**
     * Update a channels settings. Requires the 'MANAGE_CHANNELS' permission for the guild. Returns a guild channel on
     * success, and a 400 BAD REQUEST on invalid parameters. Fires a Channel Update Gateway event. All the JSON Params
     * are optional.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#modify-channel"">
     * https://discord.com/developers/docs/resources/channel#modify-channel</a>
     */",discord4j.rest.route
Cipher cipher = Cipher.getInstance(cipherId);,"/**
     * Create Cipher from algorithm parameters and key bytes.
     *
     * @param cipherId  {@link String} representation of cipher ID for {@link Cipher#getInstance(String)}.
     * @param algoId  {@link String} representation of algorithm ID for {@link SecretKeySpec#SecretKeySpec(byte[], String)}.
     * @param key  byte array representing a ciphering key.
     * @return  {@link Cipher} object.
     */",threegpp.milenage.cipher
"public static void startFxThread() {
        PlatformImpl.startup(() -> {
        });
    }","/**
     * Start fx thread.
     */",jestures.core.view.screens
"@Nonnull
        public Builder addActionRow(@Nonnull ItemComponent... components)
        {
            return addComponents(ActionRow.of(components));
        }","/**
         * Adds an ActionRow to this modal
         *
         * @param  components
         *         The components to add
         *
         * @throws IllegalArgumentException
         *         <ul>
         *             <li>If any of the provided ItemComponents are null, or an invalid number of components are provided</li>
         *             <li>If any of the provided ItemComponents are not compatible with Modals</li>
         *         </ul>
         *
         * @return Same builder for chaining convenience
         *
         * @see    ItemComponent#isModalCompatible()
         */",net.dv8tion.jda.api.interactions.modals
"public boolean isRoleOverride()
    {
        return override.isRoleOverride();
    }","/**
     * Whether this override was for a role.
     * <br>This means {@link #getRole()} is likely not null.
     *
     * @return True, if this override is for a role
     */",net.dv8tion.jda.api.events.guild.override
"public static final Route INVITE_ACCEPT = Route.post(""/invites/{invite.code}"");","/**
     * Accept an invite. This requires the guilds.join OAuth2 scope to be able to accept invites on behalf of normal
     * users (via an OAuth2 Bearer token). Bot users are disallowed. Returns an invite object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/invite#accept-invite"">
     * https://discord.com/developers/docs/resources/invite#accept-invite</a>
     */",discord4j.rest.route
void deleteSelectedUserProfile();,"/**
     * Delete the user profile.
     *
     *
     */",recorder.view
"public int getCount() {
        return this.data.count();
    }","/**
     * Gets the count of this poll answer count.
     *
     * @return the count of this poll answer count
     */",discord4j.core.object.entity.poll
"@Nonnull
    public static List<CommandData> fromList(@Nonnull DataArray array)
    {
        Checks.notNull(array, ""DataArray"");
        return array.stream(DataArray::getObject)
                .map(CommandData::fromData)
                .collect(Collectors.toList());
    }","/**
     * Parses the provided serialization back into an CommandData instance.
     * <br>This is the reverse function for {@link CommandData#toData()}.
     *
     * @param  array
     *         Array of serialized {@link DataObject} representing the commands
     *
     * @throws net.dv8tion.jda.api.exceptions.ParsingException
     *         If the serialized object is missing required fields
     * @throws IllegalArgumentException
     *         If any of the values are failing the respective checks such as length
     *
     * @return The parsed CommandData instances, which can be further configured through setters
     *
     * @see    CommandData#fromData(DataObject)
     * @see    SlashCommandData#fromData(DataObject)
     */",net.dv8tion.jda.api.interactions.commands.build
"public DiscordWebRequest query(Multimap<String, Object> params) {
        params.forEachElement(this::query);
        return this;
    }","/**
     * Add the given names and values as request query parameters.
     *
     * @param params a map of query parameter names to values
     * @return this request
     */",discord4j.rest.request
"@Nonnull
    @CheckReturnValue
    M setName(@Nonnull String name);","/**
     * Sets the <b><u>name</u></b> of the selected {@link GuildChannel GuildChannel}.
     *
     * <p>A channel name <b>must not</b> be {@code null} nor empty or more than {@value Channel#MAX_NAME_LENGTH} characters long!
     * <br>TextChannel names may only be populated with alphanumeric (with underscore and dash).
     *
     * <p><b>Example</b>: {@code mod-only} or {@code generic_name}
     * <br>Characters will automatically be lowercased by Discord for text channels!
     *
     * @param  name
     *         The new name for the selected {@link GuildChannel GuildChannel}
     *
     * @throws IllegalArgumentException
     *         If the provided name is {@code null} or not between 1-{@value Channel#MAX_NAME_LENGTH} characters long
     *
     * @return ChannelManager for chaining convenience
     */",net.dv8tion.jda.api.managers.channel
"@Override
    public Optional<MongoConnectionHandler> getConnectionHandler() {
        if (this.mongoConnectionHandler == null)
            return Optional.empty();

        return Optional.of(this.mongoConnectionHandler);
    }",/** {@inheritDoc} */,io.github.heliumdioxid.database.mongo
"public Optional<Set<GuildSticker>> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets a list of ALL old stickers of the {@link Guild}, if present.
     * This may not be available if {@code GuildSticker} are not stored.
     *
     * @return A list of ALL old stickers of the {@link Guild}.
     */",discord4j.core.event.domain.guild
"public static RouteMatcher any() {
        return new RouteMatcher(null);
    }","/**
     * Create a new {@link RouteMatcher} that returns true for every request.
     *
     * @return a new {@link RouteMatcher}
     */",discord4j.rest.request
"public Mono<Member> asFullMember() {
        return gateway.getMemberById(getGuildId(), getId());
    }","/**
     * Retrieves the full {@link Member} instance corresponding to this resolved member.
     *
     * @return a {@link Mono} where, upon successful completion, emits the full {@link Member} instance corresponding to
     * this resolved member. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.command
"public Builder indices(int... shardIndices) {
            this.shardIndexSource = count -> Flux.fromStream(Arrays.stream(shardIndices).boxed());
            return this;
        }","/**
         * Set the list of shard indices to identify to Discord Gateway. Defaults to identifying all shards. Any
         * invocation of this method will also replace the previously set value at {@link #indices(Function)}.
         *
         * @param shardIndices the list of shard indices to identify
         * @return this builder
         */",discord4j.core.shard
"public static GatewayReactorResources.Builder builder() {
        return new GatewayReactorResources.Builder();
    }","/**
     * Returns a new builder to create {@link GatewayReactorResources}.
     *
     * @return a builder to create {@link GatewayReactorResources}
     */",discord4j.gateway
"@Deprecated
        DefaultEventDispatcher.Builder overflowStrategy(FluxSink.OverflowStrategy overflowStrategy);","/**
         * Set the {@link FluxSink.OverflowStrategy} for dealing with overflow scenarios where too many events are
         * being published. Defaults to using {@link FluxSink.OverflowStrategy#BUFFER} to ensure all events are
         * delivered at the cost of higher memory footprint and potential {@link OutOfMemoryError} scenarios.
         * <p>
         * To only keep the earliest events you can use {@link FluxSink.OverflowStrategy#DROP}, and to only keep the
         * most recent events, use {@link FluxSink.OverflowStrategy#LATEST}. The number of events that can be queued
         * until this strategy is applied depends on the underlying processor implementation.
         *
         * @param overflowStrategy the custom backpressure strategy
         * @return this builder
         * @deprecated due to the Processor API being deprecated, we recommend using {@link #eventSink(Function)}
         * moving forward
         */",discord4j.core.event
"final List<EmployeeAssignedProjectDto> managerSubEmployees = this.employeeService.findByManagerIdAndProjectId(this.credentialService.findByUsername(authentication.getName()).getEmployee().getEmployeeId(), Integer.parseInt(assignEmployeesDto.getProjectId()));","/**
	 * handle manager-assign view
	 * get checked employees and assign them to the specified project
	 * and persist every Assignment instance for each employee to DB 
	 * @param assignEmployeesDto used to bind variables
	 * @param error
	 * @param authentication
	 * @param model
	 * @return manager-assign view (using default view resolver)
	 */",com.pfa.app.controller.web.manager
"public Mono<StickerData> modify(GuildStickerModifyRequest request, @Nullable String reason) {
        return restClient.getStickerService().modifyGuildSticker(guildId, id, request, reason);
    }","/**
     * Modify this guild sticker. Requires the {@link Permission#MANAGE_EMOJIS_AND_STICKERS} permission. Returns the updated sticker
     * object on success.
     *
     * @param request the guild sticker modify request
     * @param reason an optional reason for the audit log
     * @return a {@link Mono} where, upon subscription, emits the updated {@link StickerData} on success. If an error
     * is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"@Nullable
    public String getOldIconId()
    {
        return getOldValue();
    }","/**
     * The old icon id
     *
     * @return The old icon id, or null
     */",net.dv8tion.jda.api.events.guild.update
"public int getNewColorRaw()
    {
        return getNewValue();
    }","/**
     * The raw rgb value of the new color
     *
     * @return The raw rgb value of the new color
     */",net.dv8tion.jda.api.events.role.update
"public Kinect(final Joint primaryJoint, final KinectSensors kinectStartingSensors,
            final KinectVersion kinectVersion) {
        this.kinectAdapter = new KinectAdapter(primaryJoint, kinectStartingSensors, kinectVersion);
        this.kinectAdapter.attacheKinect(this);
    }","/**
     * The @link{Kinect.java} constructor.
     *
     * @param primaryJoint
     *            the primary {@link Joint}
     * @param kinectStartingSensors
     *            {@link KinectSensors} the {@link KinectSensors} starting sensors
     * @param kinectVersion
     *            the {@link KinectVersion}
     *
     */",jestures.sensor.kinect
"public Mono<MessageData> executeWebhook(long webhookId, String token, boolean wait,
                                            MultipartRequest<? extends WebhookExecuteRequest> request) {
        return Routes.WEBHOOK_EXECUTE
                .newRequest(webhookId, token)
                .query(""wait"", wait)
                .header(""content-type"", request.getFiles().isEmpty() ? ""application/json"" : ""multipart/form-data"")
                .body(Objects.requireNonNull(request.getFiles().isEmpty() ? request.getJsonPayload() : request))
                .exchange(getRouter())
                .bodyToMono(MessageData.class);
    }","/**
     * Executes the specified webhook.
     *
     * @param wait true if you want to return message data and errors for the webhook.
     * @return If wait is true, a mono that contains the message information of the execution or an
     * error if the webhook is unsuccessful. If wait is false, the mono completes as soon as the request
     * is finished sending, and DOES NOT result in an error if the message is not saved.
     */",discord4j.rest.service
"public LegacyWebhookExecuteSpec addEmbed(Consumer<? super LegacyEmbedCreateSpec> spec) {
        final LegacyEmbedCreateSpec mutatedSpec = new LegacyEmbedCreateSpec();
        spec.accept(mutatedSpec);
        if (this.embeds == null) {
            this.embeds = new ArrayList<>(1); // Most likely only one embed will be specified.
        }
        this.embeds.add(mutatedSpec.asRequest());
        return this;
    }","/**
     * Adds rich content to the created {@link discord4j.core.object.entity.Message} in the form of an {@link discord4j.core.object.Embed} object.
     *
     * @param spec An {@link LegacyEmbedCreateSpec} consumer used to attach rich content when creating a message.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    public EnumSet<Permission> getOldInherited()
    {
        return Permission.getPermissions(getOldInheritedRaw());
    }","/**
     * The old inherited permissions
     *
     * @return The old inherited permissions
     */",net.dv8tion.jda.api.events.guild.override
"@Nullable
    public Color getColor()
    {
        return this.color == net.dv8tion.jda.api.entities.Role.DEFAULT_COLOR_RAW ? null : new Color(this.color);
    }","/**
     * The color this {@link TemplateRole Role} is displayed in.
     *
     * @return Color value of Role-color
     *
     * @see    #getColorRaw()
     */",net.dv8tion.jda.api.entities.templates
"public static final Route GUILD_EMOJI_CREATE = Route.post(""/guilds/{guild.id}/emojis"");","/**
     * Create a new emoji for the guild. Returns the new emoji object on success. Fires a Guild Emojis Update Gateway
     * event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/emoji#create-guild-emoji"">
     * https://discord.com/developers/docs/resources/emoji#create-guild-emoji</a>
     */",discord4j.rest.route
"static EventDispatcher withEarliestEvents(int bufferSize) {
        return builder()
                .eventSink(spec -> spec.multicast().onBackpressureBuffer(bufferSize, false))
                .build();
    }","/**
     * Create an {@link EventDispatcher} that will buffer incoming events up to the given {@code bufferSize} elements,
     * where subsequent events will be dropped in favor of retaining the earliest ones. Startup events collected
     * before the first subscription are only forwarded to that subscriber.
     *
     * @param bufferSize the number of events to keep in the backlog
     * @return an {@link EventDispatcher} keeping the earliest events up to {@code bufferSize}
     */",discord4j.core.event
"@Nonnull
    public GuildMessageChannelUnion getChannel()
    {
        return (GuildMessageChannelUnion) channel;
    }","/**
     * The {@link net.dv8tion.jda.api.entities.channel.middleman.GuildMessageChannel GuildMessageChannel} where the messages have been deleted
     *
     * @return The TextChannel
     */",net.dv8tion.jda.api.events.message
"@Nonnull
    @CheckReturnValue
    ScheduledEventManager setName(@Nonnull String name);","/**
     * Sets the name of the selected {@link ScheduledEvent ScheduledEvent}
     *
     * @param  name
     *         The new name for the selected {@link ScheduledEvent ScheduledEvent}
     *
     * @throws java.lang.IllegalArgumentException
     *         If the new name is blank, empty, {@code null}, or longer than {@value ScheduledEvent#MAX_NAME_LENGTH}
     *         characters
     *
     * @return ScheduledEventManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    default EnumSet<Permission> getAllowedPermissions()
    {
        return Permission.getPermissions(getAllowed());
    }","/**
     * Set of {@link net.dv8tion.jda.api.Permission Permissions}
     * that would be <b>granted</b> by the PermissionOverride that is created by this action.
     * <br><u>Changes to the returned set do not affect this entity directly.</u>
     *
     * @return set of granted {@link net.dv8tion.jda.api.Permission Permissions}
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @CheckReturnValue
    ChannelAction<VoiceChannel> createVoiceChannel(@Nonnull String name);","/**
     * Creates a new {@link VoiceChannel VoiceChannel} with this Category as parent.
     * For this to be successful, the logged in account has to have the
     * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission in this Category.
     *
     * <p>This will copy all {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides} of this Category!
     * Unless the bot is unable to sync it with this category due to permission escalation.
     * See {@link IPermissionHolder#canSync(IPermissionContainer, IPermissionContainer)} for details.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_CHANNELS MAX_CHANNELS}
     *     <br>The maximum number of channels were exceeded</li>
     * </ul>
     *
     * @param  name
     *         The name of the VoiceChannel to create (up to {@value Channel#MAX_NAME_LENGTH} characters)
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL} permission
     * @throws IllegalArgumentException
     *         If the provided name is {@code null}, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters
     *
     * @return A specific {@link ChannelAction ChannelAction}
     *         <br>This action allows to set fields for the new VoiceChannel before creating it
     */",net.dv8tion.jda.api.entities.channel.concrete
"private static List<String> tipFaction(Faction faction) {
        List<String> lines = new ArrayList<>();
        for (String line : SavageFactions.plugin.getConfig().getStringList(""tooltips.list"")) {
            lines.add(ChatColor.translateAlternateColorCodes('&', TagUtil.parsePlain(faction, line)));
        }
        return lines;
    }","/**
     * Parses tooltip variables from config <br> Supports variables for factions only (type 2)
     *
     * @param faction faction to tooltip for
     * @return list of tooltips for a fancy message
     */",com.massivecraft.factions.zcore.util
"@Nullable
    default Category getCategoryById(long id)
    {
        return (Category) getChannelCache().getElementById(ChannelType.CATEGORY, id);
    }","/**
     * Gets a {@link Category Category} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The snowflake ID of the wanted Category
     *
     * @return Possibly-null {@link Category Category} for the provided ID.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Mono<Webhook> getWebhook() {
        return gateway.getWebhookById(Snowflake.of(data.webhookId()));
    }","/**
     * Requests to retrieve the webhook that has been created when following the news channel. Requires
     * 'MANAGE_WEBHOOKS' permission.
     *
     * <p>
     * Note that the returned webhook cannot be executed, but can be deleted.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link Webhook webhook} that has been created
     * when following the news channel. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
    @CheckReturnValue
    M removePermissionOverride(@Nonnull IPermissionHolder permHolder);","/**
     * Removes the {@link PermissionOverride PermissionOverride} for the specified
     * {@link IPermissionHolder IPermissionHolder}. If no override existed for this member
     * or role, this does nothing.
     *
     * @param  permHolder
     *         The permission holder
     *
     * @throws IllegalArgumentException
     *         If the provided permission holder is {@code null}
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         in this channel
     *
     * @return ChannelManager for chaining convenience
     */",net.dv8tion.jda.api.managers.channel.attribute
"public int getBitrate()
    {
        return this.bitrate;
    }","/**
     * The audio bitrate of the voice audio that is transmitted in this channel. While higher bitrates can be sent to
     * this channel, it will be scaled down by the client.
     *
     * <br>Default and recommended value is 64000
     *
     * @return The audio bitrate of this voice channel
     */",net.dv8tion.jda.api.entities.templates
"public Event(@Nonnull JDA api)
    {
        this(api, api.getResponseTotal());
    }","/**
     * Creates a new Event from the given JDA instance
     * <br>Uses the current {@link net.dv8tion.jda.api.JDA#getResponseTotal()} as sequence
     *
     * @param api
     *        Current JDA instance
     */",net.dv8tion.jda.api.events
"@Nullable
    public ImageProxy getOldSplash()
    {
        final String oldSplashUrl = getOldSplashUrl();
        return oldSplashUrl == null ? null : new ImageProxy(oldSplashUrl);
    }","/**
     * Returns an {@link ImageProxy} for this guild's old splash image.
     * <p>
     * <b>Note:</b> the old splash may not always be downloadable as it might have been removed from Discord.
     *
     * @return Possibly-null {@link ImageProxy} of this guild's old splash image
     *
     * @see    #getOldSplashUrl() ()
     */",net.dv8tion.jda.api.events.guild.update
"public Mono<AuthorizationInfoData> getAuthorizationInfo() {
        return exchange(Routes.AUTHORIZATION_INFO_GET.newRequest(), AuthorizationInfoData.class);
    }","/**
     * Returns info about the current authorization. Uses {@link #withAuthorizedClient(DiscordWebRequest)} to retrieve
     * and use the Bearer token tied to this client.
     *
     * @return a Mono with authorization details given by this token in this client, or an
     * error Mono in case any request fails
     */",discord4j.oauth2
DataAccessor getDataAccessor();,"/**
     * Returns a {@link DataAccessor} that defines action handlers for reading data from the store.
     *
     * @return a {@link DataAccessor}
     */",discord4j.common.store.api.layout
"@Nonnull
    public synchronized List<FileUpload> getFiles()
    {
        return files.stream()
                .filter(FileUpload.class::isInstance)
                .map(FileUpload.class::cast)
                .collect(Helpers.toUnmodifiableList());
    }","/**
     * The {@link FileUpload FileUploads} attached to this message.
     *
     * @return The list of file uploads
     */",net.dv8tion.jda.api.utils.messages
"Method getPlatFormMethod = worldGuard.getClass().getMethod(""getPlatform"");","/**
     * Credits to the people listed above for using reflections to load WorldGuard 6.0 & 7.0 in 1 class!
     */",com.massivecraft.factions.integration
"public Message getMessage() {
        return message;
    }","/**
     * Gets the {@link Message} that was created in this event.
     *
     * @return The {@link Message} that was created.
     */",discord4j.core.event.domain.message
"static RetryingTransformer retryOnceOnErrorStatus(Integer... codes) {
        return new RetryingTransformer(RouteMatcher.any(),
            RetryBackoffSpec.backoff(1, Duration.ofSeconds(1))
                .filter(exception -> ClientException.isStatusCode(codes).test(exception)));
    }","/**
     * Applies a retry strategy to retry <strong>once</strong> with a fixed backoff of 1 second to the given
     * <strong>error</strong> status codes caused by any request, effectively suppressing the {@link ClientException}
     * that would be forwarded otherwise.
     * <p>
     * Only a subset of HTTP status codes is supported, like all the ones from 400 and 500 series, except for the 429
     * (Too Many Requests) error that is handled upstream.
     * <p>
     * Please note that if you specify error codes 502, 503 or 504 you will replace a built-in retry factory that
     * handles Discord service errors using an exponential backoff with jitter strategy.
     *
     * @param codes the list of HTTP status codes to match when applying this transformation
     * @return a {@link ResponseFunction} that transforms matching response statuses into sequence that retries the
     * request once after waiting 1 second.
     */",discord4j.rest.response
"@Nonnull
    @CheckReturnValue
    default ThreadChannelAction createThreadChannel(@Nonnull String name)
    {
        return createThreadChannel(name, false);
    }","/**
     * Creates a new public {@link ThreadChannel} with the parent channel being this {@link IThreadContainer}.
     *
     * <p>The resulting {@link ThreadChannel ThreadChannel} may be either one of:
     * <ul>
     *     <li>{@link ChannelType#GUILD_PUBLIC_THREAD}</li>
     *     <li>{@link ChannelType#GUILD_NEWS_THREAD}</li>
     * </ul>
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_CHANNELS MAX_CHANNELS}
     *     <br>The maximum number of channels were exceeded</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_ACTIVE_THREADS}
     *     <br>The maximum number of active threads has been reached, and no more may be created.</li>
     * </ul>
     *
     * @param  name
     *         The name of the new ThreadChannel (up to {@value Channel#MAX_NAME_LENGTH} characters)
     *
     * @throws IllegalArgumentException
     *         If the provided name is null, blank, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters
     * @throws UnsupportedOperationException
     *         If this is a forum channel.
     *         You must use {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel#createForumPost(String, MessageCreateData) createForumPost(...)} instead.
     * @throws InsufficientPermissionException
     *         <ul>
     *             <li>If the bot does not have {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL}</li>
     *             <li>If the bot does not have {@link net.dv8tion.jda.api.Permission#CREATE_PUBLIC_THREADS Permission.CREATE_PUBLIC_THREADS}</li>
     *         </ul>
     *
     * @return A specific {@link ThreadChannelAction} that may be used to configure the new ThreadChannel before its creation.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    AutoModTriggerType getTriggerType();","/**
     * The {@link AutoModTriggerType} for the execution.
     *
     * @return The {@link AutoModTriggerType}
     */",net.dv8tion.jda.api.entities.automod
"@Nullable
    public Webhook getWebhook()
    {
        return webhook;
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Webhook Webhook} that the target id of this audit-log entry refers to
     *
     * @return Possibly-null Webhook instance
     */",net.dv8tion.jda.api.audit
"public static GetChannelsInGuildAction getChannelsInGuild(long guildId) {
        return new GetChannelsInGuildAction(guildId);
    }","/**
     * Creates an action to retrieve data for all channels present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link GetChannelsInGuildAction}
     */",discord4j.common.store.action.read
"public ResolvedMemberData getData() {
        return data;
    }","/**
     * Returns the raw data as represented by Discord.
     *
     * @return the raw data
     */",discord4j.core.object.command
"Mono<MemberData> getMemberById(long guildId, long userId);","/**
     * Retrieves data for the member corresponding to the given guild ID and user ID.
     *
     * @param guildId the guild ID
     * @param userId  the user ID
     * @return A {@link Mono} emitting the member, or empty if not found
     */",discord4j.common.store.api.layout
"public static Channel getChannel(final GatewayDiscordClient gateway, final ChannelData data) {
        switch (Channel.Type.of(data.type())) {
            case GUILD_TEXT: return new TextChannel(gateway, data);
            case DM: return new PrivateChannel(gateway, data);
            case GUILD_VOICE:
                return new VoiceChannel(gateway, data);
            case GUILD_STAGE_VOICE:
                return new StageChannel(gateway, data);
            case GUILD_CATEGORY: return new Category(gateway, data);
            case GUILD_NEWS: return new NewsChannel(gateway, data);
            case GUILD_STORE: return new StoreChannel(gateway, data);
            case GUILD_NEWS_THREAD:
            case GUILD_PUBLIC_THREAD:
            case GUILD_PRIVATE_THREAD:
                return new ThreadChannel(gateway, data);
            case GUILD_FORUM:
                return new ForumChannel(gateway, data);
            default:
                log.info(""Unknown channel type {} with data: {}"", data.type(), data);
                return new UnknownChannel(gateway, data);
        }
    }","/**
     * A utility that converts some instance of {@code ChannelData} to its associated {@code Channel}
     * {@link Channel.Type type}. That is to say, {@code data.getType() == Channel#getType().getValue()}.
     *
     * @param gateway The {@link GatewayDiscordClient} associated to this object, must be non-null.
     * @param data The {@code ChannelBean} to convert.
     * @return The converted {@code Channel}.
     */",discord4j.core.util
"public static final Route GUILD_INTEGRATION_MODIFY = Route.patch(""/guilds/{guild.id}/integrations/{integration.id}"");","/**
     * Modify the behavior and settings of a integration object for the guild. Requires the 'MANAGE_GUILD' permission.
     * Returns a 204 empty response on success. Fires a Guild Integrations Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#modify-guild-integration"">
     * https://discord.com/developers/docs/resources/guild#modify-guild-integration</a>
     */",discord4j.rest.route
"Mono<ThreadMemberData> onThreadMemberUpdate(int shardIndex, ThreadMemberUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link ThreadMemberUpdate} gateway dispatch. This
     * will typically perform a delete operation on a related {@link ThreadMemberData} that is already present in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link ThreadMemberUpdate} before the deletion
     */",discord4j.common.store.api.layout
Mono<MessageData> getInitialResponse();,"/**
     * Return a {@link Mono} that upon subscription, will retrieve the initial response sent when accepting this
     * interaction.
     *
     * @return a {@link Mono} where, upon successful completion, emits the original message. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"public boolean isLeaveEvent() {
        return !current.getChannelId().isPresent() && old != null;
    }","/**
     * Gets whether this event is a voice channel leave event.
     *
     * @return {@code true} if this is a voice channel leave event, {@code false} otherwise.
     */",discord4j.core.event.domain
"public static final Route MESSAGE_CREATE = Route.post(""/channels/{channel.id}/messages"");","/**
     * Post a message to a guild text or DM channel. If operating on a guild channel, this endpoint requires the
     * 'SEND_MESSAGES' permission to be present on the current user. Returns a message object. Fires a Message Create
     * Gateway event. See message formatting for more information on how to properly format messages.
     * <p>
     * This endpoint supports both JSON and form data bodies. It does require multipart/form-data requests instead
     * of the normal JSON request type when uploading files. Make sure you set your Content-Type to multipart/form-data
     * if you're doing that. Note that in that case, the embed field cannot be used, but you can pass an url-encoded
     * JSON body as a form value for payload_json.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#create-message"">
     * https://discord.com/developers/docs/resources/channel#create-message</a>
     */",discord4j.rest.route
Mono<Long> countRolesInGuild(long guildId);,"/**
     * Counts the number of roles present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Mono} emitting the role count
     */",discord4j.common.store.api.layout
boolean isSendingVideo();,"/**
     * Returns true if this {@link net.dv8tion.jda.api.entities.Member Member} has their camera turned on.
     * <br>This does not include streams! See {@link #isStream()}
     *
     * @return True, if this member has their camera turned on.
     */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    M setNSFW(boolean nsfw);","/**
     * Sets the <b><u>nsfw flag</u></b> (also known as Age Restriction) of the selected {@link IAgeRestrictedChannel channel}.
     *
     * @param  nsfw
     *         The new nsfw flag for the selected {@link IAgeRestrictedChannel channel}.
     *
     * @return ChannelManager for chaining convenience
     */",net.dv8tion.jda.api.managers.channel.attribute
"@Nonnull
    public Guild.NotificationLevel getOldNotificationLevel()
    {
        return getOldValue();
    }","/**
     * The old {@link net.dv8tion.jda.api.entities.Guild.NotificationLevel NotificationLevel}
     *
     * @return The old NotificationLevel
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    @CheckReturnValue
    StageInstanceAction setTopic(@Nonnull String topic);","/**
     * Sets the topic for the stage instance.
     * <br>This shows up in stage discovery and in the stage view.
     *
     * @param  topic
     *         The topic, must be 1-120 characters long
     *
     * @throws IllegalArgumentException
     *         If the topic is null, empty, or longer than 120 characters
     *
     * @return The StageInstanceAction for chaining
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    default String getChannelId()
    {
        long id = getChannelIdLong();
        return id != 0 ? Long.toUnsignedString(getChannelIdLong()) : null;
    }","/**
     * The ID of the channel this interaction happened in.
     * <br>This might be null if no channel context is provided in future interaction types.
     *
     * @return The channel ID, or null if no channel context is provided
     */",net.dv8tion.jda.api.interactions
long getSkuIdLong();,"/**
     * The stock-keeping unit (SKU) for this sticker pack.
     * <br>This is used for store purchases, if there was a store to buy the pack from.
     *
     * @return The SKU id for this pack, or {@code 0} if there is no SKU
     */",net.dv8tion.jda.api.entities.sticker
long getApplicationIdLong();,"/**
     * The associated application id for the bot account.
     * <br>For most bots this is identical to the user id.
     *
     * @return The application id
     */",net.dv8tion.jda.api.entities
"@Nonnull
    public static CommandData context(@Nonnull Command.Type type, @Nonnull String name)
    {
        return new CommandDataImpl(type, name);
    }","/**
     * Create a context menu command builder for the specified command type.
     * <br>This cannot be used for slash commands, because they require a description.
     * Use {@link #slash(String, String)} to create a slash command.
     *
     * @param  type
     *         The command type, must not be {@link Command.Type#SLASH SLASH}
     * @param  name
     *         The command name, 1-32 characters
     *
     * @throws IllegalArgumentException
     *         If the name is not between 1-32 characters long, the type is {@link Command.Type#SLASH}, or the type is null.
     *
     * @return {@link CommandData}
     */",net.dv8tion.jda.api.interactions.commands.build
"public Builder mutate() {
        return new Builder(shardInfo)
                .initialStatus(initialStatus)
                .intents(intents)
                .largeThreshold(largeThreshold)
                .resumeSession(resumeSession);
    }","/**
     * Derive a {@link Builder} from this object, reusing all properties.
     *
     * @return a {@link Builder} for further configuration
     */",discord4j.gateway
"@Nonnull
    public DataObject getPackage()
    {
        return data;
    }","/**
     * The raw gateway package including sequence and type.
     *
     * <ul>
     *     <li>d: The payload of the package (DataObject)</li>
     *     <li>t: The type of the package (String)</li>
     *     <li>op: The opcode of the package, always 0 for dispatch (int)</li>
     *     <li>s: The sequence number, equivalent to {@link #getResponseNumber()} (long)</li>
     * </ul>
     *
     * @return The data object
     */",net.dv8tion.jda.api.events
"@RequestMapping(value = ""subscribeToCity"", method = RequestMethod.POST)
    public Mono<Void> subscribe(@Valid @RequestBody SubscriptionCreateDTO dto) {
        return service.subscribeToCity(dto);
    }","/**
     * This method sends the DTO to the service's subscribe method.
     *
     * @param dto ->
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.controller.subscription
"@Nonnull
    String getPropertyIdentifier();","/**
     * The field name for the updated property
     *
     * <p><b>Example</b><br>
     * <pre><code>
     * {@literal @Override}
     * public void onGenericRoleUpdate(GenericRoleUpdateEvent event)
     * {
     *     switch (event.getPropertyIdentifier())
     *     {
     *     case RoleUpdateColorEvent.IDENTIFIER:
     *         System.out.printf(""Updated color for role: %s%n"", event);
     *         break;
     *     case RoleUpdatePositionEvent.IDENTIFIER:
     *         RoleUpdatePositionEvent update = (RoleUpdatePositionEvent) event;
     *         System.out.printf(""Updated position for role: %s raw(%s{@literal ->}%s)%n"", event, update.getOldPositionRaw(), update.getNewPositionRaw());
     *         break;
     *     default: return;
     *     }
     * }
     * </code></pre>
     *
     * @return The name of the updated property
     */",net.dv8tion.jda.api.events
"public static GuildMemberAddAction guildMemberAdd(int shardIndex, GuildMemberAdd dispatch) {
        return new GuildMemberAddAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildMemberAdd} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildMemberAddAction}
     */",discord4j.common.store.action.gateway
"public Snowflake getGuildId() {
        return Snowflake.of(data.guildId());
    }","/**
     * Returns the id of the guild.
     *
     * @return the id of the guild
     */",discord4j.core.object.command
"public Flux<VoiceState> getRequestsToSpeak() {
        return getVoiceStates()
                .filter(voiceState -> voiceState.getRequestedToSpeakAt().isPresent());
    }","/**
     * Requests to retrieve the voice states of this channel with a request to speak.
     *
     * @return A {@link Flux} that continually emits the {@link VoiceState voice states} of this stage channel with a
     * request to speak. If an error is received, it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
long getCoverIdLong();,"/**
     * The id of the sticker shown as cover.
     *
     * @return The sticker id for the cover sticker, or {@code 0} if there is no cover
     */",net.dv8tion.jda.api.entities.sticker
"void notifyOnFrameChange(int frame, Vector2D derivative, Vector2D path);","/**
     * Update view on frame event.
     *
     * @param frame
     *            the frame
     * @param derivative
     *            the {@link Vector2D} derivative
     * @param path
     *            the {@link Vector2D} gesture path
     */",jestures.core.view
"@Nonnull
    public Guild getGuild()
    {
        if (!isFromGuild())
            throw new IllegalStateException(""This channel event did not happen in a guild"");
        return ((GuildChannel) channel).getGuild();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Guild Guild} in which this channel event happened.
     * <br>If this channel event was not received in a {@link net.dv8tion.jda.api.entities.channel.middleman.GuildChannel GuildChannel},
     * this will throw an {@link java.lang.IllegalStateException}.
     *
     * @throws java.lang.IllegalStateException
     *         If this channel event did not happen in a {@link net.dv8tion.jda.api.entities.channel.middleman.GuildChannel}.
     *
     * @return The Guild in which this channel event happened
     *
     * @see    #isFromType(ChannelType)
     * @see    #getChannelType()
     */",net.dv8tion.jda.api.events.channel
Mono<UserDetailDTO> detail(Integer id);,"/**
     * This method is used to get the UserDetailDTO.
     *
     * @param id -> Incoming id cannot be less than one.
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.service.user
"public CompletableFuture<Void> insertDocuments(final String collection, final List<Document> documents) {
        return getCollection(collection).thenApplyAsync(optionalMongoCollection -> {
            optionalMongoCollection.ifPresent(mongoCollection -> mongoCollection.insertMany(documents));
            return null;
        });
    }","/**
     * Inserts a list of {@link Document} asynchronously into a MongoCollection
     * @param collection name of the collection
     */",io.github.heliumdioxid.database.mongo
void setFrameLength(GestureLength length);,"/**
     * Set the frame length or FPS.
     *
     * @param length
     *            the {@link GestureLength}.
     */",jestures.core.codification
"public Scheduler getBackoffScheduler() {
        return backoffScheduler;
    }","/**
     * Returns a scheduler provided every reconnect attempt, as backoff delay.
     *
     * @return scheduler used when reconnecting
     */",discord4j.common.retry
"@Nonnull
    @CheckReturnValue
    ChannelAction<T> clearPermissionOverrides();","/**
     * Removes all currently configured permission overrides
     *
     * @return The current ChannelAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @CheckReturnValue
    default RoleAction setIcon(@Nullable UnicodeEmoji emoji)
    {
        return setIcon(emoji == null ? null : emoji.getFormatted());
    }","/**
     * Sets the Unicode Emoji of this {@link net.dv8tion.jda.api.entities.Role Role} instead of a custom image.
     * This emoji will be displayed next to the role's name in the members tab and in chat.
     *
     * @param  emoji
     *         The new Unicode emoji for this {@link net.dv8tion.jda.api.entities.Role Role}
     *         or {@code null} to reset
     *
     * @return The current RoleAction, for chaining convenience
     *
     * @see    net.dv8tion.jda.api.entities.emoji.Emoji#fromUnicode(String) Emoji.fromUnicode(String)
     * @see    UnicodeEmoji
     */",net.dv8tion.jda.api.requests.restaction
public abstract String readLine();,"/**
   * Reads a line from the terminal input.
   *
   * @return a string
   */",io.github.augustoravazoli.termenu.io
"public int getRGB() {
        return rgb;
    }","/**
     * Returns the RGB value for this color. The blue value will be in bits 0-7, green in 8-15, and red in 16-23.
     *
     * @return The RGB value for this color.
     */",discord4j.rest.util
"public static final String BUILD_DATE = System.getProperty(""java.version"");","/**
	 * The build date. Note: For now, we will use a version number instead of a
	 * date.
	 */",net.winroad.htmldoclet4jdk8
"@Nullable
    public Color getNewColor()
    {
        return next != Role.DEFAULT_COLOR_RAW ? new Color(next) : null;
    }","/**
     * The new color
     *
     * @return The new color, or null
     */",net.dv8tion.jda.api.events.role.update
"public Comparator<ProgramElementDoc> getMemberComparator() {
		return null;
	}","/**
	 * {@inheritDoc}
	 */",net.winroad.htmldoclet4jdk8
"public Publisher<?> onVoiceStateUpdate(VoiceStateUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user's connected voice channel and status, was requested or has updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    NewsChannelManager setType(@Nonnull ChannelType type);","/**
     * Converts the selected channel to a different {@link ChannelType}.
     *
     * <br><br>
     * This can only be done in the follow situations:
     * <table>
     *     <caption style=""display: none"">Javadoc is stupid, this is not a required tag</caption>
     *     <thead>
     *         <tr>
     *             <th>Current Channel Type</th>
     *             <th></th>
     *             <th>New Channel Type</th>
     *         </tr>
     *     </thead>
     *     <tbody>
     *         <tr>
     *             <td>{@link ChannelType#NEWS}</td>
     *             <td> -&gt; </td>
     *             <td>{@link ChannelType#TEXT}</td>
     *         </tr>
     *         <tr>
     *             <td>{@link ChannelType#TEXT}</td>
     *             <td> -&gt; </td>
     *             <td>{@link ChannelType#NEWS}</td>
     *         </tr>
     *     </tbody>
     * </table>
     *
     * @param  type
     *         The new not-null {@link ChannelType} of the channel
     *
     * @throws IllegalArgumentException
     *         If {@code channelType} is not {@link ChannelType#TEXT} or {@link ChannelType#NEWS}
     * @throws UnsupportedOperationException
     *         If this ChannelAction is not for a {@link TextChannel} or {@link NewsChannel}
     * @throws IllegalStateException
     *         If {@code channelType} is {@link ChannelType#NEWS} and the guild doesn't have the {@code NEWS} feature in {@link Guild#getFeatures()}.
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    Guild#getFeatures()
     */",net.dv8tion.jda.api.managers.channel.concrete
"public static GetEmojisAction getEmojis() {
        return new GetEmojisAction();
    }","/**
     * Creates an action to retrieve data for all emojis present in a store.
     *
     * @return a new {@link GetEmojisAction}
     */",discord4j.common.store.action.read
"public RequestQueueFactory getRequestQueueFactory() {
        return requestQueueFactory;
    }","/**
     * Returns the {@link RequestQueueFactory} to use for creating {@link RequestQueue} instances.
     *
     * @return the configured {@link RequestQueueFactory}
     */",discord4j.rest.request
"public LegacyGuildEditSpec setIcon(@Nullable Image icon) {
        requestBuilder.icon(Possible.of(Optional.ofNullable(icon).map(Image::getDataUri)));
        return this;
    }","/**
     * Sets the image icon to display for the modified {@link Guild}.
     *
     * @param icon The icon for the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    public EnumSet<Permission> getPermissions()
    {
        return Permission.getPermissions(rawPermissions);
    }","/**
     * The Guild-Wide Permissions this PermissionHolder holds.
     * <br><u>Changes to the returned set do not affect this entity directly.</u>
     *
     * @return An EnumSet of Permissions granted to this PermissionHolder.
     */",net.dv8tion.jda.api.entities.templates
"static RequestQueueFactory buffering() {
        return RequestQueueFactory.createFromSink(
                spec -> spec.multicast().onBackpressureBuffer(Queues.SMALL_BUFFER_SIZE, false),
                EmissionStrategy.park(Duration.ofMillis(10)));
    }","/**
     * Returns a factory of {@link RequestQueue} with default parameters capable of buffering requests up to a
     * reasonable capacity, then applying a delay on overflowing requests.
     *
     * @return a {@link RequestQueueFactory} backed by a multicasting {@link Sinks.Many} with capacity given by
     * {@link Queues#SMALL_BUFFER_SIZE} and a parking {@link EmissionStrategy}.
     */",discord4j.rest.request
"@Nullable
    AudioChannelUnion getConnectedChannel();","/**
     * The {@link AudioChannelUnion} that JDA currently has an audio connection to.
     * <br>If JDA currently doesn't have an active audio connection, this will return {@code null}.
     *
     * @return The {@link AudioChannelUnion} the audio connection is connected to, or {@code null} if not connected.
     */",net.dv8tion.jda.api.managers
"public boolean isPremiumSubscriberRole() {
        return !data.premiumSubscriber().isAbsent();
    }","/**
     * Gets whether this is the guild's premium subscriber role.
     *
     * @return Whether this is the guild's premium subscriber role.
     */",discord4j.core.object
"public static final Route REACTION_DELETE_OWN = Route.delete(""/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me"");","/**
     * Delete a reaction the current user has made for the message. Returns a 204 empty response on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#delete-own-reaction"">
     * https://discord.com/developers/docs/resources/channel#delete-own-reaction</a>
     */",discord4j.rest.route
Mono<Boolean> isConnected();,"/**
     * Returns whether this GatewayClient is currently connected to Discord Gateway therefore capable to send and
     * receive payloads.
     *
     * @return a {@link Mono} that upon subscription, returns true if the gateway connection is currently
     * established, false otherwise.
     */",discord4j.gateway
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction replyComponents(@Nonnull LayoutComponent component, @Nonnull LayoutComponent... other)
    {
        Checks.notNull(component, ""LayoutComponents"");
        Checks.noneNull(other, ""LayoutComponents"");
        List<LayoutComponent> layouts = new ArrayList<>(1 + other.length);
        layouts.add(component);
        Collections.addAll(layouts, other);
        return replyComponents(layouts);
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     * </ul>
     *
     * @param  component
     *         The {@link LayoutComponent} to send
     * @param  other
     *         Any addition {@link LayoutComponent LayoutComponents} to send
     *
     * @throws IllegalArgumentException
     *         If null is provided or more than {@value Message#MAX_COMPONENT_COUNT} component layouts are provided
     *
     * @return {@link ReplyCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"static ShardingStrategy recommended() {
        return new ShardingStrategy() {

            @Override
            public Mono<Integer> getShardCount(RestClient restClient) {
                return restClient.getGatewayService().getGatewayBot()
                        .map(GatewayData::shards)
                        .map(Possible::get);
            }

            @Override
            public GatewayClientGroupManager getGroupManager(int shardCount) {
                return new ShardingGatewayClientGroup(shardCount);
            }

            @Override
            public int getMaxConcurrency() {
                return 1;
            }

            @Override
            public Mono<Integer> getMaxConcurrency(RestClient restClient) {
                return restClient.getGatewayService().getGatewayBot()
                    .map(GatewayData::sessionStartLimit)
                    .map(sessionStartLimit -> sessionStartLimit.toOptional()
                        .map(SessionStartLimitData::maxConcurrency)
                        .flatMap(Possible::toOptional)
                        .orElseGet(this::getMaxConcurrency)
                    );

            }
        };
    }","/**
     * Sharding strategy that retrieves the recommended shard count and concurrency, and creates as many
     * {@link GatewayClient} instances as indexes given by that count.
     *
     * @return a recommended {@link ShardingStrategy}
     */",discord4j.core.shard
Flux<MemberData> getMembersInGuild(long guildId);,"/**
     * Retrieves data for all members present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Flux} emitting the members, or empty if none is present
     */",discord4j.common.store.api.layout
"@Nullable
    public Member getMember()
    {
        return  message.getMember();
    }","/**
     * Member instance for the author of this message or {@code null} if this
     * was not in a Guild.
     *
     * @return The Member instance for the author or null
     */",net.dv8tion.jda.api.events.message
"public String getFactionTag() {
        return tag;
    }","/**
     * Get the new faction tag.
     *
     * @return new faction tag as String.
     */",com.massivecraft.factions.event
"@Nonnull
    @CheckReturnValue
    WebhookAction createWebhook(@Nonnull String name);","/**
     * Creates a new {@link net.dv8tion.jda.api.entities.Webhook Webhook}.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The webhook could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_WEBHOOKS MAX_WEBHOOKS}
     *     <br>If the channel already has reached the maximum capacity for webhooks</li>
     * </ul>
     *
     * @param  name
     *         The default name for the new Webhook.
     *
     * @throws net.dv8tion.jda.api.exceptions.PermissionException
     *         If you do not hold the permission {@link net.dv8tion.jda.api.Permission#MANAGE_WEBHOOKS Manage Webhooks}
     * @throws IllegalArgumentException
     *         If the provided name is {@code null}, blank or not
     *         between 2-100 characters in length
     *
     * @return A specific {@link WebhookAction WebhookAction}
     *         <br>This action allows to set fields for the new webhook before creating it
     */",net.dv8tion.jda.api.entities.channel.attribute
public abstract L getLeft();,"/**
     * <p>Gets the left element from this pair.</p>
     *
     * <p>When treated as a key-value pair, this is the key.</p>
     *
     * @return the left element, may be null
     */",net.dv8tion.jda.internal.utils.tuple
"public static CountTotalAction countChannels() {
        return new CountTotalAction(CountableEntity.CHANNELS);
    }","/**
     * Creates an action to count the number of channels present in a store.
     *
     * @return a new {@link CountTotalAction}
     */",discord4j.common.store.action.read
"public static GetPresenceByIdAction getPresenceById(long guildId, long userId) {
        return new GetPresenceByIdAction(guildId, userId);
    }","/**
     * Creates an action to retrieve data for the presence corresponding to the given guild ID and user ID.
     *
     * @param guildId the guild ID
     * @param userId  the user ID
     * @return a new {@link GetPresenceByIdAction}
     */",discord4j.common.store.action.read
Flux<GuildData> getGuilds();,"/**
     * Retrieves data for all guilds present in the store.
     *
     * @return A {@link Flux} emitting the guilds, or empty if none is present
     */",discord4j.common.store.api.layout
"public boolean isFailure()
    {
        return error != null;
    }","/**
     * True if this result is a failure.
     * <br>Use {@link #getFailure()} or {@link #expect(Predicate)} to handle failures.
     *
     * @return True, if this is a failure result
     */",net.dv8tion.jda.api.utils
"@Nonnull
    @CheckReturnValue
    default RoleManager setColor(@Nullable Color color)
    {
        return setColor(color == null ? Role.DEFAULT_COLOR_RAW : color.getRGB());
    }","/**
     * Sets the {@link java.awt.Color Color} of the selected {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * @param  color
     *         The new color for the selected {@link net.dv8tion.jda.api.entities.Role Role}
     *
     * @return RoleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nullable
    public GuildChannel getChannel(@Nonnull JDA api)
    {
        Checks.notNull(api, ""JDA"");
        return api.getGuildChannelById(channelType, channelId);
    }","/**
     * The {@link GuildChannel} instance for the {@link #getChannelId() channel id}.
     *
     * @param  api
     *         The shard to perform the lookup in
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided JDA instance is null
     *
     * @since  4.0.0
     *
     * @return The GuildChannel instance or null
     */",net.dv8tion.jda.api.exceptions
"@Nullable
    default TextChannel getTextChannelById(long id)
    {
        return (TextChannel) getChannelCache().getElementById(ChannelType.TEXT, id);
    }","/**
     * Gets a {@link TextChannel TextChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link TextChannel TextChannel}.
     *
     * @return Possibly-null {@link TextChannel TextChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public LegacyWebhookExecuteSpec setAllowedMentions(AllowedMentions allowedMentions) {
        this.allowedMentions = Possible.of(allowedMentions.toData());
        return this;
    }","/**
     * Adds an allowed mentions object to the webhook execute spec.
     * @param allowedMentions The allowed mentions to add.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    static ShardCacheView allShards(@Nonnull Collection<ShardCacheView> cacheViews)
    {
        Checks.noneNull(cacheViews, ""Collection"");
        return new ShardCacheViewImpl.UnifiedShardCacheViewImpl(cacheViews::stream);
    }","/**
     * Creates a combined {@link ShardCacheView ShardCacheView}
     * for all provided ShardCacheView implementations.
     *
     * @param  cacheViews
     *         Collection of {@link ShardCacheView ShardCacheView} implementations
     *
     * @return Combined ShardCacheView spanning over all provided implementation instances
     */",net.dv8tion.jda.api.utils.cache
"public RestMessage restMessage(MessageData data) {
        return RestMessage.create(this, Snowflake.of(data.channelId()), Snowflake.of(data.id()));
    }","/**
     * Requests to retrieve the message represented by the supplied {@link MessageData}.
     *
     * @param data The data of the channel.
     * @return A {@link RestMessage} as represented by the supplied data.
     */",discord4j.rest
"@Nonnull
    public static Consumer<Throwable> here(@Nonnull Consumer<? super Throwable> acceptor)
    {
        return new ContextConsumer(new ContextException(), acceptor);
    }","/**
     * Creates a wrapping {@link java.util.function.Consumer Consumer} for
     * the provided target.
     *
     * @param  acceptor
     *         The end-target for the throwable
     *
     * @return Wrapper of the provided consumer that will append a context with the current stack-trace
     */",net.dv8tion.jda.api.exceptions
int getTypeRaw();,"/**
     * The raw interaction type.
     * <br>It is recommended to use {@link #getType()} instead.
     *
     * @return The raw interaction type
     */",net.dv8tion.jda.api.interactions
"public StorageConfig build() {
            return new StorageConfig(this);
        }","/**
         * Builds the {@link StorageConfig}.
         *
         * @return a new {@link StorageConfig}
         */",discord4j.common.store.impl
"@Nonnull
    @Override
    AuditableRestAction<T> setCheck(@Nullable BooleanSupplier checks);","/**
     * {@inheritDoc}
     */",net.dv8tion.jda.api.requests.restaction
"public Mono<WebhookData> getData() {
        return restClient.getWebhookService().getWebhook(id);
    }","/**
     * Retrieve this webhook's data upon subscription.
     *
     * @return a {@link Mono} where, upon successful completion, emits the {@link WebhookData} belonging to this entity.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"@Nullable
    Member getMemberById(String id);","/**
     * Gets a member with the given ID, or null if the member is not found
     * 
     * @param  id
     *         the ID of the member
     *
     * @throws NumberFormatException
     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
     * @throws IllegalStateException
     *         If the widget is not {@link #isAvailable() available}
     *
     * @return possibly-null Member with the given ID. 
     */",net.dv8tion.jda.api.entities
"public List<MessageComponent> getComponents() {
        return data.components().toOptional().orElse(Collections.emptyList()).stream()
                .map(MessageComponent::fromData)
                .collect(Collectors.toList());
    }","/**
     * Gets the components of the submitted modal.
     *
     * @return The components of the submitted modal.
     */",discord4j.core.object.command
Mono<MessageData> createFollowupMessage(MultipartRequest<? extends WebhookExecuteRequest> request);,"/**
     * Create a new followup message using the provided request. This uses a webhook tied to the interaction ID and
     * token.
     *
     * @param request the message request to be sent as followup
     * @return a {@link Mono} where, upon successful completion, emits the sent message. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"public boolean getNewPending()
    {
        return getNewValue();
    }","/**
     * The new pending status
     *
     * @return The new pending status
     */",net.dv8tion.jda.api.events.guild.member.update
Mono<Void> register(UserCreateDTO dto);,"/**
     * This method is used to create the user entity.
     *
     * @param dto -> UserCreateDTO comes in and all its fields must be not null
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.service.user
"public static InteractionHandlerSpec createHandler() {
        return new InteractionHandlerSpec(it -> NOOP_HANDLER_FUNCTION.apply(it), it -> NOOP_HANDLER_FUNCTION.apply(it));
    }","/**
     * Start building a new interaction handling function, in order to combine guild and direct message handling. Finish
     * the mapper function by calling {@link InteractionHandlerSpec#build()}. By default this handler does nothing and
     * methods like {@link InteractionHandlerSpec#guild(Function)} or {@link InteractionHandlerSpec#direct(Function)}
     * need to be called to add behavior.
     *
     * @return a new interaction handler builder
     */",discord4j.rest.interaction
"public LegacyTextChannelEditSpec setParentId(@Nullable Snowflake parentId) {
        requestBuilder.parentId(parentId == null ? Possible.of(Optional.empty()) : Possible.of(Optional.of(parentId.asString())));
        return this;
    }","/**
     * Sets the identifier of the parent category of the modified {@link TextChannel}.
     *
     * @param parentId The parent category identifier.
     * @return This spec.
     */",discord4j.core.spec.legacy
long getChannelIdLong();,"/**
     * The ID of the channel this interaction happened in.
     * <br>This might be 0 if no channel context is provided in future interaction types.
     *
     * @return The channel ID, or 0 if no channel context is provided
     */",net.dv8tion.jda.api.interactions
"@Nonnull
    default EntitlementPaginationAction guild(@Nonnull String guildId)
    {
        Checks.notNull(guildId, ""guildId"");
        Checks.isSnowflake(guildId, ""guildId"");
        return guild(Long.parseUnsignedLong(guildId));
    }","/**
     * Filters {@link Entitlement Entitlement}s by a guild id
     *
     * @param guildId
     *        The guild id to filter by
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided {@code guildId} is {@code null}, empty or is not a valid snowflake
     *
     * @return The current {@link EntitlementPaginationAction EntitlementPaginationAction} for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.pagination
"@Nullable
    public AudioChannelUnion getChannelLeft()
    {
        return (AudioChannelUnion) previous;
    }","/**
     * The {@link AudioChannelUnion} that the {@link Member} is moved from
     *
     * @return The {@link AudioChannelUnion}, or {@code null} if the member was not connected to a channel before
     */",net.dv8tion.jda.api.events.guild.voice
"public Publisher<?> onGuildUpdate(GuildUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild is updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Contract(""_, _, !null -> !null"")
    public static String getString(@Nonnull DataArray root, @Nonnull String path, @Nullable String fallback)
    {
        String string = get(root, path, (obj, key) -> obj.getString(key, fallback), (arr, index) -> arr.getString(index, fallback));
        return string == null ? fallback : string;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The String value at the given path, returning the fallback if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
Flux<MessageData> getMessages();,"/**
     * Retrieves data for all messages present in the store.
     *
     * @return A {@link Flux} emitting the messages, or empty if none is present
     */",discord4j.common.store.api.layout
"Mono<GuildScheduledEventData> onGuildScheduledEventDelete(int shardIndex, GuildScheduledEventDelete dispatch);","/**
     * Updates the internal state of the store according to the {@link GuildScheduledEventDelete} gateway dispatch. This
     * will typically perform a delete operation on a related {@link GuildScheduledEventData} in the store,
     * if present.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the
     * {@link GuildScheduledEventData} in a state before the deletion.
     */",discord4j.common.store.api.layout
boolean traceEnabled = logger.isTraceEnabled();,"/**
     * Log a message depending on the enabled level for a given {@link Logger}. The supplied message factory will be
     * applied with {@code true} if the logger has trace level enabled, given by {@link Logger#isTraceEnabled()}, o
     * {@code false} otherwise.
     *
     * @param logger the logger instance used for logging a message
     * @param messageFactory a {@link Function} that takes {@code true} value if the given logger has trace level
     * enabled, {@code false} otherwise, and produces a message to log.
     */",discord4j.common
"public ReactorResources() {
        this.httpClient = DEFAULT_HTTP_CLIENT.get();
        this.timerTaskScheduler = DEFAULT_TIMER_TASK_SCHEDULER.get();
        this.blockingTaskScheduler = DEFAULT_BLOCKING_TASK_SCHEDULER.get();
    }","/**
     * Create with a default {@link HttpClient} and {@link Scheduler}s for timed and blocking tasks.
     */",discord4j.common
"@Nullable
    public VoiceChannel getNewAfkChannel()
    {
        return getNewValue();
    }","/**
     * The new afk channel
     *
     * @return The new afk channel, or null
     */",net.dv8tion.jda.api.events.guild.update
"public Mono<Void> reply(InteractionApplicationCommandCallbackSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(
                () -> {
                    InteractionApplicationCommandCallbackSpec actualSpec = getClient().getRestClient()
                            .getRestResources()
                            .getAllowedMentions()
                            .filter(allowedMentions -> !spec.isAllowedMentionsPresent())
                            .map(spec::withAllowedMentions)
                            .orElse(spec);

                    return createInteractionResponse(InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE, actualSpec.asRequest());
                });
    }","/**
     * Requests to respond to the interaction with a message.
     * <p>
     * For component interactions, like buttons or select menus, this method will create a <strong>new</strong> message.
     * If you want to modify the message the component is on, see {@link ComponentInteractionEvent#edit()} or
     * {@link ComponentInteractionEvent#deferEdit()}.
     * <p>
     * After calling {@code reply}, you are not allowed to call other acknowledging or reply method and have to
     * either work with the initial reply using {@link #getReply()}, {@link #editReply()}, {@link #deleteReply()}, or
     * using followup messages with {@link #createFollowup()}, {@link #editFollowup(Snowflake)} or
     * {@link #deleteFollowup(Snowflake)}.
     *
     * @param spec an immutable object that specifies how to build the reply message to the interaction
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the interaction response has
     * been sent. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.interaction
"default void onUserSpeakingModeUpdate(@Nonnull User user, @Nonnull EnumSet<SpeakingMode> modes) {}","/**
     * This method is used to listen for users changing their speaking mode.
     * <p>Whenever a user joins a voice channel, this is fired once to define the initial speaking modes.
     *
     * <p>To detect when a user is speaking, a {@link net.dv8tion.jda.api.audio.AudioReceiveHandler AudioReceiveHandler} should be used instead.
     *
     * <p><b>Note:</b> This requires the user to be currently in the cache.
     * You can use {@link net.dv8tion.jda.api.utils.MemberCachePolicy#VOICE MemberCachePolicy.VOICE} to cache currently connected users.
     * Alternatively, use {@link #onUserSpeakingModeUpdate(UserSnowflake, EnumSet)} to avoid cache.
     *
     * @param user
     *        The user who changed their speaking mode
     * @param modes
     *        The new speaking modes of the user
     */",net.dv8tion.jda.api.audio.hooks
"public List<ResponseFunction> getResponseTransformers() {
        return responseTransformers;
    }","/**
     * Returns the list of {@link ResponseFunction} transformations that can be applied to every response. They are
     * to be processed in the given order.
     *
     * @return a list of {@link ResponseFunction} objects.
     */",discord4j.rest.request
"@Nonnull
    public EmbedBuilder setThumbnail(@Nullable String url)
    {
        if (url == null)
        {
            this.thumbnail = null;
        }
        else
        {
            urlCheck(url);
            this.thumbnail = new MessageEmbed.Thumbnail(url, null, 0, 0);
        }
        return this;
    }","/**
     * Sets the Thumbnail of the embed.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/06-setThumbnail.png"">Example</a></b>
     *
     * <p><b>Uploading images with Embeds</b>
     * <br>When uploading an <u>image</u>
     * (using {@link net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#sendFiles(net.dv8tion.jda.api.utils.FileUpload...) MessageChannel.sendFiles(...)})
     * you can reference said image using the specified filename as URI {@code attachment://filename.ext}.
     *
     * <p><u>Example</u>
     * <pre><code>
     * MessageChannel channel; // = reference of a MessageChannel
     * EmbedBuilder embed = new EmbedBuilder();
     * InputStream file = new URL(""https://http.cat/500"").openStream();
     * embed.setThumbnail(""attachment://cat.png"") // we specify this in sendFile as ""cat.png""
     *      .setDescription(""This is a cute cat :3"");
     * channel.sendFiles(FileUpload.fromData(file, ""cat.png"")).setEmbeds(embed.build()).queue();
     * </code></pre>
     *
     * @param  url
     *         the url of the thumbnail of the embed
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the character limit for {@code url}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the provided {@code url} is not a properly formatted http or https url.</li>
     *         </ul>
     *
     * @return the builder after the thumbnail has been set
     */",net.dv8tion.jda.api
public abstract char[] readPassword();,"/**
   * Reads a char array from the terminal input. 
   * If the environment supports echoing, it will be enabled. 
   *
   * @return a char array
   */",io.github.augustoravazoli.termenu.io
"@Nullable
        public String getName()
        {
            return name;
        }","/**
         * The name of the field
         *
         * @return Possibly-null String containing the name of the field.
         */",net.dv8tion.jda.api.entities
void onVoiceServerUpdate(@Nonnull VoiceServerUpdate update);,"/**
     * Handles the <b>VOICE_SERVER_UPDATE</b>.
     *
     * @param update
     *        The {@link VoiceServerUpdate} to handle
     */",net.dv8tion.jda.api.hooks
boolean isMemberOverride();,"/**
     * Used to determine if this PermissionOverride relates to
     * a specific {@link net.dv8tion.jda.api.entities.Member Member}.
     *
     * @return True if this override is a user override.
     */",net.dv8tion.jda.api.entities
"public CloseStatus getCloseStatus() {
        return closeStatus;
    }","/**
     * Return the underlying {@link CloseStatus} that triggered this exception.
     *
     * @return a close status
     */",discord4j.common.close
"@Nonnull
        String getDiscriminator();","/**
         * Gets the discriminator of the member
         * 
         * @return the never-null discriminator of the member
         */",net.dv8tion.jda.api.entities
"@Nonnull
    public Invite getInvite()
    {
        return invite;
    }","/**
     * The invite which was created.
     *
     * @return {@link Invite}
     */",net.dv8tion.jda.api.events.guild.invite
"public static final Route GUILD_EMOJI_MODIFY = Route.patch(""/guilds/{guild.id}/emojis/{emoji.id}"");","/**
     * Modify the given emoji. Returns the updated emoji object on success. Fires a Guild Emojis Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/emoji#modify-guild-emoji"">
     * https://discord.com/developers/docs/resources/emoji#modify-guild-emoji</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    public static SelectOption fromData(@Nonnull DataObject data)
    {
        Checks.notNull(data, ""DataObject"");
        return new SelectOption(
            data.getString(""label""),
            data.getString(""value""),
            data.getString(""description"", null),
            data.getBoolean(""default"", false),
            data.optObject(""emoji"").map(EntityBuilder::createEmoji).orElse(null)
        );
    }","/**
     * Inverse function for {@link #toData()} which parses the serialized option data
     *
     * @param  data
     *         The serialized option data
     *
     * @throws net.dv8tion.jda.api.exceptions.ParsingException
     *         If the data representation is invalid
     * @throws IllegalArgumentException
     *         If some part of the data has an invalid length or null is provided
     *
     * @return The parsed SelectOption instance
     */",net.dv8tion.jda.api.interactions.components.selections
"public LegacyInviteCreateSpec setUnique(boolean unique) {
        requestBuilder.unique(unique);
        return this;
    }","/**
     * Sets whether the created {@link Invite} is unique. If {@code true}, don't try to reuse a similar invite
     * (useful for creating many unique one time use invites).
     *
     * @param unique {@code true} if the created invite is unique, {@code false} otherwise.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    default M putMemberPermissionOverride(long memberId, @Nullable Collection<Permission> allow, @Nullable Collection<Permission> deny)
    {
        long allowRaw = allow == null ? 0 : Permission.getRaw(allow);
        long denyRaw  = deny  == null ? 0 : Permission.getRaw(deny);
        return putMemberPermissionOverride(memberId, allowRaw, denyRaw);
    }","/**
     * Adds an override for the specified member with the provided permission sets as allowed and denied permissions.
     * If the member already had an override on this channel it will be replaced instead.
     *
     * @param  memberId
     *         The ID of the member to set permissions for
     * @param  allow
     *         The permissions to grant, or null
     * @param  deny
     *         The permissions to deny, or null
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         in this channel, or tries to set permissions it does not have without having {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS} explicitly for this channel through an override.
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    #putMemberPermissionOverride(long, long, long)
     * @see    java.util.EnumSet EnumSet
     */",net.dv8tion.jda.api.managers.channel.attribute
"public LegacyGuildCreateSpec setName(String name) {
        builder.name(name);
        return this;
    }","/**
     * Sets the name for the created {@link Guild}.
     *
     * @param name The name of the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Publisher<?> onAutoModRuleDelete(AutoModRuleDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an automod rule has been deleted.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    public static DataArray getArray(@Nonnull DataObject root, @Nonnull String path)
    {
        DataArray array = optArray(root, path);
        if (array == null)
            pathError(path, ""Array"");
        return array;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The {@link DataArray} at the given path
     */",net.dv8tion.jda.api.utils.data
"public StoreChannel(GatewayDiscordClient gateway, ChannelData data) {
        super(gateway, data);
    }","/**
     * Constructs an {@code StoreChannel} with an associated {@link GatewayDiscordClient} and Discord data.
     *
     * @param gateway The {@link GatewayDiscordClient} associated to this object, must be non-null.
     * @param data The raw data as represented by Discord, must be non-null.
     */",discord4j.core.object.entity.channel
"public VoiceStateData getData() {
        return data;
    }","/**
     * Gets the data of the voice state.
     *
     * @return The data of the voice state.
     */",discord4j.core.object
"Mono<Void> onChannelCreate(int shardIndex, ChannelCreate dispatch);","/**
     * Updates the internal state of the store according to the given {@link ChannelCreate} gateway dispatch. This
     * will typically perform an insert operation on the related {@link ChannelData}, and add the ID to the list
     * returned by {@link GuildData#channels()} if applicable.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"public ClientRequest getRequest() {
        return request;
    }","/**
     * Return the {@link ClientRequest} encapsulating a Discord API request.
     *
     * @return the request that caused this exception
     */",discord4j.rest.http.client
B[] createSampleCConstants();,"/**
     * Create an array of {@link Constants#CONST_NUM} {@link threegpp.milenage.MilenageBuffer} objects
     * containing example C-constants values according to 3GPP 35.206 (chapter 4.1).
     * <p>
     *
     * @return  An array of {@link threegpp.milenage.MilenageBuffer} object.
     */",threegpp.milenage
"Mono<Set<StickerData>> onGuildStickersUpdate(int shardIndex, GuildStickersUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link GuildStickersUpdate} gateway dispatch.
     * This will typically perform an update operation on a related collection of {@link StickerData} that is already
     * present in the store, and update the list returned by {@link GuildData#stickers()}.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * set of {@link StickerData} before the update
     */",discord4j.common.store.api.layout
"@Nonnull
    M shuffleOrder();","/**
     * Shuffles the {@link #getCurrentOrder() current order} by using
     * {@link java.util.Collections#shuffle(java.util.List) Collections.shuffle(orderList)}
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    java.util.Collections#shuffle(java.util.List)
     */",net.dv8tion.jda.api.requests.restaction.order
private static final Logger LOG = Logger.getLogger(UserManager.class);,"/*******************************************************************************
 * Copyright (c) 2018 Giulianini Luca Licensed under the Apache License, Version 2.0 (the ""License""); you may not use
 * this file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and limitations under the
 * License.
 *******************************************************************************/",jestures.core.serialization
"public static final Route AUTO_MOD_RULE_MODIFY = Route.patch(""/guilds/{guild.id}/auto-moderation/rules/{auto_moderation_rule.id}"");","/**
     * Modify an existing rule. Returns an auto moderation rule on success. Requires the 'MANAGE_GUILD' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/auto-moderation#modify-auto-moderation-rule"">
     * https://discord.com/developers/docs/resources/auto-moderation#modify-auto-moderation-rule</a>
     */",discord4j.rest.route
GuildChannel channel = union.asGuildChannel();,"/**
     * Casts this union to a {@link MessageChannel}.
     * This method exists for developer discoverability.
     *
     * <p>Note: This is effectively equivalent to using the cast operator:
     * <pre><code>
     * //These are the same!
     * MessageChannel channel = union.asMessageChannel();
     * MessageChannel channel2 = (MessageChannel) union;
     * </code></pre>
     *
     * You can use {@link #getType()}{@link ChannelType#isMessage() .isMessage()} to validate whether you can call this
     * method in addition to normal instanceof checks: <code>channel instanceof MessageChannel</code>
     *
     * @throws IllegalStateException
     *         If the channel represented by this union is not actually a {@link MessageChannel}.
     *
     * @return The channel as a {@link MessageChannel}
     */",net.dv8tion.jda.api.entities.channel.unions
"public static final Route GUILD_CREATE = Route.post(""/guilds"");","/**
     * Create a new guild. Returns a guild object on success. Fires a Guild Create Gateway event.
     * <p>
     * By default this endpoint is limited to 10 active guilds. These limits are raised for whitelisted GameBridge
     * applications.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#create-guild"">
     * https://discord.com/developers/docs/resources/guild#create-guild</a>
     */",discord4j.rest.route
"@SuppressWarnings(""unchecked"")
    public <R> Optional<Function<StoreAction<R>, ? extends Publisher<R>>> findHandlerForAction(StoreAction<R> action) {
        Objects.requireNonNull(action);
        return Optional.ofNullable(mappings.get(action.getClass()))
                .map(handler -> a -> (Publisher<R>) handler.apply(a));
    }","/**
     * Retrieves the handler associated to the given action based on its concrete type.
     *
     * @param action the action to retrieve the handler for
     * @param <R> the return type of the action, to ensure type safety
     * @return the handler for the given action, or {@link Optional#empty()} if not found.
     */",discord4j.common.store.api
"public ReactorResources(HttpClient httpClient, Scheduler timerTaskScheduler, Scheduler blockingTaskScheduler) {
        this.httpClient = httpClient;
        this.timerTaskScheduler = timerTaskScheduler;
        this.blockingTaskScheduler = blockingTaskScheduler;
    }","/**
     * Create with a pre-configured {@link HttpClient} and {@link Scheduler}s for timed and blocking tasks.
     *
     * @param httpClient the underlying {@link HttpClient} to use
     * @param timerTaskScheduler the time-capable {@link Scheduler} to use
     * @param blockingTaskScheduler the {@link Scheduler} to use for potentially blocking tasks
     */",discord4j.common
"@Nonnull
    public EmbedBuilder setImage(@Nullable String url)
    {
        if (url == null)
        {
            this.image = null;
        }
        else
        {
            urlCheck(url);
            this.image = new MessageEmbed.ImageInfo(url, null, 0, 0);
        }
        return this;
    }","/**
     * Sets the Image of the embed.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/11-setImage.png"">Example</a></b>
     *
     * <p><b>Uploading images with Embeds</b>
     * <br>When uploading an <u>image</u>
     * (using {@link net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#sendFiles(net.dv8tion.jda.api.utils.FileUpload...) MessageChannel.sendFiles(...)})
     * you can reference said image using the specified filename as URI {@code attachment://filename.ext}.
     *
     * <p><u>Example</u>
     * <pre><code>
     * MessageChannel channel; // = reference of a MessageChannel
     * EmbedBuilder embed = new EmbedBuilder();
     * InputStream file = new URL(""https://http.cat/500"").openStream();
     * embed.setImage(""attachment://cat.png"") // we specify this in sendFile as ""cat.png""
     *      .setDescription(""This is a cute cat :3"");
     * channel.sendFiles(FileUpload.fromData(file, ""cat.png"")).setEmbeds(embed.build()).queue();
     * </code></pre>
     *
     * @param  url
     *         the url of the image of the embed
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the character limit for {@code url}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the provided {@code url} is not a properly formatted http or https url.</li>
     *         </ul>
     *
     * @return the builder after the image has been set
     *
     * @see    net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#sendFiles(net.dv8tion.jda.api.utils.FileUpload...) MessageChannel.sendFiles(...)
     */",net.dv8tion.jda.api
"public static CountInGuildAction countMembersInGuild(long guildId) {
        return new CountInGuildAction(InGuildEntity.MEMBERS, guildId);
    }","/**
     * Creates an action to count the number of members present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link CountInGuildAction}
     */",discord4j.common.store.action.read
"This method could not be tested due to the lack of a Discord verified application
    public CreateTestEntitlementMono createTestEntitlementForUser(Snowflake skuId, Snowflake userId) {
        return CreateTestEntitlementMono.of(skuId, userId, Entitlement.OwnerType.USER, this, discordClient);
    }","/**
     * Create a test entitlement for the given {@link SKU} and user ID.
     *
     * @param skuId  The ID of the SKU.
     * @param userId The ID of the user.
     * @return A {@link CreateTestEntitlementMono} that emits the created {@link Entitlement} upon successful
     * completion. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core
"@Nonnull
    @CheckReturnValue
    WebhookMessageCreateAction<T> setUsername(@Nullable String name);","/**
     * Set the apparent username for the message author.
     * <br>This changes the username that is shown for the message author.
     *
     * <p>This cannot be used with {@link net.dv8tion.jda.api.interactions.InteractionHook InteractionHooks}!
     *
     * @param  name
     *         The username to use, or null to use the default
     *
     * @throws IllegalStateException
     *         If this is an interaction webhook
     *
     * @return The same message action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public Optional<TextChannel> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the {@link TextChannel} that was updated in this event, if present.
     * This may not be available if {@code TextChannels} are not stored.
     *
     * @return The old version of the updated {@link TextChannel}, if present.
     */",discord4j.core.event.domain.channel
"public DiscordWebRequest header(String key, String value) {
        initHeaders().computeIfAbsent(key.toLowerCase(), k -> new LinkedHashSet<>()).add(value);
        return this;
    }","/**
     * Adds the given key and value to the headers of this request.
     *
     * @param key the header key
     * @param value the header value
     * @return this request
     */",discord4j.rest.request
"public LegacyTextChannelEditSpec setRateLimitPerUser(int rateLimitPerUser) {
        requestBuilder.rateLimitPerUser(rateLimitPerUser);
        return this;
    }","/**
     * Sets the amount of seconds a user has to wait before sending another message to the modified
     * {@link TextChannel}, from 0 to 21600 seconds. Does not affect bots or users with {@link Permission#MANAGE_MESSAGES} or
     * {@link Permission#MANAGE_CHANNELS} permissions.
     *
     * @param rateLimitPerUser The channel user rate limit, in seconds.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static final Route GUILD_STICKERS_GET = Route.get(""/guilds/{guild.id}/stickers"");","/**
     * Returns an array of sticker objects for the given guild. Includes user fields if the bot has the MANAGE_EMOJIS_AND_STICKERS permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/sticker#list-guild-stickers"">
     * https://discord.com/developers/docs/resources/sticker#list-guild-stickers</a>
     */",discord4j.rest.route
"new AudioFormat(48000.0f, 16, 2, true, true);","/**
     * Audio Output Format used by JDA. 48KHz 16bit stereo signed BigEndian PCM.
     */",net.dv8tion.jda.api.audio
T getRawBuffer();,"/**
     * @return  Internal buffer object (probably its copy)
     */",threegpp.milenage
int getMinTimeSeparation();,"/**
     * Get the minimum time separation between two gestures.
     * <p>
     * If the time is too short a long gesture can be recognized multiple time according to update rate value
     *
     * @return the time separation in milliseconds, a value usually between 0 and 1000.
     */",jestures.core.recognition.gesturedata
"@Nonnull
    @Override
    default Type getType()
    {
        return Type.CUSTOM;
    }",/** Template for {@link #getImageUrl()} */,net.dv8tion.jda.api.entities.emoji
"@Nullable
    String getUrl();","/**
     * The target URL for this button, if it is a {@link ButtonStyle#LINK LINK}-Style Button.
     *
     * @return The target URL or null
     */",net.dv8tion.jda.api.interactions.components.buttons
"public Set<Snowflake> getMessageIds() {
        return messageIds.stream()
                .map(Snowflake::of)
                .collect(Collectors.toSet());
    }","/**
     * Gets a list of {@link Snowflake} IDs of the messages that were deleted.
     *
     * @return a list of IDs of the messages that were deleted.
     */",discord4j.core.event.domain.message
Flux<CityGetDTO> list();,"/**
     * This method is used to get list the CityGetDTO.
     *
     * @return Flux<CityGetDTO>
     * @since 1.0
     */",org.khasanof.citiesapi.service.city
Flux<EmojiData> getEmojisInGuild(long guildId);,"/**
     * Retrieves data for all emojis present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Flux} emitting the emojis, or empty if none is present
     */",discord4j.common.store.api.layout
void publish(Event event);,"/**
     * Publishes an {@link Event} to the dispatcher. Might throw an unchecked exception if the dispatcher can't
     * handle this event.
     *
     * @param event the {@link Event} to publish
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    default MessageEditCallbackAction editMessageEmbeds(@Nonnull Collection<? extends MessageEmbed> embeds)
    {
        Checks.noneNull(embeds, ""MessageEmbed"");
        return deferEdit().setEmbeds(embeds);
    }","/**
     * Acknowledgement of this interaction with a message update.
     * <br>You can use {@link #getHook()} to edit the message further.
     *
     * <p><b>You can only use deferEdit() or editMessage() once per interaction!</b> Use {@link #getHook()} for any additional updates.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     *
     * @param  embeds
     *         The new {@link MessageEmbed MessageEmbeds}
     *
     * @throws IllegalArgumentException
     *         If null or more than {@value Message#MAX_EMBED_COUNT} embeds are provided
     *
     * @return {@link MessageEditCallbackAction} that can be used to further update the message
     */",net.dv8tion.jda.api.interactions.callbacks
"var token = Map.of(""access_token"", jwt);","/**
     * This method is used to get a token for registered users through the register method.
     *
     * @param mono -> UserRequestDTO comes from the corresponding request body
     * @return Mono<Object>
     * @since 1.0
     */",org.khasanof.citiesapi.controller.user
"public void setRight(final R right) {
        this.right = right;
    }","/**
     * Sets the right element of the pair.
     *
     * @param right  the new value of the right element, may be null
     */",net.dv8tion.jda.internal.utils.tuple
"@Nonnull
    @CheckReturnValue
    default AutoModRuleManager setResponses(@Nonnull AutoModResponse... responses)
    {
        Checks.noneNull(responses, ""Responses"");
        return setResponses(Arrays.asList(responses));
    }","/**
     * Sets what the rule should do upon triggering.
     *
     * <p>Note that each response type can only be used once.
     * If multiple responses of the same type are provided, the last one is used.
     *
     * @param  responses
     *         The responses to configure
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} or {@link AutoModResponse.Type#UNKNOWN} is provided</li>
     *             <li>If the collection is empty</li>
     *         </ul>
     *
     * @return AutoModRuleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static Color of(final float red, final float green, final float blue) {
        return of((int) (red * 255.0F + 0.5F), (int) (green * 255.0F + 0.5F), (int) (blue * 255.0F + 0.5F));
    }","/**
     * Initializes a new instance of {@link Color} using the specified red, green, and blue values, which must be given
     * as floats in the range of 0.0F-1.0F.
     *
     * @param red The red component of the RGB value.
     * @param green The green component of the RGB value.
     * @param blue The blue component of the RGB value.
     */",discord4j.rest.util
"@Nonnull
    @CheckReturnValue
    RoleManager setColor(int rgb);","/**
     * Sets the rgb color of the selected {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * @param  rgb
     *         The new color for the selected {@link net.dv8tion.jda.api.entities.Role Role}
     *
     * @return RoleManager for chaining convenience
     *
     * @see    Role#DEFAULT_COLOR_RAW Role.DEFAULT_COLOR_RAW
     */",net.dv8tion.jda.api.managers
"public VoiceReactorResources build() {
            return new VoiceReactorResources(this);
        }","/**
         * Creates a new instance of {@link VoiceReactorResources}.
         *
         * @return a new instance of {@link VoiceReactorResources}
         */",discord4j.voice
void saveSettings() throws IOException;,"/**
     * Save the recognition settings.
     *
     * @throws IOException
     *             the {@link IOException}
     */",jestures.core.recognition
GatewayDiscordClient gateway = context.getGateway();,"/**
     * Process a {@link Dispatch} object wrapped with its context to potentially obtain an {@link Event}.
     *
     * @param context the DispatchContext used with this Dispatch object
     * @param <D> the Dispatch type
     * @param <S> the old state type, if applicable
     * @param <E> the resulting Event type
     * @return an Event mapped from the given Dispatch object, or null if no Event is produced.
     */",discord4j.core.event.dispatch
"@Nonnull
    Mentions getMentions();","/**
     * The resolved {@link Mentions} for this selection.
     * <br>This supports {@link Mentions#getRoles() roles}, {@link Mentions#getUsers() users}, and {@link Mentions#getChannels() channels}.
     *
     * @return The mentions
     */",net.dv8tion.jda.api.interactions.components.selections
"public LegacyGuildEmojiCreateSpec addRole(Snowflake roleId) {
        roles.add(roleId);
        return this;
    }","/**
     * Adds a role for which the created {@link GuildEmoji} will be whitelisted.
     *
     * @param roleId The role identifier.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nullable
    public Color getOldColor()
    {
        return previous != Role.DEFAULT_COLOR_RAW ? new Color(previous) : null;
    }","/**
     * The old color
     *
     * @return The old color, or null
     */",net.dv8tion.jda.api.events.role.update
"@Nonnull
    @CheckReturnValue
    ChannelAction<T> removePermissionOverride(long id);","/**
     * Removes any existing override with the provided id.
     * <br>If no override with the provided id exists, this method does nothing.
     *
     * @param  id
     *         The member or role id of the override
     *
     * @return The current ChannelAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"default Mono<Integer> getMaxConcurrency(RestClient restClient) {
        return Mono.just(getMaxConcurrency());
    }","/**
     * Return the number of shards that can be identified concurrently. Must be 1 unless your application is authorized
     * to use the large bot sharding system.
     *
     * @param restClient a handle to consume REST API resources, typically to retrieve the recommended concurrency
     * @return a value determining the sharding factor this strategy has
     * @see <a href=""https://discord.com/developers/docs/topics/gateway#sharding-for-very-large-bots"">
     * Sharding for very large bots</a>
     */",discord4j.core.shard
"@Nullable
    public AuditLogChange getChangeByKey(@Nullable final String key)
    {
        return changes.get(key);
    }","/**
     * Shortcut to <code>{@link #getChanges() getChanges()}.get(key)</code> lookup!
     * <br>This lookup is case-insensitive!
     *
     * @param  key
     *         The key to look for
     *
     * @return Possibly-null value corresponding to the specified key
     */",net.dv8tion.jda.api.audit
"public Optional<Boolean> getOptionAsBoolean(final String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asBoolean);
    }","/**
     * Gets the value of the option corresponding to the provided name, if present, as a boolean.
     *
     * @param name The name of the option.
     * @return An {@link Optional} containing the value of the option corresponding to the provided name, if present, or empty otherwise.
     * @throws IllegalArgumentException If the option is present but its value cannot be converted to a boolean.
     */",discord4j.core.event.domain.interaction
"public static MessageReactionAddAction messageReactionAdd(int shardIndex, MessageReactionAdd dispatch) {
        return new MessageReactionAddAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link MessageReactionAdd} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link MessageReactionAddAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    @CheckReturnValue
    @SuppressWarnings(""unchecked"")
    public <U> Result<U> flatMap(@Nonnull Function<? super T, ? extends Result<U>> function)
    {
        Checks.notNull(function, ""Function"");
        try
        {
            if (isSuccess())
                return function.apply(value);
        }
        catch (Exception ex)
        {
            return Result.failure(ex);
        }
        return (Result<U>) this;
    }","/**
     * Composite function to convert a result value to another result.
     * <br>This will only apply the function is {@link #isSuccess()} is true.
     *
     * @param  function
     *         The conversion function
     * @param  <U>
     *         The result type
     *
     * @throws IllegalArgumentException
     *         If the provided function is null
     *
     * @return The mapped result
     */",net.dv8tion.jda.api.utils
"@Nonnull
    @CheckReturnValue
    CommandEditAction setNSFW(boolean nsfw);","/**
     * Sets whether this command should only be usable in NSFW (age-restricted) channels.
     * <br>Default: false
     *
     * <p>Note: Age-restricted commands will not show up in direct messages by default unless the user enables them in their settings.
     *
     * @param  nsfw
     *         True, to make this command nsfw
     *
     * @return The CommandEditAction instance, for chaining
     *
     * @see <a href=""https://support.discord.com/hc/en-us/articles/10123937946007"" target=""_blank"">Age-Restricted Commands FAQ</a>
     */",net.dv8tion.jda.api.requests.restaction
FollowupInteractionHandler acknowledgeEphemeral();,"/**
     * Build an interaction handler that will acknowledge this request, displaying a loading state only for the
     * invoking user.
     *
     * @return a followup handler to continue processing this interaction asynchronously, until the interaction token
     * bound to this interaction expires after 15 minutes.
     */",discord4j.rest.interaction
"Mono<Void> publishDisconnected(ShardInfo shardInfo, @Nullable SessionInfo sessionInfo);","/**
     * Notifies this coordinator that a given shard has disconnected.
     *
     * @param shardInfo the disconnected shard details
     * @param sessionInfo the disconnected shard session details to resume, or {@code null} if resume is not
     * available
     * @return a {@link Mono} indicating when this operation has completed
     */",discord4j.core.shard
"instance = System.console() != null
        ? new NativeTerminal(System.console())
        : new EmbeddedTerminal(System.in, System.out);","/**
   * Gets the available terminal instance of the current environment.
   *
   * @return the terminal
   */",io.github.augustoravazoli.termenu.io
"public UserService getUserService() {
        return userService;
    }","/**
     * Access a low-level representation of the API endpoints for the User resource. It is recommended you use
     * methods like {@link #getUserById(Snowflake)}, {@link #restUser(UserData)} or
     * {@link RestUser#create(RestClient, Snowflake)}.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
InteractionMember getInteractionMember();,"/**
     * Return this interaction member.
     *
     * @return an object with methods to operate on this interaction member
     */",discord4j.rest.interaction
"default int getMaxPerRow()
    {
        return getType().getMaxPerRow();
    }","/**
     * How many of these components can be added to one {@link ActionRow}.
     *
     * @return The maximum amount an action row can contain
     */",net.dv8tion.jda.api.interactions.components
"@Nonnull
    @Override
    default String getAsMention()
    {
        return ""</"" + getFullCommandName() + "":"" + getIdLong() + "">"";
    }","/**
     * {@inheritDoc}
     *
     * <p><b>This will only work on slash commands!</b>
     *
     * @throws IllegalStateException
     *         If the command is not a slash command (i.e. not of type {@link Command.Type#SLASH})
     */",net.dv8tion.jda.api.interactions.commands
"default boolean canInteract(User issuer, MessageChannel channel)
    {
        return PermissionUtil.canInteract(issuer, this, channel);
    }","/**
     * Whether the specified User can interact with this emoji within the provided MessageChannel
     * <br>Same logic as {@link #canInteract(User, net.dv8tion.jda.api.entities.channel.middleman.MessageChannel, boolean) canInteract(issuer, channel, true)}!
     *
     * @param  issuer
     *         The User to test
     * @param  channel
     *         The MessageChannel to test
     *
     * @return True, if the provided Member can use this emoji
     */",net.dv8tion.jda.api.entities.emoji
"if (c instanceof VoiceChannel) {
                    return 1;
                }","/**
     * The ordering of {@link GuildChannel guild channels} which considers channel type.
     * <p>
     * Guild channels are first ordered by ""bucket"" which is determined by the type of the channels. Then,
     * {@link #CHANNEL_ORDER} is used to determine order within a buvket. Effectively, this only means that voice
     * channels always appear below other types of channels.
     * <p>
     * Note that this order is only applicable to channels if they are in the same category.
     */",discord4j.core.util
"public ObjectMapper getObjectMapper() {
        return objectMapper;
    }","/**
     * Get the {@link ObjectMapper} configured by this provider.
     *
     * @return a Jackson ObjectMapper used to map POJOs to and from JSON format
     */",discord4j.common
"A Codifier take absolute vector (vector2D or vector3D) and transforms them in a relative way.
 * <p>
 * This can be done in a derivative way or using other type of codification, for example a starting point codification
 * where every vector is subtracted by the first vector of the list.
 */
public interface Codifier {

    /**
     * Get the {@link Codification}.
     *
     * @return the {@link Codification} type
     */
    Codification getCodificationType();

    /**
     * Codify the body joint according to class specification. This performs discretization on skeleton stream.
     * <p>
     * Codification can be derivative or on starting point.
     *
     * @param newVector
     *            the primary {@link Vector2D} joint according to sensor settings
     *
     */
    void codifyOnSkeletonChange(Vector2D newVector);

    /**
     * Get the feature vector.
     *
     * @return the {@link Queue} feature vector
     */
    Queue<Vector2D> extractFeatureVector();

    /**
     * Attache the {@link TrackerImpl} for feedback notification.
     *
     * @param recognizer
     *            the {@link TrackerImpl}
     */
    void attacheTracker(TrackingObserver recognizer);

    /**
     * Reset the frame for starting a new gesture.
     */
    void resetFrame();

    /**
     * Set the frame length or FPS.
     *
     * @param length
     *            the {@link GestureLength}.
     */
    void setFrameLength(GestureLength length);
}","/*******************************************************************************
 * Copyright (c) 2018 Giulianini Luca
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/",jestures.core.codification
"@Nonnull
    SnowflakeCacheView<ThreadChannel> getThreadChannelCache();","/**
     * {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView} of {@link ThreadChannel}.
     *
     * <p>These threads can also represent posts in {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView}
     */",net.dv8tion.jda.api.entities.channel.attribute
"public String asString() {
        return Long.toUnsignedString(id);
    }","/**
     * Gets the <i>unsigned</i> ID of this {@code Snowflake} as an object String.
     *
     * @return The <i>unsigned</i> ID of this {@code Snowflake} as an object String.
     */",discord4j.common.util
"public Publisher<?> onVoiceChannelUpdate(VoiceChannelUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild voice channel is updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"boolean validateSignature(String signature, String timestamp, String body);","/**
     * See https://discord.com/developers/docs/interactions/slash-commands#security-and-authorization
     *
     * @param signature the signature header of the request
     * @param timestamp the timestamp header of the request
     * @param body      the body of the request
     * @return {@code true} if the request is valid, {@code false} otherwise
     */",discord4j.rest.interaction
"@Override
    public int getMatchNumber() {
        return this.matchNumber;
    }","/**
     * Get the minimum number of gesture that have to match the template to get a gesture recognized.
     *
     * @return the number of templates.
     */",jestures.core.recognition.gesturedata
Mono<MessageData> editInitialResponse(MultipartRequest<WebhookMessageEditRequest> request);,"/**
     * Return a {@link Mono} that upon subscription, will modify the initial response sent when accepting this
     * interaction with the given raw request content.
     *
     * @param request the raw request to be sent as new initial response content
     * @return a {@link Mono} where, upon successful completion, emits the updated message. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"@Nonnull
    Set<String> getTags();","/**
     * Set of tags of the sticker. Tags can be used instead of the name of the sticker as aliases.
     *
     * @return Possibly-empty unmodifiable Set of tags of the sticker
     */",net.dv8tion.jda.api.entities.sticker
"public Publisher<?> onUnknownChannelDelete(UnknownChannelDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild channel is deleted, but its {@link discord4j.core.object.entity.channel.Channel.Type type}
     * is not supported or implemented.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Snowflake getRoleId() {
        return Snowflake.of(roleId);
    }","/**
     * Gets the {@link Snowflake} ID of the {@link Role} that was deleted in this event.
     *
     * @return The ID of the deleted {@link Role}.
     *
     */",discord4j.core.event.domain.role
boolean isRequired();,"/**
     * Whether this TextInput is required to be non-empty
     *
     * @return True if this TextInput is required to be used.
     */",net.dv8tion.jda.api.interactions.components.text
"@Nonnull
    public RestConfig setRateLimiterFactory(@Nonnull Function<? super RestRateLimiter.RateLimitConfig, ? extends RestRateLimiter> rateLimiter)
    {
        Checks.notNull(rateLimiter, ""RateLimiter"");
        this.rateLimiter = rateLimiter;
        return this;
    }","/**
     * Provide a custom implementation of {@link RestRateLimiter}.
     * <br>By default, this will use the {@link SequentialRestRateLimiter}.
     *
     * @param  rateLimiter
     *         The new implementation
     *
     * @throws IllegalArgumentException
     *         If the provided rate-limiter is null
     *
     * @return The current RestConfig for chaining convenience
     */",net.dv8tion.jda.api.requests
"public DiscordWebRequest optionalHeader(String key, @Nullable String value) {
        return (value == null) ? this : header(key, value);
    }","/**
     * Adds the given key and value to the headers of this request
     * if and only if {@code value} is not {@code null}.
     *
     * @param key the header key
     * @param value the header value
     * @return this request
     */",discord4j.rest.request
"@Nonnull
    IAudioSendSystem createSendSystem(@Nonnull IPacketProvider packetProvider);","/**
     * Called by JDA's audio system when a new {@link net.dv8tion.jda.api.audio.factory.IAudioSendSystem IAudioSendSystem}
     * instance is needed to handle the sending of UDP audio packets to discord.
     *
     * @param  packetProvider
     *         The connection provided to the new {@link net.dv8tion.jda.api.audio.factory.IAudioSendSystem IAudioSendSystem}
     *         object for proper setup and usage.
     *
     * @return The newly constructed IAudioSendSystem, ready for {@link IAudioSendSystem#start()} to be called.
     */",net.dv8tion.jda.api.audio.factory
"@Nonnull
        public Builder setValue(@Nullable String value)
        {
            if (value != null)
            {
                Checks.notLonger(value, MAX_VALUE_LENGTH, ""Value"");
                Checks.notBlank(value, ""Value"");
            }

            this.value = value;
            return this;
        }","/**
         * Sets a pre-populated text for this TextInput field.
         * <br>If this is not null, sending a Modal with this component will pre-populate the TextInput field with the specified String.
         *
         * @param  value 
         *         Pre-Populated text
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.components.text
boolean canTalk(@Nonnull Member member);,"/**
     * Whether the specified {@link net.dv8tion.jda.api.entities.Member}
     * can send messages in this channel.
     * <br>Checks for both {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} and
     * {@link net.dv8tion.jda.api.Permission#MESSAGE_SEND Permission.MESSAGE_SEND}.
     *
     * @param  member
     *         The Member to check
     *
     * @return True, if the specified member is able to read and send messages in this channel
     */",net.dv8tion.jda.api.entities.channel.middleman
"public Mono<User> getUser() {
        return Mono.justOrEmpty(getMemberId()).flatMap(gateway::getUserById);
    }","/**
     * Requests to retrieve the user this overwrite is associated to, if present.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link User} this overwrite is associated to,
     * if present. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"public Builder mutate(ShardInfo shardInfo) {
        return new Builder(shardInfo)
                .initialStatus(initialStatus)
                .intents(intents)
                .largeThreshold(largeThreshold)
                .resumeSession(resumeSession);
    }","/**
     * Derive a {@link Builder} from this object, targeting a different {@link ShardInfo} but reusing all other
     * properties.
     *
     * @param shardInfo the shard information for authentication to be used in the builder
     * @return a {@link Builder} for further configuration
     */",discord4j.gateway
"@Nonnull
    @CheckReturnValue
    ThreadChannelManager setAppliedTags(@Nonnull Collection<? extends ForumTagSnowflake> tags);","/**
     * Sets the applied {@link net.dv8tion.jda.api.entities.channel.forums.ForumTag ForumTags} for this forum post thread.
     * <br>This is only applicable to public threads inside forum channels. The tags must be from the forum channel.
     * You can get the list of available tags with {@link ForumChannel#getAvailableTags()}.
     *
     * @param  tags
     *         The new tags for the thread
     *
     * @throws IllegalStateException
     *         If the thread is not a forum post
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If null is provided</li>
     *             <li>If more than {@value ForumChannel#MAX_POST_TAGS} tags are provided</li>
     *             <li>If at least one tag is {@link ForumChannel#isTagRequired() required} and none were provided</li>
     *         </ul>
     *
     * @return this ThreadChannelManager for chaining convenience.
     */",net.dv8tion.jda.api.managers.channel.concrete
"@Nonnull
    @CheckReturnValue
    GuildManager setBoostProgressBarEnabled(boolean boostProgressBarEnabled);","/**
     * Sets whether this {@link net.dv8tion.jda.api.entities.Guild Guild} should have its boost progress bar shown.
     *
     * @param  boostProgressBarEnabled
     *         Whether the boost progress bar should be shown
     *         for this {@link net.dv8tion.jda.api.entities.Guild Guild}
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
void setSendingHandler(@Nullable AudioSendHandler handler);,"/**
     * Sets the {@link net.dv8tion.jda.api.audio.AudioSendHandler}
     * that the manager will use to provide audio data to an audio connection.
     * <br>The handler provided here will persist between audio connection connect and disconnects.
     * Furthermore, you don't need to have an audio connection to set a handler.
     * When JDA sets up a new audio connection it will use the handler provided here.
     * <br>Setting this to null will remove the audio handler.
     *
     * <p>JDA recommends <a href=""https://github.com/sedmelluq/lavaplayer"" target=""_blank"">LavaPlayer</a>
     * as an {@link net.dv8tion.jda.api.audio.AudioSendHandler AudioSendHandler}.
     * It provides a <a href=""https://github.com/sedmelluq/lavaplayer/tree/master/demo-jda"" target=""_blank"">demo</a> targeted at JDA users.
     *
     * @param handler
     *        The {@link net.dv8tion.jda.api.audio.AudioSendHandler AudioSendHandler} used to provide audio data.
     */",net.dv8tion.jda.api.managers
"@Nullable
    public IPermissionHolder getPermissionHolder()
    {
        return isMemberOverride() ? override.getMember() : override.getRole();
    }","/**
     * The {@link IPermissionHolder} for the override.
     * <br>This can be a {@link Member} or {@link Role}. If the role or member are not cached then this will be null.
     *
     * @return Possibly-null permission holder
     */",net.dv8tion.jda.api.events.guild.override
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction addChoiceDoubles(@Nonnull Collection<Double> choices)
    {
        return addChoices(choices.stream()
                .map(it -> new Command.Choice(String.valueOf(it), it))
                .collect(Collectors.toList()));
    }","/**
     * Add up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * <p>The string values of the provided doubles will be used as value and name for the {@link net.dv8tion.jda.api.interactions.commands.Command.Choice Choices}.
     *
     * @param  choices
     *         The choice suggestions to present to the user
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the numeric value of any of the choices is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return The same callback action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.interactions
"public static final Route GUILD_MEMBER_ROLE_ADD = Route.put(""/guilds/{guild.id}/members/{user.id}/roles/{role.id}"");","/**
     * Adds a role to a guild member. Requires the 'MANAGE_ROLES' permission. Returns a 204 empty response on success.
     * Fires a Guild Member Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#add-guild-member-role"">
     * https://discord.com/developers/docs/resources/guild#add-guild-member-role</a>
     */",discord4j.rest.route
"public LegacyWebhookEditSpec setName(String name) {
        this.name = Possible.of(name);
        return this;
    }","/**
     * Sets the name of the modified {@link Webhook}.
     *
     * @param name The webhook name.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    default RoleAction setPermissions(@Nullable Collection<Permission> permissions)
    {
        if (permissions != null)
            Checks.noneNull(permissions, ""Permissions"");

        return setPermissions(permissions == null ? null : Permission.getRaw(permissions));
    }","/**
     * Sets the Permissions the new Role should have.
     * This will only allow permissions that the current account already holds unless
     * the account is owner or {@link net.dv8tion.jda.api.Permission#ADMINISTRATOR admin} of the parent {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  permissions
     *         A {@link java.util.Collection Collection} of {@link net.dv8tion.jda.api.Permission Permissions} for the new role
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not hold one of the specified permissions
     * @throws IllegalArgumentException
     *         If any of the provided permissions is {@code null}
     *
     * @return The current RoleAction, for chaining convenience
     *
     * @see    net.dv8tion.jda.api.Permission#getRaw(java.util.Collection) Permission.getRaw(Collection)
     * @see    java.util.EnumSet EnumSet
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    public static String quoteBlock(@Nonnull String input)
    {
        return "">>> "" + input;
    }","/**
     * Applies quote block formatting to the entire string.
     * <br>The resulting string will be {@code "">>> "" + input}.
     *
     * @param  input
     *         The input to quote block
     *
     * @return The resulting output
     */",net.dv8tion.jda.api.utils
"public InteractionApplicationCommandCallbackReplyMono reply() {
        return InteractionApplicationCommandCallbackReplyMono.of(this);
    }","/**
     * Requests to respond to the interaction with a message. Properties specifying how to build the reply message to
     * the interaction can be set via the {@code withXxx} methods of the returned {@link
     * InteractionApplicationCommandCallbackReplyMono}.
     * <p>
     * For component interactions, like buttons or select menus, this method will create a <strong>new</strong> message.
     * If you want to modify the message the component is on, see {@link ComponentInteractionEvent#edit()} or
     * {@link ComponentInteractionEvent#deferEdit()}.
     * <p>
     * After calling {@code reply}, you are not allowed to call other acknowledging or reply method and have to
     * either work with the initial reply using {@link #getReply()}, {@link #editReply()}, {@link #deleteReply()}, or
     * using followup messages with {@link #createFollowup()}, {@link #editFollowup(Snowflake)} or
     * {@link #deleteFollowup(Snowflake)}.
     *
     * @return A {@link InteractionApplicationCommandCallbackReplyMono} where, upon successful completion, emits nothing;
     * indicating the interaction response has been sent. If an error is received, it is emitted through the {@code
     * InteractionApplicationCommandCallbackMono}.
     */",discord4j.core.event.domain.interaction
boolean isStream();,"/**
     * Returns true if this {@link net.dv8tion.jda.api.entities.Member Member} is currently streaming with Go Live.
     *
     * @return True, if this member is streaming
     */",net.dv8tion.jda.api.entities
"public static final Route MESSAGE_DELETE_BULK = Route.post(""/channels/{channel.id}/messages/bulk-delete"");","/**
     * Delete multiple messages in a single request. This endpoint can only be used on guild channels and requires the
     * 'MANAGE_MESSAGES' permission. Returns a 204 empty response on success. Fires multiple Message Delete Gateway
     * events.
     * <p>
     * The gateway will ignore any individual messages that do not exist or do not belong to this channel, but these
     * will count towards the minimum and maximum message count. Duplicate snowflakes will only be counted once for
     * these limits.
     * <p>
     * This endpoint will not delete messages older than 2 weeks, and will fail if any message provided is older than
     * that. An endpoint will be added in the future to prune messages older than 2 weeks from a channel.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#bulk-delete-messages"">
     * https://discord.com/developers/docs/resources/channel#bulk-delete-messages</a>
     */",discord4j.rest.route
"@Nonnull
    List<Object> getRegisteredListeners();","/**
     * The currently registered listeners
     *
     * @throws java.lang.UnsupportedOperationException
     *         If the implementation does not support this method
     *
     * @return A list of listeners that have already been registered
     */",net.dv8tion.jda.api.hooks
"@Nonnull
    public RichCustomEmoji getEmoji()
    {
        return emoji;
    }","/**
     * The affected {@link RichCustomEmoji} for this event
     *
     * @return The emoji
     */",net.dv8tion.jda.api.events.emoji
"@Override
	public Assignment save(final Assignment assignment) {
		return this.rep.save(assignment);
	}","/**
	 * @param assignment
	 * @return the saved assignment
	 */",com.pfa.app.service.impl
"@Nonnull
    @Unmodifiable
    List<Member> getMembers();","/**
     * A List of all {@link net.dv8tion.jda.api.entities.Member Members} that are in this GuildChannel
     * <br>For {@link TextChannel TextChannels},
     * this returns all Members with the {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} Permission.
     * <br>For {@link VoiceChannel VoiceChannels},
     * this returns all Members that joined that VoiceChannel.
     * <br>For {@link Category Categories},
     * this returns all Members who are in its child channels.
     *
     * @return An immutable List of {@link net.dv8tion.jda.api.entities.Member Members} that are in this GuildChannel.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    ButtonStyle getStyle();","/**
     * The style of this button.
     *
     * @return {@link ButtonStyle}
     */",net.dv8tion.jda.api.interactions.components.buttons
"@Nonnull
    public static String getString(@Nonnull DataObject root, @Nonnull String path)
    {
        String string = get(root, path, DataObject::getString, DataArray::getString);
        if (string == null)
            pathError(path, ""String"");
        return string;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The String value at the given path
     */",net.dv8tion.jda.api.utils.data
"@Override
	public List<ChartData> getProjectStatus() {
		return this.rep.getProjectStatus();
	}","/**
	 * get project status for pie chart
	 * @return list of ChartData
	 */",com.pfa.app.service.impl
"public Mono<WebhookData> modify(WebhookModifyRequest request, @Nullable String reason) {
        return restClient.getWebhookService().modifyWebhook(id, request, reason);
    }","/**
     * Modify a webhook. Requires the {@link Permission#MANAGE_WEBHOOKS} permission. Returns the updated webhook
     * object on success.
     *
     * @param request a request to modify the webhook
     * @param reason an optional reason for the audit log
     * @return a {@link Mono} where, upon subscription, emits the updated {@link WebhookData} on success. If an error
     * is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"Mono<Void> onGuildScheduledEventUserRemove(int shardIndex, GuildScheduledEventUserRemove dispatch);","/**
     * Updates the internal state of the store according to the {@link GuildScheduledEventUserRemove} gateway dispatch.
     * This will typically perform a delete operation on a related {@link java.util.List} handling a relationship
     * between a {@link GuildScheduledEventData} and the provided {@link GuildScheduledEventUserData}.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"default Flux<VoiceServerOptions> onVoiceServerUpdates(Snowflake guildId) {
        return onVoiceServerUpdate(guildId).repeat();
    }","/**
     * Return a Flux sequence containing {@link VoiceServerOptions} instances indicating a voice server update payload
     * was received from the gateway connection for the given guild.
     *
     * @param guildId the guild ID listening for voice server updates
     * @return a Flux with a VoiceServerOptions payload
     */",discord4j.voice
"@Nonnull
    SnowflakeCacheView<Category> getCategoryCache();","/**
     * Sorted {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView} of {@link Category}.
     * <br>In {@link Guild} cache, channels are sorted according to their position and id.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return {@link net.dv8tion.jda.api.utils.cache.SortedSnowflakeCacheView SortedSnowflakeCacheView}
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
        public GlobalRateLimit getGlobalRateLimit()
        {
            return globalRateLimit;
        }","/**
         * The global rate-limit store.
         *
         * @return The global rate-limit store
         */",net.dv8tion.jda.api.requests
"public InteractionReplyEditMono editReply(String content) {
        return editReply().withContentOrNull(content);
    }","/**
     * Edits the initial reply sent when accepting this interaction with the given message content.
     * <p>
     * For component interactions, like buttons or select menus, this method modifies the message depending on the
     * initial response method chosen: if {@link #deferReply()} or {@link #reply()} was used, the <strong>new</strong>
     * message created with the reply; if {@link ComponentInteractionEvent#edit()} or
     * {@link ComponentInteractionEvent#deferEdit()} was used, this method will modify the message the component is on.
     *
     * @param content a string to update the message with
     * @return a {@link InteractionReplyEditMono} where, upon successful completion, emits the updated message. If an
     * error is received, it is emitted through the {@code InteractionReplyEditMono}.
     */",discord4j.core.event.domain.interaction
"@Nonnull
    public ScheduledEvent.Status getNewStatus()
    {
        return getNewValue();
    }","/**
     * The new {@link ScheduledEvent#getStatus() status}.
     *
     * @return The new status
     */",net.dv8tion.jda.api.events.guild.scheduledevent.update
"@Override
    public BigIntegerBuffer[] createArray(String... buffers) {
        BigIntegerBuffer [] array = new BigIntegerBuffer[buffers.length];

        for(int i = 0; i < buffers.length; i++) {
            array[i] = create(buffers[i]);
        }
        return array;
    }","/**
     * {@inheritDoc}
     */",threegpp.milenage.biginteger
"public Builder(@Nonnull JDA jda, @Nonnull Class<E> eventType)
        {
            Checks.notNull(jda, ""JDA"");
            Checks.notNull(eventType, ""Event type"");
            this.jda = jda;
            this.eventType = eventType;
        }","/**
         * Creates a builder for a one-time event listener
         *
         * @param jda
         *        The JDA instance
         * @param eventType
         *        The event type to listen for
         *
         * @throws IllegalArgumentException
         *         If any of the parameters is null
         */",net.dv8tion.jda.api.utils
"@Nonnull
    @CheckReturnValue
    CustomEmojiManager setRoles(@Nullable Set<Role> roles);","/**
     * Sets the <b><u>restriction roles</u></b> of the selected {@link RichCustomEmoji}.
     * <br>If these are empty the emoji will be available to everyone otherwise only available to the specified roles.
     *
     * <p>An emoji's restriction roles <b>must not</b> contain {@code null}!
     *
     * @param  roles
     *         The new set of {@link net.dv8tion.jda.api.entities.Role Roles} for the selected {@link RichCustomEmoji}
     *         to be restricted to, or {@code null} to clear the roles
     *
     * @throws IllegalArgumentException
     *         If any of the provided values is {@code null}
     *
     * @return CustomEmojiManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public Scheduler getTimerTaskScheduler() {
        return timerTaskScheduler;
    }","/**
     * Get the {@link Scheduler} configured by this provider to be used in timed tasks.
     *
     * @return a time-capable {@link Scheduler}
     */",discord4j.common
"@Nonnull
    @CheckReturnValue
    public static <E> Result<E> defer(@Nonnull Supplier<? extends E> supplier)
    {
        Checks.notNull(supplier, ""Supplier"");
        try
        {
            return Result.success(supplier.get());
        }
        catch (Exception ex)
        {
            return Result.failure(ex);
        }
    }","/**
     * Creates a result instance from the provided supplier.
     * <br>If the supplier throws an exception, a failure result is returned.
     *
     * @param  supplier
     *         The supplier
     * @param  <E>
     *         The success type
     *
     * @throws IllegalArgumentException
     *         If the supplier is null
     *
     * @return Result instance with the supplied value or exception failure
     */",net.dv8tion.jda.api.utils
"@Nonnull
    R applyMessage(@Nonnull Message message);","/**
     * Applies all the data of the provided {@link Message} and attempts to copy it.
     * <br>This cannot copy the file attachments of the message, they must be manually downloaded and provided to {@link #setFiles(FileUpload...)}.
     * <br>The {@link #setAllowedMentions(Collection) allowed mentions} are not updated to reflect the provided message, and might mention users that the message did not.
     *
     * <p>For edit requests, this will set {@link MessageEditRequest#setReplace(boolean)} to {@code true}, and replace the existing message completely.
     *
     * @param  message
     *         The message to copy the data from
     *
     * @throws IllegalArgumentException
     *         If null is provided or the message is a system message
     *
     * @return The same instance for chaining
     */",net.dv8tion.jda.api.utils.messages
"public static final Route MESSAGE_EDIT = Route.patch(""/channels/{channel.id}/messages/{message.id}"");","/**
     * Edit a previously sent message. You can only edit messages that have been sent by the current user. Returns a
     * message object. Fires a Message Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#edit-message"">
     * https://discord.com/developers/docs/resources/channel#edit-message</a>
     */",discord4j.rest.route
"public String getId() {
        return data.id();
    }","/**
     * Gets the id of the account.
     *
     * @return The id of the account.
     */",discord4j.core.object
"public static MessageReactionRemoveAllAction messageReactionRemoveAll(int shardIndex,
                                                                          MessageReactionRemoveAll dispatch) {
        return new MessageReactionRemoveAllAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link MessageReactionRemoveAll} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link MessageReactionRemoveAllAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    public NotificationLevel getDefaultNotificationLevel()
    {
        return this.notificationLevel;
    }","/**
     * Returns the {@link net.dv8tion.jda.api.entities.Guild.NotificationLevel NotificationLevel} of this guild.
     *
     * @return the notification level of the guild
     */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    @Unmodifiable
    default List<NewsChannel> getNewsChannelsByName(@Nonnull String name, boolean ignoreCase)
    {
        return getNewsChannelCache().getElementsByName(name, ignoreCase);
    }","/**
     * Gets a list of all {@link NewsChannel NewsChannels}
     * in this Guild that have the same name as the one provided.
     * <br>If there are no channels with the provided name, then this returns an empty list.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  name
     *         The name used to filter the returned {@link NewsChannel NewsChannels}.
     * @param  ignoreCase
     *         Determines if the comparison ignores case when comparing. True - case insensitive.
     *
     * @return Possibly-empty immutable list of all NewsChannels names that match the provided name.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Mono<Invite> getInvite() {
        return getClient().getInvite(code);
    }","/**
     * Requests to retrieve the invite Created.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link Invite}.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain
"@Nonnull
    static CustomKeywordTriggerConfig keywordFilter(@Nonnull Collection<String> keywords)
    {
        return new CustomKeywordTriggerConfig().addKeywords(keywords);
    }","/**
     * Trigger on messages containing certain keywords or regex patterns.
     * <br>Keywords are matched case-insensitively, and may also contain whitespace.
     *
     * <p>You can use wildcards at the keyword boundaries to extend the matches:
     * <br>{@code ""foo*""} can match {@code ""foo""}, {@code ""foobar""}, {@code ""foo-bar""}, etc.
     * <br>{@code ""*foo*""} can match {@code ""foo""}, {@code ""foobar""}, {@code ""barfoo""}, etc.
     * <br>{@code ""*foo""} can match {@code ""foo""}, {@code ""barfoo""}, {@code ""bar-foo""}, etc.
     *
     * <p>You can also use regex patterns using {@link #patternFilter(Collection)} or {@link CustomKeywordTriggerConfig#addPatterns(Collection)}.
     *
     * @param  keywords
     *         The keywords to match (case-insensitive)
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any of the keywords are empty, blank, or null</li>
     *             <li>If more than {@value AutoModRule#MAX_KEYWORD_AMOUNT} keywords are added</li>
     *             <li>If any of the keywords is longer than {@value AutoModRule#MAX_KEYWORD_LENGTH} characters</li>
     *         </ul>
     *
     * @return {@link CustomKeywordTriggerConfig}
     */",net.dv8tion.jda.api.entities.automod.build
"default void setIdle(final boolean idle)
    {
        this.setIdleProvider(id -> idle);
    }","/**
     * Sets whether all instances should be marked as afk or not
     *
     * <p>This is relevant to client accounts to monitor
     * whether new messages should trigger mobile push-notifications.
     *
     * <p>This will also change the value for shards that are created in the future.
     *
     * @param idle
     *        boolean
     */",net.dv8tion.jda.api.sharding
"@Nonnull
    InteractionHook setEphemeral(boolean ephemeral);","/**
     * Whether messages sent from this interaction hook should be ephemeral by default.
     * <br>This does not affect message updates, including deferred replies sent with {@link #sendMessage(String) sendMessage(...)} methods.
     * <br>When a message is ephemeral, it will only be visible to the user that used the interaction.
     *
     * <p>Ephemeral messages have some limitations and will be removed once the user restarts their client.
     * <br>Limitations:
     * <ul>
     *     <li>Cannot contain any files/attachments</li>
     *     <li>Cannot be reacted to</li>
     *     <li>Cannot be retrieved</li>
     * </ul>
     *
     * @param  ephemeral
     *         True if messages should be ephemeral
     *
     * @return The same interaction hook instance
     */",net.dv8tion.jda.api.interactions
"public static String encodeReaction(String unicode)
    {
        if (unicode.startsWith(""U+"") || unicode.startsWith(""u+""))
            return encodeCodepointsUTF8(unicode);
        else
            return encodeUTF8(unicode);
    }","/**
     * Encodes a unicode correctly based on being in codepoint notation or not.
     * @param  unicode Provided unicode in the form of <code>\窶丘XXXX</code> or <code>U+XXXX</code>
     * @return Never-null String containing the encoded unicode
     */",net.dv8tion.jda.internal.utils
new DefaultMemberPermissions(null);,"/**
     * Default permissions of a command with no restrictions applied. (Everyone can see and access this command by default)
     */",net.dv8tion.jda.api.interactions.commands
"Mono<RoleData> onGuildRoleDelete(int shardIndex, GuildRoleDelete dispatch);","/**
     * Updates the internal state of the store according to the given {@link GuildRoleDelete} gateway dispatch. This
     * will typically perform a delete operation on a related {@link RoleData} that is already present in the store,
     * and remove the role ID from the list returned by {@link GuildData#roles()} and {@link MemberData#roles()}.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link RoleData} before the deletion
     */",discord4j.common.store.api.layout
byte[] chars = path.getBytes(StandardCharsets.UTF_8);,"/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     *
     * @param  <T>
     *         The result type
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     * @param  fromObject
     *         Object relative resolver of the value, this is used for the final reference and resolves the value.
     *         The first parameter is the {@link DataObject} where you get the value from, and the second is the field name.
     *         An example would be {@code (obj, name) -> obj.getString(name)} or as a method reference {@code DataObject::getString}.
     * @param  fromArray
     *         Array relative resolver of the value, this is used for the final reference and resolves the value.
     *         The first parameter is the {@link DataArray} where you get the value from, and the second is the field index.
     *         An example would be {@code (array, index) -> obj.getString(index)} or as a method reference {@code DataArray::getString}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The value at the provided path, using the provided resolver functions.
     *         Possibly null, if the path ends with a ""?"" operator, or the resolver function returns null.
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    public EmbedBuilder appendDescription(@Nonnull CharSequence description)
    {
        Checks.notNull(description, ""description"");
        Checks.check(this.description.length() + description.length() <= MessageEmbed.DESCRIPTION_MAX_LENGTH,
                ""Description cannot be longer than %d characters."", MessageEmbed.DESCRIPTION_MAX_LENGTH);
        this.description.append(description);
        return this;
    }","/**
     * Appends to the description of the embed. This is where the main chunk of text for an embed is typically placed.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/05-setDescription.png"">Example</a></b>
     *
     * @param  description
     *         the string to append to the description of the embed
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the provided {@code description} String is null.</li>
     *             <li>If the character limit for {@code description}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#DESCRIPTION_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#DESCRIPTION_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return the builder after the description has been set
     */",net.dv8tion.jda.api
"default boolean isModerator(@Nonnull Member member)
    {
        Checks.notNull(member, ""Member"");
        return member.hasPermission(this, Permission.MANAGE_CHANNEL, Permission.VOICE_MUTE_OTHERS, Permission.VOICE_MOVE_OTHERS);
    }","/**
     * Whether this member is considered a moderator for this stage channel.
     * <br>Moderators can modify the {@link #getStageInstance() Stage Instance} and promote speakers.
     * To promote a speaker you can use {@link GuildVoiceState#inviteSpeaker()} or {@link GuildVoiceState#approveSpeaker()} if they have already raised their hand (indicated by {@link GuildVoiceState#getRequestToSpeakTimestamp()}).
     * A stage moderator can move between speaker and audience without raising their hand. This can be done with {@link Guild#requestToSpeak()} and {@link Guild#cancelRequestToSpeak()} respectively.
     *
     * <p>A member is considered a stage moderator if they have these permissions in the stage channel:
     * <ul>
     *     <li>{@link Permission#MANAGE_CHANNEL}</li>
     *     <li>{@link Permission#VOICE_MUTE_OTHERS}</li>
     *     <li>{@link Permission#VOICE_MOVE_OTHERS}</li>
     * </ul>
     *
     * @param  member
     *         The member to check
     *
     * @throws IllegalArgumentException
     *         If the provided member is null or not from this guild
     *
     * @return True, if the provided member is a stage moderator
     */",net.dv8tion.jda.api.entities.channel.concrete
"Mono<GuildData> onGuildUpdate(int shardIndex, GuildUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link GuildUpdate} gateway dispatch. This will
     * typically perform an update operation on a related {@link GuildData} that is already present in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link GuildData} before the update
     */",discord4j.common.store.api.layout
Vehicle damagee = event.getVehicle();,"/**
     * Handle damage dealt to vehicles, such as minecarts (they could be container minecarts too)
     */",com.massivecraft.factions.listeners
"public HttpHeaders getHeaders() {
        return headers;
    }","/**
     * Return the headers of this request.
     *
     * @return the {@link HttpHeaders} of this {@link ClientRequest}
     */",discord4j.rest.http.client
"public LegacyGuildEditSpec setName(String name) {
        requestBuilder.name(name);
        return this;
    }","/**
     * Sets the modified {@link Guild} name.
     *
     * @param name the guild name
     * @return this spec
     */",discord4j.core.spec.legacy
"@Nonnull
    @Override
    ISlowmodeChannelManager<?, ?> getManager();","/**
     * Returns the {@link ISlowmodeChannelManager} for this {@link ISlowmodeChannel slow mode channel}.
     * <br>With the provided ChannelManager, you can additionally modify the {@link ChannelField#SLOWMODE}
     * compared to a guild channel's {@link ChannelManager}.
     * You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL Permission.MANAGE_CHANNEL}
     *
     * @return The {@link ISlowmodeChannelManager} of this {@link ISlowmodeChannel}
     *
     * @see ChannelManager ChannelManager, for modifying fields each guild channel provides
     * @see ChannelField   ChannelField, for all possible channel fields
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    @Unmodifiable
    List<Role> getRoles();","/**
     * Roles this emoji is active for.
     * <br><a href=""https://discord.com/developers/docs/resources/emoji#emoji-object"" target=""_blank"">Learn More</a>
     *
     * @return An immutable list of the roles this emoji is active for (all roles if empty)
     */",net.dv8tion.jda.api.entities.emoji
"public boolean matches(DiscordWebRequest otherRequest) {
        return matchesRoute(otherRequest) && matchesVariables(otherRequest);
    }","/**
     * Tests this matcher against the given {@link DiscordWebRequest}.
     *
     * @param otherRequest the {@link DiscordWebRequest} argument
     * @return {@code true} if the input argument matches the predicate, otherwise {@code false}
     */",discord4j.rest.request
"public abstract void writeLine(String format, Object... args);","/**
   * Writes a formatted string to the terminal output, breaking a line at the end.
   *
   * @param format the format
   * @param args   the args
   */",io.github.augustoravazoli.termenu.io
"@Nullable
        VoiceChannel getChannel();","/**
         * Gets the channel the member is in
         * 
         * @return never-null VoiceChannel
         */",net.dv8tion.jda.api.entities
"public boolean isEmbedsChanged() {
        return embedsChanged;
    }","/**
     * Gets whether or not the {@link Embed} in the {@link Message} has been changed in this event.
     *
     * @return Whether or not the {@link Embed} in the {@link Message} has been changed.
     */",discord4j.core.event.domain.message
"boolean loadOrCreateNewUser(String name) throws FileNotFoundException, IOException;","/**
     * load user profile.
     *
     * @param name
     *            the {@link String} username
     * @return <code>true</code> if can load the profile
     * @throws FileNotFoundException
     *             if File is gone
     * @throws IOException
     *             the {@link IOException} during file creation
     */",jestures.core.serialization
"@Nonnull
    String getIdentifier();","/**
     * Provides a unique String identifier for the connection.
     * <br>Uses shard information and specific audio connection information to build string.
     *
     * @return Never-null String unique to this audio connection.
     */",net.dv8tion.jda.api.audio.factory
"public LegacyWebhookExecuteSpec setTts(boolean tts) {
        this.tts = Possible.of(tts);
        return this;
    }","/**
     * Sets whether the created {@link discord4j.core.object.entity.Message} is a TTS message.
     *
     * @param tts If created message is a TTS message.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    InviteAction setTargetStream(final long userId);","/**
     * Sets the user whose stream to target for this invite.
     * <br>The user must be streaming in the same channel.
     * The invite will have the {@link Invite.TargetType#STREAM} target.
     *
     * @param userId
     *        The id of the user whose stream to target or {@code 0} to remove.
     *
     * @return The current InviteAction for chaining.
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    Stream<T> parallelStream();","/**
     * Creates a parallel {@link java.util.stream.Stream Stream} of all cached elements.
     * <br>This will be sorted for a {@link SortedSnowflakeCacheViewImpl SortedSnowflakeCacheView}.
     *
     * @return Parallel Stream of elements
     */",net.dv8tion.jda.api.utils.cache
"public CloseStatus(int code, @Nullable String reason) {
        this.code = code;
        this.reason = reason;
    }","/**
     * Create a new {@link CloseStatus} instance.
     *
     * @param code the status code
     * @param reason the reason
     */",discord4j.common.close
"public List<Snowflake> getNotFound() {
        return notFound;
    }","/**
     * Gets invalid id passed to `REQUEST_GUILD_MEMBERS`, if any.
     *
     * @return Gets invalid id passed to `REQUEST_GUILD_MEMBERS`, if any.
     */",discord4j.core.event.domain.guild
Publisher<GatewayPayload<?>> read(ByteBuf payload);,"/**
     * Read from the input buffer and encode to a single object.
     *
     * @param payload the input byte buffer
     * @return a publisher of {@code GatewayPayload} representing the inbound payload
     */",discord4j.gateway.payload
"@Nullable
    String getId();","/**
     * The component ID or null.
     * <br>Some components such as link buttons don't have this.
     *
     * <p>This need not be a numeric ID! All these component IDs are custom and user-provided data,
     * unlike other IDs generated by Discord. This ID is used for event handling with {@link ComponentInteraction#getComponentId()}.
     *
     * @return The component ID or null if not present
     *
     * @see    ComponentInteraction#getComponentId()
     */",net.dv8tion.jda.api.interactions.components
"public int getOldMaxPresences()
    {
        return getOldValue();
    }","/**
     * The old max presences
     *
     * @return The old max presences
     */",net.dv8tion.jda.api.events.guild.update
"public LegacyGuildMemberEditSpec setMute(boolean mute) {
        builder.mute(mute);
        return this;
    }","/**
     * Sets whether the targeted {@link Member} is muted in voice channels, if they are connected to voice. Requires the
     * {@link Permission#MUTE_MEMBERS} permission.
     *
     * @param mute {@code true} if the {@link Member} should be muted, {@code false} otherwise.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static String asFormat(final boolean isAnimated, final String name, final Snowflake id) {
            return '<' + (isAnimated ? ""a"" : """") + ':' + Objects.requireNonNull(name) + ':' + Objects.requireNonNull(id).asString() + '>';
        }","/**
         * Gets the formatted version of this emoji (i.e., to display in the client).
         * <br>
         * <b>Note:</b> please check first if {@link #getName()} is not empty.
         *
         * @param isAnimated Whether the emoji is animated.
         * @param id The ID of the custom emoji.
         * @param name The name of the custom emoji.
         * @return The formatted version of this emoji (i.e., to display in the client).
         */",discord4j.core.object.reaction
"public Mono<Image> getCurrentGuildAvatar(Image.Format format) {
        return Mono.justOrEmpty(getCurrentGuildAvatarUrl(format)).flatMap(Image::ofUrl);
    }","/**
     * Gets the current member's guild avatar. This is the avatar at the url given by
     * {@link #getCurrentGuildAvatarUrl(Image.Format)}.
     *
     * @param format The format for the avatar.
     * @return a {@link Mono} where, upon successful completion, emits the current {@link Image guild avatar} of the
     * member.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.guild
"public EmojiService getEmojiService() {
        return emojiService;
    }","/**
     * Access a low-level representation of the API endpoints for the Guild Emoji resource. It is recommended you use
     * methods like {@link #getGuildEmojiById(Snowflake, Snowflake)}, {@link #restGuildEmoji(Snowflake, EmojiData)} or
     * {@link RestEmoji#create(RestClient, Snowflake, Snowflake)}.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"public static PermissionSet computePermissions(PermissionSet base, @Nullable PermissionOverwrite everyoneOverwrite,
                                                   List<PermissionOverwrite> roleOverwrites,
                                                   @Nullable PermissionOverwrite memberOverwrite) {
        if (base.contains(Permission.ADMINISTRATOR)) {
            return PermissionSet.all();
        }

        List<PermissionOverwrite> allOverwrites = new ArrayList<>();
        if (everyoneOverwrite != null) allOverwrites.add(everyoneOverwrite);
        allOverwrites.addAll(roleOverwrites);
        if (memberOverwrite != null) allOverwrites.add(memberOverwrite);

        return allOverwrites.stream().reduce(base, PermissionUtil::applyOverwrite, PermissionSet::or); // combiner is never used
    }","/**
     * Computes the permissions of a member taking into account permission overwrites.
     *
     * @param base The base permissions granted by the member's roles.
     * @param everyoneOverwrite The overwrite applied to the everyone role in the channel.
     * @param roleOverwrites The overwrites applied to every other role in the channel.
     * @param memberOverwrite The overwrite applied to the member in the channel.
     * @return The permissions with overwrites taken into account.
     *
     * @see discord4j.core.object.entity.channel.GuildChannel#getEffectivePermissions(Snowflake)
     * GuildChannel#getEffectivePermissions(Snowflake)
     */",discord4j.core.util
"public static int getInt(@Nonnull DataArray root, @Nonnull String path, int fallback)
    {
        Integer integer = get(root, path, (obj, key) -> obj.getInt(key, fallback), (arr, index) -> arr.getInt(index, fallback));
        return integer == null ? fallback : integer;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     * <br>If the resulting value is a string, this will parse the string using {@link Integer#parseInt(String)}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The int value at the given path, returning the fallback if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    @Unmodifiable
    List<String> getValues();","/**
     * The selected values.
     * <br>These are defined in the individual {@link SelectOption SelectOptions}.
     *
     * @return {@link List} of {@link SelectOption#getValue()}
     */",net.dv8tion.jda.api.interactions.components.selections
"default boolean hasSubscriptionListing()
        {
            return getSubscriptionIdLong() != 0;
        }","/**
         * Whether this role can be acquired through a premium subscription purchase.
         * A role would also need {@link #isAvailableForPurchase()} to also be true for a user to actually be
         * able to purchase the role. 
         *
         * @return True, if this is a subscription role
         *
         * @see    #getSubscriptionIdLong()
         * @see    #isAvailableForPurchase()
         */",net.dv8tion.jda.api.entities
"Mono<Void> onShardInvalidation(int shardIndex, InvalidationCause cause);","/**
     * Handles the invalidation of a specific shard. When a shard is invalidated, all cached data related to it should
     * be considered stale and the implementation may perform some cleanup work.
     *
     * @param shardIndex the index of the shard to invalidate
     * @param cause      the cause of the invalidation
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"@Nonnull
    static UserSnowflake fromId(@Nonnull String id)
    {
        return fromId(MiscUtil.parseSnowflake(id));
    }","/**
     * Creates a User instance which only wraps an ID.
     *
     * @param  id
     *         The user id
     *
     * @throws IllegalArgumentException
     *         If the provided ID is not a valid snowflake
     *
     * @return A user snowflake instance
     *
     * @see    JDA#retrieveUserById(String)
     */",net.dv8tion.jda.api.entities
"@Nonnull
    @Unmodifiable
    default List<ForumChannel> getForumChannelsByName(@Nonnull String name, boolean ignoreCase)
    {
        return getForumChannelCache().getElementsByName(name, ignoreCase);
    }","/**
     * Gets a list of all {@link ForumChannel ForumChannels}
     * in this Guild that have the same name as the one provided.
     * <br>If there are no channels with the provided name, then this returns an empty list.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  name
     *         The name used to filter the returned {@link ForumChannel ForumChannels}.
     * @param  ignoreCase
     *         Determines if the comparison ignores case when comparing. True - case insensitive.
     *
     * @return Possibly-empty immutable list of all ForumChannel names that match the provided name.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public boolean wasMentionable()
    {
        return getOldValue();
    }","/**
     * Whether the role was mentionable
     *
     * @return True, if this role was mentionable before this update
     */",net.dv8tion.jda.api.events.role.update
"public Optional<StatusUpdate> getInitialStatus() {
        return Optional.ofNullable(initialStatus);
    }","/**
     * Retrieve the initial status used to identify bots.
     *
     * @return the presence used to identify bots
     */",discord4j.gateway
void start(int shardId);,"/**
     * Adds a new shard with the given id to this ShardManager and starts it.
     *
     * @param  shardId
     *         The id of the shard that should be started
     *
     * @throws java.util.concurrent.RejectedExecutionException
     *         If {@link #shutdown()} has already been invoked
     */",net.dv8tion.jda.api.sharding
"Map<String, List<List<Vector2D>>> getAllGesturesData();","/**
     * Get a copy all feature vectors for all gestures.
     * <p>
     * Useful for template match
     *
     * @return the {@link Map} of all gestures data
     */",jestures.core.recognition.gesturedata
"@Nullable
    public User getUser()
    {
        return issuer == null && isFromType(ChannelType.PRIVATE)
                ? getChannel().asPrivateChannel().getUser() // this can't be the self user because then issuer would be nonnull
                : issuer;
    }","/**
     * The reacting {@link net.dv8tion.jda.api.entities.User User}
     * <br>This might be missing if the user was not cached.
     * Use {@link #retrieveUser()} to load the user.
     *
     * @return The reacting user or null if this information is missing
     */",net.dv8tion.jda.api.events.message.react
"public Publisher<?> onChatInputInteraction(ChatInputInteractionEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user issues a chat input command (formerly ""slash command"").
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Mono<GuildData> createGuild(TemplateCreateGuildRequest request) {
        return restClient.getTemplateService().createGuild(code, request);
    }","/**
     * Create a new guild based on this template.
     * <p>
     * This endpoint can be used only by bots in less than 10 guilds.
     *
     * @return a guild object
     */",discord4j.rest.entity
"@Nonnull
    @CheckReturnValue
    default PermissionOverrideAction deny(@Nonnull Permission... permissions)
    {
        return deny(Permission.getRaw(permissions));
    }","/**
     * Denies the specified permissions.
     * <br>This does not override already denied permissions.
     *
     * @param  permissions
     *         The permissions to deny, in addition to already denied permissions
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     * @throws IllegalArgumentException
     *         If any provided argument is null
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Override
    public void setUpdateRate(final UpdateRate updateRate) {
        this.updateRate = updateRate;
    }","/**
     * Set the update rate of the recognizer. The rate must be a value that can be devided by the frame length.
     *
     * @param updateRate
     *            the update rate
     */",jestures.core.recognition.gesturedata
"@Nullable
    public String getOldSplashUrl()
    {
        return previous == null ? null : String.format(Guild.SPLASH_URL, guild.getId(), previous);
    }","/**
     * The url of the old splash
     *
     * @return The url of the old splash, or null
     */",net.dv8tion.jda.api.events.guild.update
"public List<ApplicationTeamMember> getMembers() {
        return data.members().stream()
                .map(data -> new ApplicationTeamMember(gateway, data))
                .collect(Collectors.toList());
    }","/**
     * Gets the members of the team.
     *
     * @return The members of the team.
     */",discord4j.core.object.entity
"public static ThreadDeleteAction threadDelete(int shardIndex, ThreadDelete dispatch) {
        return new ThreadDeleteAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link ThreadDelete} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link ThreadDeleteAction}
     */",discord4j.common.store.action.gateway
"public Mono<Member> getMember(EntityRetrievalStrategy retrievalStrategy) {
        return gateway.withRetrievalStrategy(retrievalStrategy).getMemberById(getGuildId(), getUserId());
    }","/**
     * Requests to retrieve the member this voice state is for, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the member
     * @return A {@link Mono} where, upon successful completion, emits the {@link Member} this voice state is for. If an
     * error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
        public B setMinValues(int minValues)
        {
            Checks.notNegative(minValues, ""Min Values"");
            Checks.check(minValues <= OPTIONS_MAX_AMOUNT, ""Min Values may not be greater than %d! Provided: %d"", OPTIONS_MAX_AMOUNT, minValues);
            this.minValues = minValues;
            return (B) this;
        }","/**
         * The minimum amount of values a user has to select.
         * <br>Default: {@code 1}
         *
         * <p>The minimum must not exceed the amount of available options.
         *
         * @param  minValues
         *         The min values
         *
         * @throws IllegalArgumentException
         *         If the provided amount is negative or greater than {@value #OPTIONS_MAX_AMOUNT}
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.components.selections
"@Nonnull
    AudioChannel getConnectedChannel();","/**
     * Provides the current channel that this connection is transmitting to.
     *
     * @return The {@link AudioChannel} that this connection is sending to.
     */",net.dv8tion.jda.api.audio.factory
"@Nonnull
    @CheckReturnValue
    ScheduledEventManager setLocation(@Nonnull GuildChannel channel);","/**
     * Sets the location of the selected {@link ScheduledEvent} to take place in the specified {@link GuildChannel}.
     * <p>This will change the event's type to {@link ScheduledEvent.Type#STAGE_INSTANCE} or {@link ScheduledEvent.Type#VOICE},
     * which are the only supported channel types for the location of scheduled events currently.
     *
     * @param  channel
     *         The {@link GuildChannel} that the selected {@link ScheduledEvent} is set to take place in.
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the provided {@link GuildChannel} is {@code null}</li>
     *             <li>If the provided {@link GuildChannel} is not from the same guild</li>
     *             <li>If the provided {@link GuildChannel} is not a {@link net.dv8tion.jda.api.entities.channel.concrete.StageChannel} or {@link net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel}</li>
     *         </ul>
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have
     *         {@link net.dv8tion.jda.api.Permission#MANAGE_EVENTS Permission.MANAGE_EVENTS},
     *         {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL Permission.MANAGE_CHANNEL},
     *         {@link net.dv8tion.jda.api.Permission#VOICE_MUTE_OTHERS Permission.VOICE_MUTE_OTHERS},
     *         or {@link net.dv8tion.jda.api.Permission#VOICE_MOVE_OTHERS Permission.VOICE_MOVE_OTHERS}, in the provided
     *         channel.
     *
     * @return ScheduledEventManager for chaining convenience
     */",net.dv8tion.jda.api.managers
void createUserProfile(String username);,"/**
     * Create the user profile.
     *
     * @param username
     *            the String username
     */",recorder.view
"@Nullable
    Member getElementById(long id);","/**
     * Retrieves the member represented by the provided ID.
     *
     * @param  id
     *         The ID of the member
     *
     * @return Possibly-null member for the specified ID
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    public CompletableFuture<Path> downloadToPath(@Nonnull Path path, int size)
    {
        Checks.notNull(path, ""Path"");

        return downloadToPath(getUrl(size), path);
    }","/**
     * Downloads the data of this image, at the specified size, and stores it in the specified file.
     * <br><b>The image may not be resized at any size, usually Discord only allows for a few powers of 2</b>, so numbers like 128, 256, 512..., 100 might also be a valid size.
     *
     * <p>If the image is not of a valid size, the CompletableFuture will hold an exception since the HTTP request would have returned a 404.
     *
     * <p><b>Implementation note:</b>
     *       The file is first downloaded into a temporary file, the file is then moved to its real destination when the download is complete.
     *       <br>The given path can also target filesystems such as a ZIP filesystem.
     *
     * @param  path
     *         The file in which to download the image
     *
     * @throws IllegalArgumentException
     *         If any of the follow checks are true
     *         <ul>
     *             <li>The target path is null</li>
     *             <li>The parent folder of the target path does not exist</li>
     *             <li>The target path exists and is not a {@link Files#isRegularFile(Path, LinkOption...) regular file}</li>
     *             <li>The target path exists and is not {@link Files#isWritable(Path) writable}</li>
     *             <li>The requested size is negative or 0</li>
     *         </ul>
     *
     * @return {@link CompletableFuture} which holds a {@link Path}, it is the same as the path passed in the parameters.
     */",net.dv8tion.jda.api.utils
"@Nullable
    public String getNewAvatarUrl()
    {
        return next == null ? null : String.format(User.AVATAR_URL, getUser().getId(), next, next.startsWith(""a_"") ? ""gif"" : ""png"");
    }","/**
     * The url of the new avatar
     *
     * @return The url of the new avatar
     */",net.dv8tion.jda.api.events.user.update
"protected PermissionException(@Nonnull Permission permission)
    {
        this(permission, ""Cannot perform action due to a lack of Permission. Missing permission: "" + permission.toString());
    }","/**
     * Creates a new PermissionException instance
     *
     * @param permission
     *        The required {@link net.dv8tion.jda.api.Permission Permission}
     */",net.dv8tion.jda.api.exceptions
"@Nonnull
    static Button link(@Nonnull String url, @Nonnull String label)
    {
        Checks.notEmpty(url, ""URL"");
        Checks.notEmpty(label, ""Label"");
        Checks.notLonger(url, URL_MAX_LENGTH, ""URL"");
        Checks.notLonger(label, LABEL_MAX_LENGTH, ""Label"");
        return new ButtonImpl(null, label, ButtonStyle.LINK, url, false, null);
    }","/**
     * Creates a button with {@link ButtonStyle#LINK LINK} Style.
     * <br>The button is enabled and has no emoji attached by default.
     * You can use {@link #asDisabled()} and {@link #withEmoji(Emoji)} to further configure it.
     *
     * <p>Note that link buttons never send a {@link ButtonInteractionEvent ButtonInteractionEvent}.
     * These buttons only open a link for the user.
     *
     * @param  url
     *         The target URL for this button
     * @param  label
     *         The text to display on the button
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any provided argument is null or empty.</li>
     *             <li>If the character limit for {@code url}, defined by {@link #URL_MAX_LENGTH} as {@value #URL_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the character limit for {@code label}, defined by {@link #LABEL_MAX_LENGTH} as {@value #LABEL_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
"public Role getCurrent() {
        return current;
    }","/**
     * Gets the current, new version of the {@link Role} that was updated in the event.
     *
     * @return The current version of the updated {@link Role}.
     */",discord4j.core.event.domain.role
"public ApplicationIntegrationTypeConfigurationData getData() {
        return this.data;
    }","/**
     * Gets the data of this configuration
     *
     * @return The data of this configuration
     */",discord4j.core.object
"public LegacyNewsChannelCreateSpec setNsfw(boolean nsfw) {
        requestBuilder.nsfw(nsfw);
        return this;
    }","/**
     * Sets whether the created {@link NewsChannel} is NSFW (not safe for work).
     *
     * @param nsfw The channel nsfw property.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    ScheduledEventManager setEndTime(@Nonnull TemporalAccessor endTime);","/**
     * Sets the time that the selected {@link ScheduledEvent} should end at.
     * Events of {@link ScheduledEvent.Type#EXTERNAL Type.EXTERNAL} will automatically
     * end at this time, and events of {@link ScheduledEvent.Type#STAGE_INSTANCE Type.STAGE_INSTANCE}
     * and {@link ScheduledEvent.Type#VOICE Type.VOICE} will end a few minutes after the last
     * person has left the channel.
     *
     * @param  endTime
     *         The time that the selected {@link ScheduledEvent} is set to end at.
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the provided end time is before the start time</li>
     *             <li>If the provided end time is {@code null}</li>
     *         </ul>
     *
     * @return ScheduledEventManager for chaining convenience
     *
     * @see    #setStartTime(TemporalAccessor)
     */",net.dv8tion.jda.api.managers
"public RestResources(AuthorizationScheme scheme, String token, ReactorResources reactorResources,
                         JacksonResources jacksonResources, Router router, @Nullable AllowedMentions allowedMentions) {
        this.scheme = scheme;
        this.token = token;
        this.reactorResources = reactorResources;
        this.jacksonResources = jacksonResources;
        this.router = router;
        this.selfId = scheme == AuthorizationScheme.BOT ? TokenUtil.getSelfId(token) : null;
        this.allowedMentions = allowedMentions;
    }","/**
     * Create a {@link RestResources} instance with the given resources.
     *
     * @param token the bot token used to authenticate requests
     * @param reactorResources Reactor resources to establish connections and schedule tasks
     * @param jacksonResources Jackson data-binding resources to map objects
     * @param router a connector to perform requests against Discord API
     * @param allowedMentions a configuration object to limit mentions creating notifications on message sending
     */",discord4j.rest
"public Event(@Nonnull JDA api, long responseNumber)
    {
        this.api = api;
        this.responseNumber = responseNumber;
        this.rawData = api instanceof JDAImpl && ((JDAImpl) api).isEventPassthrough() ? SocketHandler.CURRENT_EVENT.get() : null;
    }","/**
     * Creates a new Event from the given JDA instance
     *
     * @param api
     *        Current JDA instance
     * @param responseNumber
     *        The sequence number for this event
     *
     * @see   #Event(net.dv8tion.jda.api.JDA)
     */",net.dv8tion.jda.api.events
"public CoreResources(String token, ReactorResources reactorResources, JacksonResources jacksonResources,
                         Router router, @Nullable AllowedMentions allowedMentions) {
        super(token, reactorResources, jacksonResources, router, allowedMentions);
    }","/**
     * Create a {@link CoreResources} instance with the given resources.
     *
     * @param token the bot token used to authenticate requests
     * @param reactorResources Reactor resources to establish connections and schedule tasks
     * @param jacksonResources Jackson data-binding resources to map objects
     * @param router a connector to perform requests against Discord API
     * @param allowedMentions a configuration object to limit mentions creating notifications on message sending
     */",discord4j.core
"@Nonnull
    public String getAsString()
    {
        return value;
    }","/**
     * The String representation of this component.
     *
     * <p>For TextInputs, this returns what the User typed in it.
     *
     * @return The String representation of this component.
     */",net.dv8tion.jda.api.interactions.modals
"@Nonnull
        public Builder<E> setTimeoutPool(@Nonnull ScheduledExecutorService timeoutPool)
        {
            Checks.notNull(timeoutPool, ""Timeout pool"");
            this.timeoutPool = timeoutPool;
            return this;
        }","/**
         * Sets the thread pool used to schedule timeouts and run its callback.
         *
         * <p>By default {@link JDA#getGatewayPool()} is used.
         *
         * @param  timeoutPool
         *         The thread pool to use for timeouts
         *
         * @throws IllegalArgumentException
         *         If the timeout pool is null
         *
         * @return This instance for chaining convenience
         */",net.dv8tion.jda.api.utils
"static ExchangeStrategies jackson(ObjectMapper mapper) {
        List<WriterStrategy<?>> writerStrategies = new ArrayList<>();
        writerStrategies.add(new MultipartWriterStrategy(mapper));
        writerStrategies.add(new JacksonWriterStrategy(mapper));
        writerStrategies.add(new EmptyWriterStrategy());
        writerStrategies.add(new FormUrlEncodedWriterStrategy());
        List<ReaderStrategy<?>> readerStrategies = new ArrayList<>();
        readerStrategies.add(new JacksonReaderStrategy<>(mapper));
        readerStrategies.add(new EmptyReaderStrategy());
        readerStrategies.add(new FallbackReaderStrategy());
        return new DefaultExchangeStrategies(writerStrategies, readerStrategies);
    }","/**
     * Return an {@link discord4j.rest.http.ExchangeStrategies} using the defaults for processing JSON requests using
     * Jackson.
     *
     * @param mapper the Jackson object mapper
     * @return the built strategies
     */",discord4j.rest.http
"public String getDescription() {
        return data.description();
    }","/**
     * Gets the description of the app.
     *
     * @return The description of the app.
     */",discord4j.core.object.entity
"@Nullable
    public String getIconId()
    {
        return iconId;
    }","/**
     * The Discord hash-id of the {@link net.dv8tion.jda.api.entities.Role Role} icon image.
     * If no icon has been set or an emoji is used in its place, this returns {@code null}.
     * <p>The Role icon can be modified using {@link RoleManager#setIcon(Icon)}.
     *
     * @return Possibly-null String containing the Role's icon hash-id.
     *
     * @since  4.3.1
     */",net.dv8tion.jda.api.entities
"public static final Route WEBHOOK_GET = Route.get(""/webhooks/{webhook.id}"");","/**
     * Returns the new webhook object for the given id.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#get-webhook"">
     * https://discord.com/developers/docs/resources/webhook#get-webhook</a>
     */",discord4j.rest.route
"public static Builder builder(ShardInfo shardInfo) {
        return new Builder(shardInfo);
    }","/**
     * Create a builder to create an {@link IdentifyOptions} using the given shard information.
     *
     * @param shardInfo the shard index and count to be used when authenticating
     * @return a {@link Builder}
     */",discord4j.gateway
Flux<AutoModRule> getGuildAutoModRules(Snowflake guildId);,"/**
     * Requests to retrieve the guild's automod rules.
     *
     * @return A {@link Flux} that continually emits the guild's {@link AutoModRule AutoModRule}. If an error is received,
     * it is emitted through the {@code Flux}.
     */",discord4j.core.retriever
"@Override
        public String toString() {
            return ""[gateway_connected]"";
        }","/**
     * Propagated when a gateway connection has been established.
     */",discord4j.gateway
"public static GetVoiceStatesInGuildAction getVoiceStatesInGuild(long guildId) {
        return new GetVoiceStatesInGuildAction(guildId);
    }","/**
     * Creates an action to retrieve data for all voice states present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link GetVoiceStatesInGuildAction}
     */",discord4j.common.store.action.read
"@Nullable
    public TextChannel getOldCommunityUpdatesChannel()
    {
        return getOldValue();
    }","/**
     * The previous community updates channel.
     * 
     * @return The previous community updates channel
     */",net.dv8tion.jda.api.events.guild.update
long getAllowedFileSize();,"/**
     * Returns the maximum size for files that can be uploaded with this account.
     * <br>Returns {@value net.dv8tion.jda.api.entities.Message#MAX_FILE_SIZE} for bots.
     * 
     * @return The maximum size for files that can be uploaded with this account
     * 
     * @see net.dv8tion.jda.api.entities.Message#MAX_FILE_SIZE
     */",net.dv8tion.jda.api.entities
"Mono<RoleData> getRoleById(long guildId, long roleId);","/**
     * Retrieves data for the role corresponding to the given guild ID and role ID.
     *
     * @param guildId the guild ID
     * @param roleId  the role ID
     * @return A {@link Mono} emitting the role, or empty if not found
     */",discord4j.common.store.api.layout
"public double getJitterFactor() {
        return jitterFactor;
    }","/**
     * Retrieve the jitter factor to be applied on each backoff delay.
     *
     * @return a jitter factor value between {@code 0d} and {@code 1d}
     */",discord4j.common.retry
Mono<Void> onGuildMembersCompletion(long guildId);,"/**
     * Invoked to indicate that all members for the specified guild ID were received. It serves as a hint to indicate
     * to the store that information on the full member list for this specific guild may now be accurately returned, so
     * that further calls to {@link DataAccessor#countExactMembersInGuild(long)} and
     * {@link DataAccessor#getExactMembersInGuild(long)} with the same guild ID no longer fail.
     *
     * @param guildId the guild ID
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
void deleteGestureDataset(String gestureName);,"/**
     * Delete all the gesture's dataset.
     *
     * @param gestureName
     *            the gesture name
     */",jestures.core.recognition.gesturedata
"public VoiceReactorResources getVoiceReactorResources() {
        return voiceReactorResources;
    }","/**
     * Return the {@link VoiceReactorResources} used to perform Voice Gateway-related operations.
     *
     * @return the Voice Gateway Reactor resources
     */",discord4j.core
"public Map<Snowflake, Attachment> getAttachments() {
        return data.attachments().toOptional()
                .map(map -> map.entrySet().stream()
                        .map(entry -> Tuples.of(Snowflake.of(entry.getKey()),
                                new Attachment(gateway, entry.getValue())))
                        .collect(Collectors.toMap(Tuple2::getT1, Tuple2::getT2)))
                .orElseGet(Collections::emptyMap);
    }","/**
     * Gets a map containing the resolved attachments associated by their IDs
     *
     * @return the resolved attachments
     */",discord4j.core.object.command
"public LegacyGuildMemberEditSpec setNewVoiceChannel(@Nullable Snowflake channel) {
        builder.channelId(Possible.of(Optional.ofNullable(channel).map(Snowflake::asString)));
        return this;
    }","/**
     * Sets the new voice channel to move the targeted {@link Member}, if they are connected to voice. Requires the
     * {@link Permission#MOVE_MEMBERS} permission.
     *
     * @param channel The voice channel identifier or {@code null} to disconnect from voice channel.
     * @return This spec.
     */",discord4j.core.spec.legacy
"default void setIdleProvider(@Nonnull final IntFunction<Boolean> idleProvider)
    {
        this.getShardCache().forEach(jda -> jda.getPresence().setIdle(idleProvider.apply(jda.getShardInfo().getShardId())));
    }","/**
     * Sets the provider that decides for all shards whether they should be marked as afk or not.
     *
     * <p>This will also change the provider for shards that are created in the future.
     *
     * @param idleProvider
     *        Provider for a boolean
     */",net.dv8tion.jda.api.sharding
"static EmptyResponseTransformer emptyIfNotFound(RouteMatcher routeMatcher) {
        return new EmptyResponseTransformer(routeMatcher, ClientException.isStatusCode(404));
    }","/**
     * Transforms HTTP 404 status codes caused by requests matching the given {@link RouteMatcher} into an empty
     * sequence, effectively suppressing the {@link ClientException} that would be forwarded otherwise. See
     * {@link #emptyIfNotFound()} to apply this transformation across all {@link Router} requests.
     *
     * @param routeMatcher the {@link RouteMatcher} determining whether to match a particular request
     * @return a {@link ResponseFunction} that transforms matching HTTP 404 errors into an empty sequence
     */",discord4j.rest.response
"@Nonnull
    @Unmodifiable
    default List<VoiceChannel> getVoiceChannels()
    {
        return getVoiceChannelCache().asList();
    }","/**
     * Gets all {@link VoiceChannel VoiceChannels} in the cache.
     * <br>In {@link Guild} cache, channels are sorted according to their position and id.
     *
     * <p>This copies the backing store into a list. This means every call
     * creates a new list with O(n) complexity. It is recommended to store this into
     * a local variable or use {@link #getVoiceChannelCache()} and use its more efficient
     * versions of handling these values.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return An immutable List of {@link VoiceChannel VoiceChannels}.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nullable
    default User getUserById(@Nonnull final String id)
    {
        return this.getUserCache().getElementById(id);
    }","/**
     * This returns the {@link net.dv8tion.jda.api.entities.User User} which has the same id as the one provided.
     * <br>If there is no visible user with an id that matches the provided one, this will return {@code null}.
     *
     * @param  id
     *         The id of the requested {@link net.dv8tion.jda.api.entities.User User}.
     *
     * @return Possibly-null {@link net.dv8tion.jda.api.entities.User User} with matching id.
     */",net.dv8tion.jda.api.sharding
"public int getAnswerId() {
        return this.data.id();
    }","/**
     * Gets the answer id of this poll answer count.
     *
     * @return the answer id of this poll answer count
     */",discord4j.core.object.entity.poll
"@Nonnull
    @CheckReturnValue
    default WebhookMessageEditAction<Message> editOriginalFormat(@Nonnull String format, @Nonnull Object... args)
    {
        Checks.notNull(format, ""Format String"");
        return editOriginal(String.format(format, args));
    }","/**
     * Edit the source message sent by this interaction.
     * <br>For {@link IMessageEditCallback#editComponents(Collection)} and {@link IMessageEditCallback#deferEdit()} this will be the message the components are attached to.
     * For {@link IReplyCallback#deferReply()} and {@link IReplyCallback#reply(String)} this will be the reply message instead.
     *
     * <p>This method will be delayed until the interaction is acknowledged.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_WEBHOOK UNKNOWN_WEBHOOK}
     *     <br>The webhook is no longer available, either it was deleted or in case of interactions it expired.</li>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The message for that id does not exist</li>
     * </ul>
     *
     * @param  format
     *         Format string for the message content
     * @param  args
     *         Format arguments for the content
     *
     * @throws IllegalArgumentException
     *         If the formatted string is null, empty, or longer than {@link Message#MAX_CONTENT_LENGTH}
     *
     * @return {@link WebhookMessageEditAction}
     */",net.dv8tion.jda.api.interactions
"public static ReactionEmoji of(ReactionData data) {
        return of(data.emoji());
    }","/**
     * Constructs a {@code ReactionEmoji} from a {@link ReactionData} representation.
     *
     * @param data the {@link ReactionData} wrapper.
     * @return a reaction emoji using the given information.
     */",discord4j.core.object.reaction
"public static RestEmoji create(RestClient restClient, Snowflake guildId, Snowflake id) {
        return new RestEmoji(restClient, guildId.asLong(), id.asLong());
    }","/**
     * Create a {@link RestEmoji} with the given parameters. This method does not perform any API request.
     *
     * @param restClient REST API resources
     * @param guildId the ID of the guild this emoji belongs to
     * @param id the ID of this member
     * @return a {@code RestEmoji} represented by the given parameters.
     */",discord4j.rest.entity
"public Mono<GuildTemplate> edit(GuildTemplateEditSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(
                () -> gateway.getRestClient().getTemplateService().modifyTemplate(guildId, getCode(), spec.asRequest()))
                .map(data -> new GuildTemplate(gateway, data));
    }","/**
     * Requests to edit this guild template.
     *
     * @param spec an immutable object that specifies how to edit this template
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link GuildTemplate}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
    @Override
    AutoModRuleManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag pattern.
     * You can specify a combination by using a bitwise OR concat of the flag constants.
     * <br>Example: {@code manager.reset(AutoModRuleManager.NAME, AutoModRuleManager.RESPONSE);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #ENABLED}</li>
     *     <li>{@link #RESPONSE}</li>
     *     <li>{@link #EXEMPT_ROLES}</li>
     *     <li>{@link #EXEMPT_CHANNELS}</li>
     *     <li>{@link #TRIGGER_METADATA}</li>
     * </ul>
     *
     * @param  fields
     *         Integer value containing the flags to reset.
     *
     * @return AutoModRuleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    default AutoModRuleManager setExemptChannels(@Nonnull GuildChannel... channels)
    {
        Checks.noneNull(channels, ""Channels"");
        return setExemptChannels(Arrays.asList(channels));
    }","/**
     * Set which channels can bypass this rule.
     *
     * <p>No messages sent in this channel will trigger the rule.
     *
     * @param  channels
     *         The channels to add (up to {@value AutoModRule#MAX_EXEMPT_CHANNELS} channels)
     *
     * @throws IllegalArgumentException
     *         If null is provided or the number of channels exceeds {@value AutoModRule#MAX_EXEMPT_CHANNELS}
     *
     * @return AutoModRuleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public Mono<Message> getReply() {
        return getInteractionResponse().getInitialResponse().map(data -> new Message(getClient(), data));
    }","/**
     * Returns the initial reply to this interaction.
     *
     * @return a {@link Mono} where, upon successful completion, emits the initial reply message. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.interaction
"@Nonnull
    static <E> CacheView<E> all(@Nonnull Supplier<? extends Stream<? extends CacheView<E>>> generator)
    {
        Checks.notNull(generator, ""Generator"");
        return new UnifiedCacheViewImpl<>(generator);
    }","/**
     * Creates a combined {@link net.dv8tion.jda.api.utils.cache.CacheView CacheView}
     * for all provided CacheView implementations. This allows to combine cache of multiple
     * JDA sessions or Guilds.
     *
     * @param  generator
     *         Stream generator of {@link net.dv8tion.jda.api.utils.cache.CacheView CacheView} implementations
     *
     * @param  <E>
     *         The target type of the projection
     *
     * @return Combined CacheView spanning over all provided implementation instances
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    EntitlementPaginationAction skuIds(@Nonnull Collection<String> skuIds);","/**
     * Filters {@link Entitlement Entitlement}s by their SKU id
     *
     * @param skuIds
     *        The SKU ids to filter by
     *
     * @throws java.lang.IllegalArgumentException
     *         If any of the provided {@code skuIds} are {@code null}, empty or invalid snowflakes
     *
     * @return The current {@link EntitlementPaginationAction EntitlementPaginationAction} for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.pagination
void setSensorElevation(int angle);,"/**
     * Set the sensor elevation.
     *
     * @param angle
     *            the angle
     */",jestures.core.view
"@Nonnull
    @CheckReturnValue
    default WebhookMessageEditAction<Message> editOriginalComponents(@Nonnull Collection<? extends LayoutComponent> components)
    {
        return editMessageComponentsById(""@original"", components);
    }","/**
     * Edit the source message sent by this interaction.
     * <br>For {@link IMessageEditCallback#editComponents(Collection)} and {@link IMessageEditCallback#deferEdit()} this will be the message the components are attached to.
     * For {@link IReplyCallback#deferReply()} and {@link IReplyCallback#reply(String)} this will be the reply message instead.
     *
     * <p>This method will be delayed until the interaction is acknowledged.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_WEBHOOK UNKNOWN_WEBHOOK}
     *     <br>The webhook is no longer available, either it was deleted or in case of interactions it expired.</li>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The message for that id does not exist</li>
     * </ul>
     *
     * @param  components
     *         The new component layouts for this message, such as {@link ActionRow ActionRows}
     *
     * @throws IllegalArgumentException
     *         If the provided components are null, or more than 5 layouts are provided
     *
     * @return {@link WebhookMessageEditAction}
     */",net.dv8tion.jda.api.interactions
"@Nullable
    DatagramPacket getNextPacket(boolean unused);","/**
     * Used to retrieve an audio packet to send to Discord. The packet provided is already converted to Opus and
     * encrypted, and as such is completely ready to be sent to Discord.
     *
     * <p><b>Note:</b> When the AudioSendHandler cannot or does not provide a new packet to send, this method will return null.
     *
     * @return Possibly-null {@link java.net.DatagramPacket DatagramPacket} containing an encoded and encrypted packet
     *         of audio data ready to be sent to discord.
     */",net.dv8tion.jda.api.audio.factory
"public Optional<UnknownChannel> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the {@link UnknownChannel} that was updated in this event, if present.
     * This may not be available if {@code UnknownChannels} are not stored.
     *
     * @return The old version of the updated {@link UnknownChannel}, if present.
     */",discord4j.core.event.domain.channel
"public Optional<String> getCustomId() {
        return data.customId().toOptional();
    }","/**
     * Gets the developer-defined custom id of the component.
     *
     * @return The custom id of the component.
     */",discord4j.core.object.command
"public Optional<String> getNewUsername() {
        return user.username().toOptional();
    }","/**
     * Gets the {@link User}'s new username, if present. This may not exist if the {@code user}'s username has not
     * been changed.
     *
     * @return The {@link User}'s new username, if present.
     */",discord4j.core.event.domain
"public Optional<Category> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the {@link Category} that has been updated in this event, if present.
     * This may not be available if {@code Categories} are not stored.
     *
     * @return The old version of the updated {@link Category}, if present.
     */",discord4j.core.event.domain.channel
"@Nullable
        public AudioChannel getChannel()
        {
            return channel;
        }","/**
         * The update voice channel
         *
         * @return The updated voice channel, or null to signal disconnect
         */",net.dv8tion.jda.api.hooks
"@Nonnull
    ThreadChannel getThreadChannel();","/**
     * The {@link ThreadChannel} this action fetches members for.
     *
     * @return The channel
     */",net.dv8tion.jda.api.requests.restaction.pagination
"@Nonnull
    @CheckReturnValue
    GuildManager setRequiredMFALevel(@Nonnull Guild.MFALevel level);","/**
     * Sets the {@link net.dv8tion.jda.api.entities.Guild.MFALevel MFA Level} of this {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  level
     *         The new MFA Level for this {@link net.dv8tion.jda.api.entities.Guild Guild}
     *
     * @throws IllegalArgumentException
     *         If the provided level is {@code null} or UNKNOWN
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public RoleTagsData getData() {
        return data;
    }","/**
     * Gets the data of the role tags.
     *
     * @return The data of the role tags.
     */",discord4j.core.object
"public void clear() {
        attempts.set(1);
        resetCount.set(0);
    }","/**
     * Clear the attempt count, treating further calls to {@link #next()} as brand new retry context.
     */",discord4j.common.retry
"protected void validateArgs(T const1, T const2,
                                T const3, T const4, T const5)
            throws IllegalArgumentException {}","/**
     * Validates values of initializers according to domain specific rules.
     *
     * @param const1  Constant #1.
     * @param const2  Constant #2.
     * @param const3  Constant #3.
     * @param const4  Constant #4.
     * @param const5  Constant #5.
     */",threegpp.milenage
UpdateRate getUpdateRate();,"/**
     * Get the update rate of the recognizer.
     *
     * @return the frame value
     */",jestures.core.recognition.gesturedata
"public static final Route GUILD_BAN_REMOVE = Route.delete(""/guilds/{guild.id}/bans/{user.id}"");","/**
     * Remove the ban for a user. Requires the 'BAN_MEMBERS' permissions. Returns a 204 empty response on success.
     * Fires a Guild Ban Remove Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#remove-guild-ban"">
     * https://discord.com/developers/docs/resources/guild#remove-guild-ban</a>
     */",discord4j.rest.route
"default String errorMessage() {
    return ""Invalid value, try again:"";
  }","/**
   * The invalid error message.
   *
   * @return the error message
   */",io.github.augustoravazoli.termenu.util
"public LegacyGuildTemplateCreateSpec setName(String name) {
        this.name = name;
        return this;
    }","/**
     * Sets the name of the template.
     *
     * @param name The name for the template.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static final Route GUILD_EMOJI_GET = Route.get(""/guilds/{guild.id}/emojis/{emoji.id}"");","/**
     * Returns an emoji object for the given guild and emoji IDs.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/emoji#get-guild-emoji"">
     * https://discord.com/developers/docs/resources/emoji#get-guild-emoji</a>
     */",discord4j.rest.route
"@Nonnull
    default IPermissionContainerUnion getChannel()
    {
        return getPermissionOverride().getChannel();
    }","/**
     * The {@link IPermissionContainer GuildChannel} this Manager's
     * {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride} is in.
     * <br>This is logically the same as calling {@code getPermissionOverride().getChannel()}
     *
     * @return The parent {@link GuildChannel GuildChannel}
     */",net.dv8tion.jda.api.managers
"public InviteService getInviteService() {
        return inviteService;
    }","/**
     * Access a low-level representation of the API endpoints for the Invite resource. It is recommended you use
     * methods like {@link #getInvite(String)}, or {@link RestInvite#create(RestClient, String)}.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"@Nonnull
    @CheckReturnValue
    MediaChannelManager setHideMediaDownloadOption(boolean hideOption);","/**
     * Sets whether to hide the download media option on this channel.
     *
     * @param  hideOption
     *         Whether to hide the download option
     *
     * @return ChannelManager for chaining convenience.
     *
     * @see    MediaChannel#isMediaDownloadHidden()
     */",net.dv8tion.jda.api.managers.channel.concrete
"public LegacyEmbedCreateSpec setAuthor(String name, @Nullable String url, @Nullable String iconUrl) {
        requestBuilder.author(EmbedAuthorData.builder()
                .name(name)
                .url(url == null ? Possible.absent() : Possible.of(Optional.of(url)))
                .iconUrl(iconUrl == null ? Possible.absent() : Possible.of(iconUrl))
                .build());
        return this;
    }","/**
     * Sets the author section of the embed.
     *
     * @param name The author name to display.
     * @param url A URL which can be clicked on through the author name.
     * @param iconUrl An icon URL displayed as the avatar next to the author name.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public LegacyAuditLogQuerySpec setLimit(final int limit) {
        request.put(""limit"", limit);
        return this;
    }","/**
     * Sets the query to return a max of entries.
     *
     * @param limit The limit of the audit log entries to filter by.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    SnowflakeCacheView<ForumChannel> getForumChannelCache();","/**
     * {@link SnowflakeCacheView SnowflakeCacheView} of {@link ForumChannel}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return {@link SnowflakeCacheView SnowflakeCacheView}
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    public static List<CommandData> fromList(@Nonnull Collection<? extends DataObject> collection)
    {
        Checks.noneNull(collection, ""CommandData"");
        return fromList(DataArray.fromCollection(collection));
    }","/**
     * Parses the provided serialization back into an CommandData instance.
     * <br>This is the reverse function for {@link CommandData#toData()}.
     *
     * @param  collection
     *         Collection of serialized {@link DataObject} representing the commands
     *
     * @throws net.dv8tion.jda.api.exceptions.ParsingException
     *         If the serialized object is missing required fields
     * @throws IllegalArgumentException
     *         If any of the values are failing the respective checks such as length
     *
     * @return The parsed CommandData instances, which can be further configured through setters
     *
     * @see    CommandData#fromData(DataObject)
     * @see    SlashCommandData#fromData(DataObject)
     */",net.dv8tion.jda.api.interactions.commands.build
"public static final Route CHANNEL_PERMISSIONS_EDIT = Route.put(""/channels/{channel.id}/permissions/{overwrite.id}"");","/**
     * Edit the channel permission overwrites for a user or role in a channel. Only usable for guild channels. Requires
     * the 'MANAGE_ROLES' permission. Returns a 204 empty response on success. For more information about permissions,
     * see permissions.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#edit-channel-permissions"">
     * https://discord.com/developers/docs/resources/channel#edit-channel-permissions</a>
     */",discord4j.rest.route
"public ReactionCountDetailsData getData() {
        return data;
    }","/**
     * Gets the data of the reaction.
     *
     * @return The data of the reaction.
     */",discord4j.core.object.reaction
"@Nullable
    AudioReceiveHandler getReceivingHandler();","/**
     * The currently set {@link net.dv8tion.jda.api.audio.AudioReceiveHandler AudioReceiveHandler}.
     * If there is no receiver currently set, this method will return {@code null}.
     *
     * @return The currently active {@link net.dv8tion.jda.api.audio.AudioReceiveHandler AudioReceiveHandler} or {@code null}.
     */",net.dv8tion.jda.api.managers
"@Nullable
    public String getNewSplashId()
    {
        return getNewValue();
    }","/**
     * The new splash id
     *
     * @return The new splash id, or null
     */",net.dv8tion.jda.api.events.guild.update
"public RestSticker restGuildSticker(Snowflake guildId, StickerData data) {
        return RestSticker.create(this, guildId,
            Snowflake.of(data.id()));
    }","/**
     * Requests to retrieve the guild sticker represented by the supplied ID and {@link StickerData}.
     *
     * @param guildId The ID of the guild.
     * @param data The data of the sticker.
     * @return A {@link RestSticker} as represented by the supplied parameters.
     */",discord4j.rest
"public Publisher<?> onEntitlementDelete(EntitlementDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an entitlement is deleted.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
        public String getToken()
        {
            return token;
        }","/**
         * The access token for the voice server connection
         *
         * @return The access token
         */",net.dv8tion.jda.api.hooks
String getFactionId();,"/**
     * Gets the faction ID of the player.
     *
     * @return FactionsID string
     */",com.massivecraft.factions
opc = bufferFactory.create(OPc);,"/**
     * Constructor
     *
     * @param OPc  Byte array containing previously calculated OPc value (OPc = OP竓髭[OP]K)
     * @param k  {@link javax.crypto.Cipher} representing the encryption key (K)
     * @param cConstants  Block of C constants (C1...C5)
     * @param rConstants  Block of R constants (R1...R5)
     * @param bufferFactory  {@link MilenageBufferFactory} object for creating {@link MilenageBuffer} instances.
     */",threegpp.milenage
"@Nonnull
    static Button link(@Nonnull String url, @Nonnull Emoji emoji)
    {
        Checks.notEmpty(url, ""URL"");
        Checks.notNull(emoji, ""Emoji"");
        Checks.notLonger(url, URL_MAX_LENGTH, ""URL"");
        return new ButtonImpl(null, """", ButtonStyle.LINK, url, false, emoji);
    }","/**
     * Creates a button with {@link ButtonStyle#LINK LINK} Style.
     * <br>The button is enabled and has no text label.
     * To use labels you can use {@code link(url, label).withEmoji(emoji)}
     *
     * <p>To disable the button you can use {@link #asDisabled()}.
     *
     * <p>Note that link buttons never send a {@link ButtonInteractionEvent ButtonInteractionEvent}.
     * These buttons only open a link for the user.
     *
     * @param  url
     *         The target URL for this button
     * @param  emoji
     *         The emoji to use as the button label
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any provided argument is null or empty.</li>
     *             <li>If the character limit for {@code url}, defined by {@link #URL_MAX_LENGTH} as {@value #URL_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
"static void setDefaultFailOnInvalidReply(boolean fail)
    {
        MessageCreateActionImpl.setDefaultFailOnInvalidReply(fail);
    }","/**
     * Sets the default value for {@link #failOnInvalidReply(boolean)}
     *
     * <p>Default: <b>false</b>
     *
     * @param fail
     *        True, to throw a exception if the referenced message does not exist
     */",net.dv8tion.jda.api.requests.restaction
"public static ClientActivity of(Activity.Type type, String name, @Nullable String url, @Nullable String state) {
        return new ClientActivity(ActivityUpdateRequest.builder()
                .type(type.getValue())
                .name(name)
                .url(Optional.ofNullable(url))
                .state(Optional.ofNullable(state))
                .build());
    }","/**
     * Creates an activity with the given type, name, url and state.
     *
     * @param type the type of the activity
     * @param name the name of the activity
     * @param url the url of the activity if the type is {@link Activity.Type#STREAMING STREAMING}
     * @param state the status if the type is {@link Activity.Type#CUSTOM CUSTOM}, or shown as additional data under an
     * activity's name for other types
     * @return an activity with the given type, name, url and state
     */",discord4j.core.object.presence
void shutdown(int shardId);,"/**
     * Shuts down the shard with the given id only.
     * <br>If there is no shard with the given id, this will do nothing.
     *
     * @param shardId
     *        The id of the shard that should be stopped
     */",net.dv8tion.jda.api.sharding
"public CompletableFuture<Void> insertDocument(final String collection, final Document document) {
        return getCollection(collection).thenApplyAsync(optionalMongoCollection -> {
            optionalMongoCollection.ifPresent(mongoCollection -> mongoCollection.insertOne(document));
            return null;
        });
    }","/**
     * Inserts a {@link Document} asynchronously into a MongoCollection
     * @param collection name of the collection
     */",io.github.heliumdioxid.database.mongo
PermissionSet getPermissions();,"/**
     * Return the effective permission set for this interaction member.
     *
     * @return a {@link PermissionSet} for this member
     */",discord4j.rest.interaction
"@Nullable
    @Override
    public T getOldValue()
    {
        return oldValue;
    }","/**
     * The {@link Channel Channel's} old value of the just updated field.
     *
     * @return The old value of the just updated field.
     */",net.dv8tion.jda.api.events.channel.update
"@Nonnull
    @CheckReturnValue
    M setDefaultSortOrder(@Nonnull SortOrder sortOrder);","/**
     * Sets the <b><u>default sort order</u></b> of the selected {@link IPostContainer}.
     *
     * @param  sortOrder
     *         The new {@link SortOrder}
     *
     * @throws IllegalArgumentException
     *         If null or {@link SortOrder#UNKNOWN} is provided
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    IPostContainer#getDefaultSortOrder()
     */",net.dv8tion.jda.api.managers.channel.attribute
"@Nonnull
    @CheckReturnValue
    default MessageEditCallbackAction editMessageFormat(@Nonnull String format, @Nonnull Object... args)
    {
        Checks.notNull(format, ""Format String"");
        return editMessage(String.format(format, args));
    }","/**
     * Acknowledgement of this interaction with a message update.
     * <br>You can use {@link #getHook()} to edit the message further.
     *
     * <p><b>You can only use deferEdit() or editMessage() once per interaction!</b> Use {@link #getHook()} for any additional updates.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     *
     * @param  format
     *         The format string for the new message content
     * @param  args
     *         The format arguments
     *
     * @throws IllegalArgumentException
     *         If the provided format is null
     *
     * @return {@link MessageEditCallbackAction} that can be used to further update the message
     */",net.dv8tion.jda.api.interactions.callbacks
"public Mono<Void> skipBody() {
        return responseMono.flatMap(ClientResponse::skipBody)
                .publishOn(reactorResources.getBlockingTaskScheduler());
    }","/**
     * Consume and release the response body then return and empty {@link Mono}.
     *
     * @return an empty {@link Mono} indicating response body consumption and release
     */",discord4j.rest.request
"Mono<Void> onStageInstanceCreate(int shardIndex, StageInstanceCreate dispatch);","/**
     * Updates the internal state of the store according to the given {@link StageInstanceCreate} gateway dispatch.
     * This will typically perform an insert operation on the related {@link StageInstanceData}.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"public LegacyMessageEditSpec setFlags(@Nullable Message.Flag... flags) {
        if (flags != null) {
            this.flags = Possible.of(Optional.of(Arrays.stream(flags)
                    .mapToInt(Message.Flag::getFlag)
                    .reduce(0, (left, right) -> left | right)));
        } else {
            this.flags = Possible.of(Optional.empty());
        }
        return this;
    }","/**
     * Sets the flags for the edited {@link Message}.
     *
     * @param flags An array of {@link Message.Flag} to set on the edited message.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Flux<ConnectionData> getUserConnections() {
        return exchange(Routes.USER_CONNECTIONS_GET.newRequest(), ConnectionData[].class)
                .flatMapMany(Flux::fromArray);
    }","/**
     * Return a list of {@link ConnectionData} objects. Requires this client was authorized to use the
     * {@link Scope#CONNECTIONS} scope. Uses {@link #withAuthorizedClient(DiscordWebRequest)} to retrieve and use the
     * Bearer token tied to this client.
     *
     * @return a Mono with user connections, or an error Mono in case any request fails
     */",discord4j.oauth2
void setIdle(boolean idle);,"/**
     * Sets whether this session should be marked as afk or not
     *
     * <p>This is relevant to client accounts to monitor
     * whether new messages should trigger mobile push-notifications.
     *
     * @param idle
     *        boolean
     */",net.dv8tion.jda.api.managers
byte [] toBytes();,"/**
     * Returns contents of underlying buffer as an array of bytes
     * @return The byte array representation of this
     */",threegpp.milenage
"@Nonnull
    static Button of(@Nonnull ButtonStyle style, @Nonnull String idOrUrl, @Nullable String label, @Nullable Emoji emoji)
    {
        if (label != null)
            return of(style, idOrUrl, label).withEmoji(emoji);
        else if (emoji != null)
            return of(style, idOrUrl, emoji);
        throw new IllegalArgumentException(""Cannot build a button without a label and emoji. At least one has to be provided as non-null."");
    }","/**
     * Create an enabled button with the provided {@link ButtonStyle style}, URL or ID, label and {@link Emoji}.
     *
     * <p>You can use {@link #asDisabled()} to disable it.
     *
     * <p>See {@link #link(String, String)} or {@link #primary(String, String)} for more details.
     *
     * @param  style
     *         The button style
     * @param  idOrUrl
     *         Either the ID or URL for this button
     * @param  label
     *         The text to display on the button
     * @param  emoji
     *         The emoji to use as the button label
     *
     * @throws IllegalArgumentException
     *         If any of the following scenarios occurs:
     *         <ul>
     *             <li>The style is null</li>
     *             <li>You provide a URL that is null, empty or longer than {@value #URL_MAX_LENGTH} characters, as defined by {@link #URL_MAX_LENGTH}
     *             or you provide an ID that is null, empty or longer than {@value #ID_MAX_LENGTH} characters, as defined by {@link #ID_MAX_LENGTH}.</li>
     *             <li>The {@code label} is non-null and longer than {@value #LABEL_MAX_LENGTH} characters, as defined by {@link #LABEL_MAX_LENGTH}.</li>
     *             <li>The {@code label} is null/empty, and the {@code emoji} is also null.</li>
     *         </ul>
     *
     * @return The button instance
     */",net.dv8tion.jda.api.interactions.components.buttons
"@Nonnull
        public String getTitle()
        {
            return title;
        }","/**
         * Returns the title
         *
         * @return the title
         */",net.dv8tion.jda.api.interactions.modals
Flux<ScheduledEvent> getScheduledEvents(Snowflake guildId);,"/**
     * Requests to retrieve the guild's scheduled events.
     *
     * @return A {@link Flux} that continually emits the guild's {@link ScheduledEvent events}. If an error is received,
     * it is emitted through the {@code Flux}.
     */",discord4j.core.retriever
"public static final Route SELF_VOICE_STATE_MODIFY = Route.patch(""/guilds/{guild.id}/voice-states/@me"");","/**
     * Updates the current user's voice state.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#update-self-voice-state"">
     * https://discord.com/developers/docs/resources/guild#update-self-voice-state</a>
     */",discord4j.rest.route
"public List<AutoModRule> getAutoModRules() {
        return autoModRules;
    }","/**
     * Get the auto mod rules that are involved in the entries of this portion of the audit log.
     *
     * @return The auto mod rules that are involved in the entries of this portion of the audit log.
     */",discord4j.core.object.audit
boolean push(T request);,"/**
     * Pushes a new request to the queue.
     *
     * @param request the request to push.
     * @return {@code true} if the request was submitted successfully, {@code false} otherwise
     */",discord4j.rest.request
"@Nonnull
    public Guild.ExplicitContentLevel getOldLevel()
    {
        return getOldValue();
    }","/**
     * The old {@link net.dv8tion.jda.api.entities.Guild.ExplicitContentLevel ExplicitContentLevel} for the
     * {@link net.dv8tion.jda.api.entities.Guild Guild} prior to this event.
     *
     * @return The old explicit content level
     */",net.dv8tion.jda.api.events.guild.update
"public static final Route GROUP_DM_CREATE = Route.post(""/users/@me/channels"");","/**
     * Create a new group DM channel with multiple users. Returns a DM channel object.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/user#create-group-dm"">
     * https://discord.com/developers/docs/resources/user#create-group-dm</a>
     */",discord4j.rest.route
"public boolean isDisabled()
        {
            return disabled;
        }","/**
         * Whether the menu is disabled
         *
         * @return True if this menu is disabled
         */",net.dv8tion.jda.api.interactions.components.selections
"@SuppressWarnings(""unchecked"")
    @Nullable
    public <T> T getNewValue()
    {
        return (T) newValue;
    }","/**
     * The updated value for the field specified by {@link #getKey()}.
     *
     * @param  <T>
     *         The expected generic type for this value.
     *         <br>This will be used to cast the value.
     *
     * @throws java.lang.ClassCastException
     *         If the type cast to the generic type fails
     *
     * @return The new value
     */",net.dv8tion.jda.api.audit
"public LegacyGuildPruneCountSpec addRole(Snowflake roleId) {
        map.add(""include_roles"", roleId.asString());
        return this;
    }","/**
     * Include a role in the prune count request. By default, prune will not remove users with roles, therefore this
     * method can be used to include such users.
     *
     * @param roleId the role ID to include
     * @return this spec
     */",discord4j.core.spec.legacy
"public static final Route GUILD_MEMBER_ROLE_REMOVE = Route.delete(""/guilds/{guild.id}/members/{user.id}/roles/{role.id}"");","/**
     * Removes a role from a guild member. Requires the 'MANAGE_ROLES' permission. Returns a 204 empty response on
     * success. Fires a Guild Member Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#remove-guild-member-role"">
     * https://discord.com/developers/docs/resources/guild#remove-guild-member-role</a>
     */",discord4j.rest.route
"public Instant getUpdatedAt() {
        return DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(data.updatedAt(), Instant::from);
    }","/**
     * Gets when the template was last updated.
     *
     * @return When the template was last updated.
     */",discord4j.core.object
void setGuiGestureLenght(GestureLength gestureLength);,"/**
     * Set the gesture length.
     * 
     * @param gestureLength
     *            the gesture length
     */",recorder.view
"public LegacyWebhookExecuteSpec addFile(String fileName, InputStream file) {
        if (this.files == null) {
            this.files = new ArrayList<>(1); // most likely only one file.
        }
        this.files.add(Tuples.of(fileName, file));
        return this;
    }","/**
     * Adds a file as attachment to the created {@link discord4j.core.object.entity.Message}.
     *
     * @param fileName The filename used in the file being sent.
     * @param file The file contents.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public LegacyGuildEmojiCreateSpec setName(String name) {
        this.name = name;
        return this;
    }","/**
     * Sets the name for the created {@link GuildEmoji}.
     *
     * @param name The name for the emoji.
     * @return This spec.
     */",discord4j.core.spec.legacy
Faction getFaction();,"/**
     * gets the faction of a FPlayer.
     *
     * @return Faction of the FPlayer.
     */",com.massivecraft.factions
WebSocketClient client = jda.getClient();,"/**
     * Used to update the internal state of the voice request. When a connection
     * was successfully established JDA will stop sending requests for the initial connect.
     * <br>This is done to retry the voice updates in case of a partial service failure.
     *
     * <p>Should be called when:
     * <ol>
     *     <li>Receiving a Voice State Update for the current account and we were previously connected (moved or disconnected)</li>
     *     <li>Receiving a Voice Server Update (initial connect or region change)</li>
     * </ol>
     *
     * Note that the voice state update will always be received prior to a voice server update.
     * <br>The internal dispatch handlers already call this when needed, a library end-user never needs to call this method.
     *
     * @param guild
     *        The guild to update the state for
     * @param channel
     *        The new channel, or null to signal disconnect
     */",net.dv8tion.jda.internal.managers
"public PrivateChannel(final GatewayDiscordClient gateway, final ChannelData data) {
        super(gateway, data);
    }","/**
     * Constructs an {@code PrivateChannel} with an associated {@link GatewayDiscordClient} and Discord data.
     *
     * @param gateway The {@link GatewayDiscordClient} associated to this object, must be non-null.
     * @param data The raw data as represented by Discord, must be non-null.
     */",discord4j.core.object.entity.channel
"default String getName() {
        return getData().name().toOptional()
                .orElseThrow(IllegalStateException::new);
    }","/**
     * Gets the name of the channel.
     *
     * @return The name of the channel.
     */",discord4j.core.object.entity.channel
"@Nonnull
    public Guild.BoostTier getNewBoostTier()
    {
        return getNewValue();
    }","/**
     * The new {@link net.dv8tion.jda.api.entities.Guild.BoostTier}
     *
     * @return The new BoostTier
     */",net.dv8tion.jda.api.events.guild.update
"public ForumTagData getData() {
        return data;
    }","/**
     * Gets the associated {@link ForumTagData} wrapped by this object
     *
     * @return the wrapped {@link ForumTagData} object
     */",discord4j.core.object.entity
"public boolean isRequired()
        {
            return required;
        }","/**
         * Whether this TextInput is required.
         * <br>If this is True, the user must populate this TextInput field before they can submit the Modal.
         *
         * @return True if this TextInput is required
         * 
         * @see    TextInput#isRequired()
         */",net.dv8tion.jda.api.interactions.components.text
"public Builder readerStrategy(ReaderStrategy<?> readerStrategy) {
            readerStrategies.add(readerStrategy);
            return this;
        }","/**
         * Add a new reader strategy for response body conversion.
         *
         * @param readerStrategy the strategy to add
         * @return this builder, for chaining
         */",discord4j.rest.http
"public JacksonResources getJacksonResources() {
        return jacksonResources;
    }","/**
     * Return Jackson resources to transform objects.
     *
     * @return a configured {@link JacksonResources} instance
     */",discord4j.rest
"public LegacyGuildTemplateCreateSpec setDescription(String description) {
        this.description = Possible.of(Optional.of(description));
        return this;
    }","/**
     * Sets the description of the template.
     *
     * @param description The description for the template.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    public Set<String> getOldFeatures()
    {
        return getOldValue();
    }","/**
     * The old Set of features before the {@link net.dv8tion.jda.api.entities.Guild Guild} update.
     *
     * @return Never-null, unmodifiable Set of the old features
     */",net.dv8tion.jda.api.events.guild.update
boolean foundInString(String test);,"/**
     * Gets if the Tag can be found in the given String.
     *
     * @param test string to test
     * @return true if the tag is found in this string
     */",com.massivecraft.factions.tag
"public Mono<GuildScheduledEventData> getScheduledEvent(Snowflake eventId, @Nullable Boolean withUserCount) {
        Map<String, Object> queryParams = new HashMap<>();
        Optional.ofNullable(withUserCount).ifPresent(value -> queryParams.put(""with_user_count"", value));
        return restClient.getGuildService().getScheduledEvent(id, eventId.asLong(), queryParams);
    }","/**
     * Requests to retrieve the scheduled event under this guild.
     *
     * @param eventId The ID of the event
     * @param withUserCount Whether to optionally include the number of subscribed users
     * @return A {@link Mono} where, upon successful completion, emits the {@link GuildScheduledEventData}. If an
     *  error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"public static CountVoiceStatesInChannelAction countVoiceStatesInChannel(long guildId, long channelId) {
        return new CountVoiceStatesInChannelAction(guildId, channelId);
    }","/**
     * Creates an action to count the number of voice states present in a store for the given guild ID and channel ID.
     *
     * @param guildId the guild ID
     * @param channelId the channel ID
     * @return a new {@link CountMessagesInChannelAction}
     */",discord4j.common.store.action.read
"@Override
    public double getMaxDTWThreashold() {
        return this.maxDTWThreashold;
    }","/**
     * Get the threshold for gesture maximum acceptance.
     * <p>
     * Only gestures, that have a feature vector distance (by DTW) greater than minThreashold, are accepted.
     *
     *
     * @return represents the maximum distance above which a feature vector is accepted
     */",jestures.core.recognition.gesturedata
"@Nonnull
    Category getCategory();","/**
     * Gets the {@link net.dv8tion.jda.api.entities.channel.concrete.Category Category}
     * controlled by this CategoryOrderAction.
     *
     * @return The {@link net.dv8tion.jda.api.entities.channel.concrete.Category Category}
     *         of this CategoryOrderAction.
     */",net.dv8tion.jda.api.requests.restaction.order
"@Nonnull
        ImageProxy getEffectiveAvatar();","/**
         * Returns an {@link ImageProxy} for this user's effective avatar image.
         *
         * @return Never-null {@link ImageProxy} of this user's effective avatar image
         *
         * @see    #getEffectiveAvatarUrl()
         */",net.dv8tion.jda.api.entities
"@Nullable
    default TeamMember getMemberById(@Nonnull String userId)
    {
        return getMemberById(MiscUtil.parseSnowflake(userId));
    }","/**
     * Retrieves the {@link net.dv8tion.jda.api.entities.TeamMember TeamMember} instance
     * for the provided user id. If the user is not a member of this team, null is returned.
     *
     * @param  userId
     *         The user id for the team member
     *
     * @throws java.lang.IllegalArgumentException
     *         If provided with null
     *
     * @return The {@link net.dv8tion.jda.api.entities.TeamMember TeamMember} for the user or null
     */",net.dv8tion.jda.api.entities
"public LegacyGuildMemberEditSpec setDeafen(boolean deaf) {
        builder.deaf(deaf);
        return this;
    }","/**
     * Sets whether the targeted {@link Member} is deafened in voice channels, if they are connected to voice. Requires the
     * {@link Permission#DEAFEN_MEMBERS} permission.
     *
     * @param deaf {@code true} if the {@link Member} should be deafened, {@code false} otherwise.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    WebhookAction setName(@Nonnull String name);","/**
     * Sets the <b>Name</b> for the custom Webhook User
     *
     * @param  name
     *         A not-null String name for the new Webhook user.
     *
     * @throws IllegalArgumentException
     *         If the specified name is not in the range of 2-100.
     *
     * @return The current WebhookAction for chaining convenience.
     */",net.dv8tion.jda.api.requests.restaction
"public static GuildEmojisUpdateAction guildEmojisUpdate(int shardIndex, GuildEmojisUpdate dispatch) {
        return new GuildEmojisUpdateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildEmojisUpdate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildEmojisUpdateAction}
     */",discord4j.common.store.action.gateway
"public int getUses() {
        return uses;
    }","/**
     * Gets the number of times this invite has been used (always will be 0).
     *
     * @return The number of times this invite has been used (always will be 0).
     */",discord4j.core.event.domain
int getMatchNumber();,"/**
     * Get the minimum number of gesture that have to match the template to get a gesture recognized.
     *
     * @return the number of templates.
     */",jestures.core.recognition.gesturedata
"@Nonnull
    static AntiSpamTriggerConfig antiSpam()
    {
        return new AntiSpamTriggerConfig();
    }","/**
     * Trigger on spam content in messages (classified by Discord magic).
     *
     * @return {@link AntiSpamTriggerConfig}
     */",net.dv8tion.jda.api.entities.automod.build
"public Snowflake getCreatorId() {
        return Snowflake.of(data.creatorId());
    }","/**
     * Gets the ID of the user who created the template.
     *
     * @return The ID of the user who created the template.
     */",discord4j.core.object
"@Nonnull
    default Guild getGuild()
    {
        return getRole().getGuild();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Guild Guild} this Manager's
     * {@link net.dv8tion.jda.api.entities.Role Role} is in.
     * <br>This is logically the same as calling {@code getRole().getGuild()}
     *
     * @return The parent {@link net.dv8tion.jda.api.entities.Guild Guild}
     */",net.dv8tion.jda.api.managers
"@Nullable
    DataObject getRawData();","/**
     * The passthrough data that this event was serialized from. This data might be null in rare situations, for example, if the event came from a rest action.
     * <br>This provides the full gateway message payload, including sequence, event name and dispatch type.
     * For details, read the official <a href=""https://discord.dev/topics/gateway"" target=""_blank"">Discord Documentation</a>.
     *
     * @throws IllegalStateException
     *         If event passthrough was not enabled, see {@link net.dv8tion.jda.api.JDABuilder#setEventPassthrough(boolean) JDABuilder#setEventPassthrough(boolean)}
     *
     * @return The corresponding {@link DataObject}
     */",net.dv8tion.jda.api.events
"@Nonnull
    public Function<? super RestRateLimiter.RateLimitConfig, ? extends RestRateLimiter> getRateLimiterFactory()
    {
        return rateLimiter;
    }","/**
     * The configured rate-limiter implementation.
     *
     * @return The rate-limiter
     */",net.dv8tion.jda.api.requests
"public LegacyGuildPruneSpec addRole(Snowflake roleId) {
        map.add(""include_roles"", roleId.asString());
        return this;
    }","/**
     * Include a role in the prune request. By default, prune will not remove users with roles, therefore this method
     * can be used to include such users.
     *
     * @param roleId the role ID to include for prune
     * @return this spec
     */",discord4j.core.spec.legacy
"public Builder setMessageBackend(@Nullable StorageBackend messageBackend) {
            this.messageBackend = messageBackend;
            return this;
        }","/**
         * Sets the {@link StorageBackend} to use for message caching. By default it uses a backend based on Caffeine
         * that keeps only the last 1000 messages.
         *
         * @param messageBackend the {@link StorageBackend}, or null to use default
         * @return this builder
         */",discord4j.common.store.impl
"public static PollAnswer of(String text, ReactionEmoji emoji) {
        return new PollAnswer(PollAnswerObject.builder().data(PollMediaObject.builder().text(text).emoji(emoji.asEmojiData()).build()).build());
    }","/**
     * Creates a poll answer with the given emoji.
     *
     * @param emoji the emoji of the poll answer
     * @return the poll answer
     */",discord4j.core.object.entity.poll
"@Nonnull
    public OffsetDateTime getOldStartTime()
    {
        return getOldValue();
    }","/**
     * The old {@link ScheduledEvent#getStartTime() start time}.
     *
     * @return The old start time
     */",net.dv8tion.jda.api.events.guild.scheduledevent.update
"public Snowflake getApplicationId() {
        return permissions.getApplicationId();
    }","/**
     * Gets the ID of the application the command belongs to.
     *
     * @return th ID of the application the command belongs to
     */",discord4j.core.event.domain.command
"@Nonnull
    UnicodeEmoji asUnicode();","/**
     * Returns the underlying {@link UnicodeEmoji} if applicable.
     *
     * @throws IllegalStateException
     *         If this is not a {@link UnicodeEmoji}
     *
     * @return The {@link UnicodeEmoji}
     */",net.dv8tion.jda.api.entities.emoji
"Set<Integer> byManagerIdAndProjectId = this.rep.findByManagerIdAndProjectId(managerId, projectId);","/**
	 * @param departmentId
	 * @return a list of employees
	 */",com.pfa.app.service.impl
"public static InvalidateShardAction invalidateShard(int shardIndex, InvalidationCause cause) {
        return new InvalidateShardAction(shardIndex, cause);
    }","/**
     * Creates an action to execute when a shard should be invalidated.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param cause      the cause of the invalidation
     * @return a new {@link InvalidateShardAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    default Region getRegion()
    {
        return getRegionRaw() == null ? Region.AUTOMATIC : Region.fromKey(getRegionRaw());
    }","/**
     * The {@link Region} of this channel.
     * <br>This will return {@link Region#AUTOMATIC} if the region of this channel is set to Automatic.
     *
     * @return the {@link Region} of this channel.
     */",net.dv8tion.jda.api.entities.channel.middleman
"Mono<Message> getMessageById(Snowflake channelId, Snowflake messageId);","/**
     * Requests to retrieve the message represented by the supplied IDs.
     *
     * @param channelId The ID of the channel.
     * @param messageId The ID of the message.
     * @return A {@link Mono} where, upon successful completion, emits the {@link Message} as represented by the
     *         supplied IDs. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
boolean hasPermission(@Nonnull Permission... permissions);,"/**
     * Checks whether or not this PermissionHolder has the given {@link net.dv8tion.jda.api.Permission Permissions} in the Guild.
     *
     * @param  permissions
     *         Permissions to check for.
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return True, if all of the specified Permissions are granted to this PermissionHolder.
     */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    CategoryOrderAction modifyTextChannelPositions();","/**
     * Modifies the positional order of this Category's nested {@link #getTextChannels() TextChannels} and {@link #getNewsChannels() NewsChannels}.
     * <br>This uses an extension of {@link ChannelOrderAction ChannelOrderAction}
     * specialized for ordering the nested {@link TextChannel TextChannels}
     * and {@link NewsChannel NewsChannels} of this {@link Category Category}.
     * <br>Like {@link ChannelOrderAction}, the returned {@link CategoryOrderAction CategoryOrderAction}
     * can be used to move TextChannels/NewsChannels {@link OrderAction#moveUp(int) up},
     * {@link OrderAction#moveDown(int) down}, or
     * {@link OrderAction#moveTo(int) to} a specific position.
     * <br>This uses <b>ascending</b> order with a 0 based index.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNNKOWN_CHANNEL}
     *     <br>One of the channels has been deleted before the completion of the task.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The currently logged in account was removed from the Guild.</li>
     * </ul>
     *
     * @return A {@link CategoryOrderAction CategoryOrderAction} for
     *         ordering the Category's {@link TextChannel TextChannels}
     *         and {@link NewsChannel NewsChannels}.
     */",net.dv8tion.jda.api.entities.channel.concrete
"static TimeoutEmissionStrategy timeoutError(Duration duration) {
        return new TimeoutEmissionStrategy(Duration.ofMillis(10).toNanos(), duration.toNanos(), true);
    }","/**
     * Create an {@link EmissionStrategy} that will retry overflowing and non-serialized emissions until a given
     * {@code duration} and <strong>error</strong> values upon timeout.
     *
     * @param duration the {@link Duration} to wait until elements are dropped
     * @return a strategy with an error on timeout behavior
     */",discord4j.common.sinks
"@Nullable
    public OffsetDateTime getOldTimeBoosted()
    {
        return getOldValue();
    }","/**
     * The old boost time
     *
     * @return The old boost time
     */",net.dv8tion.jda.api.events.guild.member.update
"@Nonnull
    AutoModResponse getResponse();","/**
     * The {@link AutoModResponse} that has been triggered by this execution.
     *
     * @return The {@link AutoModResponse}
     */",net.dv8tion.jda.api.entities.automod
"@Nonnull
    public ChannelType getType()
    {
        return this.channelType;
    }","/**
     * The {@link ChannelType ChannelType} for this TemplateChannel
     *
     * @return The channel type
     */",net.dv8tion.jda.api.entities.templates
"public static long getLong(@Nonnull DataArray root, @Nonnull String path, long fallback)
    {
        Long longValue = get(root, path, (obj, key) -> obj.getLong(key, fallback), (arr, index) -> arr.getLong(index, fallback));
        return longValue == null ? fallback : longValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     * <br>If the resulting value is a string, this will parse the string using {@link Long#parseLong(String)}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The long value at the given path, returning the fallback if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    @CheckReturnValue
    default WebhookMessageEditAction<Message> editOriginal(@Nonnull MessageEditData message)
    {
        return editMessageById(""@original"", message);
    }","/**
     * Edit the source message sent by this interaction.
     * <br>For {@link IMessageEditCallback#editComponents(Collection)} and {@link IMessageEditCallback#deferEdit()} this will be the message the components are attached to.
     * For {@link IReplyCallback#deferReply()} and {@link IReplyCallback#reply(String)} this will be the reply message instead.
     *
     * <p>This method will be delayed until the interaction is acknowledged.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_WEBHOOK UNKNOWN_WEBHOOK}
     *     <br>The webhook is no longer available, either it was deleted or in case of interactions it expired.</li>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The message for that id does not exist</li>
     * </ul>
     *
     * @param  message
     *         The new message to replace the existing message with
     *
     * @throws IllegalArgumentException
     *         If the provided message is null
     *
     * @return {@link WebhookMessageEditAction}
     */",net.dv8tion.jda.api.interactions
"public LegacyGuildTemplateEditSpec setDescription(String description) {
        this.description = Possible.of(Optional.of(description));
        return this;
    }","/**
     * Sets the description of the template.
     *
     * @param description The description for the template.
     * @return This spec.
     */",discord4j.core.spec.legacy
"Mono<StageInstanceData> onStageInstanceDelete(int shardIndex, StageInstanceDelete dispatch);","/**
     * Updates the internal state of the store according to the given {@link StageInstanceCreate} gateway dispatch.
     * This will typically perform an delete operation on the related {@link StageInstanceData} that is already present
     * in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, returning the old state of the
     * {@link StageInstanceData} before the delete
     */",discord4j.common.store.api.layout
"@Nonnull
    public JDA.Status getNewStatus()
    {
        return newStatus;
    }","/**
     * The status that we changed to
     *
     * @return The new status
     */",net.dv8tion.jda.api.events
"public long getMessageIdLong()
    {
        return messageId;
    }","/**
     * The id for this message
     *
     * @return The id for this message
     */",net.dv8tion.jda.api.events.message
"@Nonnull
    @CheckReturnValue
    TemplateManager setDescription(@Nullable String description);","/**
     * Sets the description of this {@link Template Template}.
     *
     * @param  description
     *         The new description for this {@link Template Template}
     *
     * @throws IllegalArgumentException
     *         If the provided description is not between 0-120 characters long
     *
     * @return TemplateManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    public OnlineStatus getOldOnlineStatus()
    {
        return getOldValue();
    }","/**
     * The old status
     *
     * @return The old status
     */",net.dv8tion.jda.api.events.user.update
"@Nonnull
    MessageCreateAction setNonce(@Nullable String nonce);","/**
     * Unique string/number used to identify messages using {@link Message#getNonce()} in {@link MessageReceivedEvent}.
     *
     * <p>The nonce can be used for deduping messages and marking them for use with {@link MessageReceivedEvent}.
     * JDA will automatically generate a unique nonce per message, it is not necessary to do this manually.
     *
     * @param  nonce
     *         The nonce string to use, must be unique per message.
     *         A unique nonce will be generated automatically if this is null.
     *
     * @throws IllegalArgumentException
     *         If the provided nonce is longer than {@value Message#MAX_NONCE_LENGTH} characters
     *
     * @return The same instance for chaining
     *
     * @see    <a href=""https://en.wikipedia.org/wiki/Cryptographic_nonce"" target=""_blank"">Cryptographic Nonce - Wikipedia</a>
     */",net.dv8tion.jda.api.requests.restaction
"public Mono<Boolean> isStageLive() {
        return getClient()
                .getRestClient()
                .getStageInstanceService()
                .getStageInstance(this.getId().asLong())
                .onErrorResume(ClientException.isStatusCode(404), e -> Mono.empty())
                .hasElement();
    }","/**
     * Requests to retrieve if there is a {@link StageInstance} for this channel.
     *
     * @return A {@link Mono} where, upon successful completion, emits {@code true} if this stage channel
     *         is associated with a {@link StageInstance}, {@code false} otherwise. If an error is received,
     *         it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
Flux<MemberData> getMembers();,"/**
     * Retrieves data for all members present in the store.
     *
     * @return A {@link Flux} emitting the members, or empty if none is present
     */",discord4j.common.store.api.layout
"@Nonnull
    @CheckReturnValue
    ForumChannelManager setDefaultLayout(@Nonnull ForumChannel.Layout layout);","/**
     * Sets the <b><u>default layout</u></b> of the selected {@link ForumChannel}.
     *
     * @param  layout
     *         The new default layout.
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    ForumChannel#getDefaultLayout()
     */",net.dv8tion.jda.api.managers.channel.concrete
"public LegacyAuditLogQuerySpec setBefore(final Snowflake beforeId) {
        request.put(""before"", beforeId.asString());
        return this;
    }","/**
     * Sets the query to return entries before a certain entry id.
     *
     * @param beforeId The {@code Snowflake} of the audit log id to filter by before of.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public LegacyUserEditSpec setAvatar(@Nullable Image avatar) {
        this.avatar = avatar == null ? Possible.absent() : Possible.of(avatar.getDataUri());
        return this;
    }","/**
     * Sets the user's avatar.
     *
     * @param avatar The user's avatar.
     * @return This spec.
     */",discord4j.core.spec.legacy
void clearListView();,"/**
     * Clear the view and clear the featurevectors.
     */",recorder.view
"public DiscordWebRequest unauthenticated() {
        this.authorizationScheme = AuthorizationScheme.NONE;
        this.authorizationValue = null;
        return this;
    }","/**
     * Use no authorization mechanism with this request.
     *
     * @return this request
     */",discord4j.rest.request
void onConnectionError(@Nonnull ConnectionStatus status);,"/**
     * This method is used to indicate a connection error to JDA so that the connection can be properly shutdown.
     * <br>This is useful if, during setup or operation, an unrecoverable error is encountered.
     *
     * @param  status
     *         The {@link net.dv8tion.jda.api.audio.hooks.ConnectionStatus ConnectionStatus} being reported to JDA
     *         indicating an error with connection.
     */",net.dv8tion.jda.api.audio.factory
"public static GuildScheduledEventUserAddAction guildScheduledEventUserAdd(int shardIndex,
                                                                              GuildScheduledEventUserAdd dispatch) {
        return new GuildScheduledEventUserAddAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildScheduledEventUserAdd} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildScheduledEventUserAddAction}
     */",discord4j.common.store.action.gateway
"@Nonnull
    @Unmodifiable
    public List<TemplateRole> getRoles()
    {
        return this.roles;
    }","/**
     * Gets all {@link net.dv8tion.jda.api.entities.templates.TemplateRole Roles} in this {@link net.dv8tion.jda.api.entities.templates.TemplateGuild Guild}.
     *
     * @return An immutable List of {@link net.dv8tion.jda.api.entities.templates.TemplateRole Roles}.
     */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    @CheckReturnValue
    default RestAction<Void> clearReactionsById(long messageId, @Nonnull Emoji emoji)
    {
        return clearReactionsById(Long.toUnsignedString(messageId), emoji);
    }","/**
     * Removes all reactions for the specified emoji.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The currently logged in account lost access to the channel by either being removed from the guild
     *         or losing the {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI UNKNOWN_EMOJI}
     *     <br>The provided {@link Emoji} was deleted or doesn't exist.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The message was deleted.</li>
     * </ul>
     *
     * @param  messageId
     *         The id for the target message
     * @param  emoji
     *         The {@link Emoji} to remove reactions for
     *
     * @throws InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MESSAGE_MANAGE} in the channel
     * @throws IllegalArgumentException
     *         If provided with null
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.entities.channel.middleman
"@Nonnull
    @CheckReturnValue
    default PermissionOverrideAction clear(@Nonnull Collection<Permission> permissions)
    {
        return clear(Permission.getRaw(permissions));
    }","/**
     * Clears the provided {@link net.dv8tion.jda.api.Permission Permissions} bits
     * from the {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     * <br>This will cause the provided Permissions to be inherited
     *
     * @param  permissions
     *         The permissions to clear from the {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     * @throws IllegalArgumentException
     *         If any provided argument is null
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @CheckReturnValue
    M sync(@Nonnull IPermissionContainer syncSource);","/**
     * Syncs all {@link PermissionOverride PermissionOverrides} of this GuildChannel with
     * the given ({@link GuildChannel GuildChannel}).
     *
     * <p>After this operation, all {@link PermissionOverride PermissionOverrides}
     * will be exactly the same as the ones from the syncSource.
     * <br><b>That means that all current PermissionOverrides are lost!</b>
     *
     * <p>This will only work for Channels of the same {@link Guild Guild}!.
     *
     * @param   syncSource
     *          The GuildChannel from where all PermissionOverrides should be copied from
     *
     * @throws  IllegalArgumentException
     *          If the given snySource is {@code null}, this GuildChannel or from a different Guild.
     * @throws  net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *          If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *          in this channel or {@link IPermissionHolder#canSync(IPermissionContainer, IPermissionContainer)} is false for the self member.
     *
     * @return  ChannelManager for chaining convenience
     *
     * @see     <a href=""https://discord.com/developers/docs/topics/permissions#permission-syncing"" target=""_blank"">Discord Documentation - Permission Syncing</a>
     */",net.dv8tion.jda.api.managers.channel.attribute
"@Nonnull
    @CheckReturnValue
    default ThreadChannelAction createThreadChannel(@Nonnull String name, @Nonnull String messageId)
    {
        return createThreadChannel(name, MiscUtil.parseSnowflake(messageId));
    }","/**
     * Creates a new, public {@link ThreadChannel} with the parent channel being this {@link IThreadContainer}.
     * <br>The starting message will copy the message for the provided id, and will be of type {@link MessageType#THREAD_STARTER_MESSAGE MessageType.THREAD_STARTER_MESSAGE}.
     *
     * <p>The resulting {@link ThreadChannel ThreadChannel} may be one of:
     * <ul>
     *     <li>{@link ChannelType#GUILD_PUBLIC_THREAD}</li>
     *     <li>{@link ChannelType#GUILD_NEWS_THREAD}</li>
     * </ul>
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_CHANNELS MAX_CHANNELS}
     *     <br>The maximum number of channels were exceeded</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#THREAD_WITH_THIS_MESSAGE_ALREADY_EXISTS}
     *     <br>This message has already been used to create a thread</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_ACTIVE_THREADS}
     *     <br>The maximum number of active threads has been reached, and no more may be created.</li>
     * </ul>
     *
     * @param  name
     *         The name of the new ThreadChannel (up to {@value Channel#MAX_NAME_LENGTH} characters)
     * @param  messageId
     *         The ID of the message from which this ThreadChannel will be spawned.
     *
     * @throws IllegalArgumentException
     *         If the provided name is null, blank, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters.
     *         Or the message id is not a valid snowflake.
     * @throws UnsupportedOperationException
     *         If this is a forum channel.
     *         You must use {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel#createForumPost(String, MessageCreateData) createForumPost(...)} instead.
     * @throws InsufficientPermissionException
     *         If the bot does not have {@link net.dv8tion.jda.api.Permission#CREATE_PUBLIC_THREADS Permission.CREATE_PUBLIC_THREADS} in this channel
     *
     * @return A specific {@link ThreadChannelAction} that may be used to configure the new ThreadChannel before its creation.
     */",net.dv8tion.jda.api.entities.channel.attribute
boolean isStopped();,"/**
     * Whether the queue has stopped accepting new requests.
     *
     * @return True, if the queue is stopped
     */",net.dv8tion.jda.api.requests
"@Nonnull
    ScheduledEventAction setName(@Nonnull String name);","/**
     * Sets the name for the new {@link ScheduledEvent ScheduledEvent}.
     *
     * @param  name
     *         The name for the new {@link ScheduledEvent ScheduledEvent}
     *
     * @throws java.lang.IllegalArgumentException
     *         If the new name is blank, empty, {@code null}, or contains more than {@value ScheduledEvent#MAX_NAME_LENGTH}
     *         characters
     *
     * @return The current ScheduledEventAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public Optional<Snowflake> getGuildId() {
        return this.guildId;
    }","/**
     * Get the {@link Snowflake} ID of the guild where the poll is.
     *
     * @return An {@link Optional} containing the ID of the guild where the poll is, or {@link Optional#empty()} if the
     * poll is in a DM.
     */",discord4j.core.event.domain.poll
"public static ClientActivity of(Activity.Type type, String name, @Nullable String url) {
        return of(type, name, url, null);
    }","/**
     * Creates an activity with the given type, name, and url.
     *
     * @param type the type of the activity
     * @param name the name of the activity
     * @param url the url of the activity (only valid for {@link Activity.Type#STREAMING streaming} activities)
     * @return an activity with the given type, name, and url
     */",discord4j.core.object.presence
"public static int getUnsignedInt(@Nonnull DataObject root, @Nonnull String path, int fallback)
    {
        Integer integer = get(root, path, (obj, key) -> obj.getUnsignedInt(key, fallback), (arr, index) -> arr.getUnsignedInt(index, fallback));
        return integer == null ? fallback : integer;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     * <br>If the resulting value is a string, this will parse the string using {@link Integer#parseUnsignedInt(String)}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The unsigned int value at the given path, returning the fallback if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"default Mono<Webhook> createWebhook(final Consumer<? super LegacyWebhookCreateSpec> spec) {
        return Mono.defer(
                () -> {
                    LegacyWebhookCreateSpec mutatedSpec = new LegacyWebhookCreateSpec();
                    spec.accept(mutatedSpec);
                    return getClient().getRestClient().getWebhookService()
                            .createWebhook(getId().asLong(), mutatedSpec.asRequest(), mutatedSpec.getReason());
                })
                .map(data -> new Webhook(getClient(), data));
    }","/**
     * Requests to create a webhook.
     *
     * @param spec A {@link Consumer} that provides a ""blank"" {@link LegacyWebhookCreateSpec} to be operated on.
     * @return A {@link Mono} where, upon successful completion, emits the created {@link Webhook}. If an error is
     * received, it is emitted through the {@code Mono}.
     * @deprecated use {@link #createWebhook(WebhookCreateSpec)} or {@link #createWebhook(String)} which offer an
     * immutable approach to build specs
     */",discord4j.core.object.entity.channel
"public static final Route AUTO_MOD_RULE_CREATE = Route.post(""/guilds/{guild.id}/auto-moderation/rules"");","/**
     * Create a new rule. Returns an auto moderation rule on success. Requires the 'MANAGE_GUILD' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/auto-moderation#create-auto-moderation-rule"">
     * https://discord.com/developers/docs/resources/auto-moderation#create-auto-moderation-rule</a>
     */",discord4j.rest.route
"public LegacyRoleCreateSpec setName(String name) {
        this.name = name;
        return this;
    }","/**
     * Sets the name of the created {@link Role}.
     *
     * @param name The role name.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    @CheckReturnValue
    M clearOverridesRemoved();","/**
     * Clears the overrides removed via {@link #removePermissionOverride(IPermissionHolder)}.
     *
     * @return ChannelManager for chaining convenience
     */",net.dv8tion.jda.api.managers.channel.attribute
"default Mono<VoiceConnection> getVoiceConnection() {
        return getGuild()
                .flatMap(Guild::getVoiceConnection)
                .filterWhen(voiceConnection -> voiceConnection.getChannelId().map(channelId -> channelId.equals(getId())));
    }","/**
     * Returns the current voice connection registered for this audio channel's guild.
     *
     * @return A {@link Mono} of {@link VoiceConnection} for this audio channel's guild if present, or empty otherwise.
     * The resulting {@code Mono} will also complete empty if the registered voice connection is not associated with
     * this audio channel.
     */",discord4j.core.object.entity.channel
"public static GetMembersInGuildAction getMembersInGuild(long guildId) {
        return new GetMembersInGuildAction(guildId);
    }","/**
     * Creates an action to retrieve data for all members present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link GetMembersInGuildAction}
     */",discord4j.common.store.action.read
"@Nonnull
    @CheckReturnValue
    RestAction<Void> requestToSpeak();","/**
     * Sends a {@link GuildVoiceState#getRequestToSpeakTimestamp() request-to-speak} indicator to the stage instance moderators.
     * <p>If the self member has {@link Permission#VOICE_MUTE_OTHERS} this will immediately promote them to speaker.
     *
     * @throws IllegalStateException
     *         If the self member is not currently connected to the channel
     *
     * @return {@link RestAction}
     *
     * @see    #cancelRequestToSpeak()
     */",net.dv8tion.jda.api.entities.channel.concrete
"@Nonnull
    @CheckReturnValue
    GuildManager setAfkChannel(@Nullable VoiceChannel afkChannel);","/**
     * Sets the AFK {@link net.dv8tion.jda.api.entities.channel.concrete.VoiceChannel VoiceChannel} of this {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  afkChannel
     *         The new afk channel for this {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         or {@code null} to reset
     *
     * @throws IllegalArgumentException
     *         If the provided channel is not from this guild
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    public ThreadCreateMetadata addTags(@Nonnull Collection<? extends ForumTagSnowflake> tags)
    {
        Checks.noneNull(tags, ""Tags"");
        Checks.check(tags.size() <= ForumChannel.MAX_POST_TAGS, ""Cannot have more than %d post tags. Provided: %d"", ForumChannel.MAX_POST_TAGS, tags.size());
        this.appliedTags.addAll(tags);
        return this;
    }","/**
     * Apply the provided tags to the forum post.
     *
     * @param  tags
     *         The tags to apply
     *
     * @throws IllegalArgumentException
     *         If null or more than {@value ForumChannel#MAX_POST_TAGS} tags are provided
     *
     * @return The updated metadata instance
     */",net.dv8tion.jda.api.requests.restaction
"public static Flux<RoleData> orderRoles(Flux<RoleData> roles) {
        return roles.sort(OrderUtil.ROLE_ORDER);
    }","/**
     * Sorts {@link RoleData roles} according to visual ordering in Discord. Roles at the bottom of the list are first.
     * <p>
     * sorts roles according to {@link #ROLE_ORDER}.
     *
     * @param roles The roles to sort.
     * @return The sorted roles.
     */",discord4j.rest.util
"public static GetGuildScheduledEventsInGuildAction getScheduledEventsInGuild(long guildId) {
        return new GetGuildScheduledEventsInGuildAction(guildId);
    }","/**
     * Creates an action to retrieve data associated to scheduled events in a given guild
     *
     * @param guildId the related events guild id
     * @return a new {@link GetGuildScheduledEventsInGuildAction}
     */",discord4j.common.store.action.read
"public Flux<Long> ticks() {
        return sink.asFlux();
    }","/**
     * Return a {@link Flux} that emits ticks at the currently configured rate.
     *
     * @return a {@link Flux} of increasing values since the last {@link #start(Duration, Duration)} call
     */",discord4j.common
"@Nonnull
        String getDefaultAvatarUrl();","/**
         * Gets the url of the member's default avatar
         * 
         * @return never-null String containing the url of the member's
         *         default avatar
         */",net.dv8tion.jda.api.entities
void notifyOnFeatureVectorEvent();,"/**
     * Update view on feature vector event.
     *
     */",jestures.core.view
"public static ClientActivity streaming(String name, String url) {
        return of(Activity.Type.STREAMING, name, url);
    }","/**
     * Creates a {@link Activity.Type#STREAMING streaming} activity.
     *
     * @param name the name of the activity
     * @param url the stream url
     * @return a streaming activity with the given name and url
     */",discord4j.core.object.presence
boolean isMentionable();,"/**
     * Whether or not this Role is mentionable
     *
     * @return True, if Role is mentionable.
     */",net.dv8tion.jda.api.entities
"@Nullable
    public TextChannel getOldRulesChannel()
    {
        return getOldValue();
    }","/**
     * The previous rules channel.
     * 
     * @return The previous rules channel
     */",net.dv8tion.jda.api.events.guild.update
"@Nullable
    ByteBuffer provide20MsAudio();","/**
     * If {@link #canProvide()} returns true JDA will call this method in an attempt to retrieve audio data from the
     * handler. This method need to provide 20 Milliseconds of audio data as a <b>array-backed</b> {@link java.nio.ByteBuffer}.
     * Use either {@link java.nio.ByteBuffer#allocate(int)} or {@link java.nio.ByteBuffer#wrap(byte[])}.
     * <p>
     * Considering this system needs to be low-latency / high-speed, it is recommended that the loading of audio data
     * be done before hand or in parallel and not loaded from disk when this method is called by JDA. Attempting to load
     * all audio data from disk when this method is called will most likely cause issues due to IO blocking this thread.
     * <p>
     * The provided audio data needs to be in the format: 48KHz 16bit stereo signed BigEndian PCM.
     * <br>Defined by: {@link net.dv8tion.jda.api.audio.AudioSendHandler#INPUT_FORMAT AudioSendHandler.INPUT_FORMAT}.
     * <br>If {@link #isOpus()} is set to return true, then it should be in pre-encoded Opus format instead.
     *
     * @return Should return a {@link java.nio.ByteBuffer} containing 20 Milliseconds of audio.
     *
     * @see    #isOpus()
     * @see    #canProvide()
     * @see    java.nio.ByteBuffer#allocate(int)
     * @see    java.nio.ByteBuffer#wrap(byte[])
     */",net.dv8tion.jda.api.audio
"Function<Mono<ClientResponse>, Mono<ClientResponse>> transform(DiscordWebRequest request);","/**
     * Transform a {@link Mono} pipeline using the given {@link DiscordWebRequest} as hint for parameterization of the
     * resulting transformation.
     *
     * @param request the {@code DiscordRequest} used for the targeted {@code Mono} sequence
     * @return a {@link Function} that allows immediately mapping this {@code Mono} into a target {@code Mono} instance
     */",discord4j.rest.response
"public RestMember restMember(Snowflake guildId, MemberData data) {
        return RestMember.create(this, guildId, Snowflake.of(data.user().id()));
    }","/**
     * Requests to retrieve the member represented by the supplied ID and {@link MemberData}
     *
     * @param guildId The ID of the guild.
     * @param data The data of the user.
     * @return A {@link RestMember} as represented by the supplied parameters.
     */",discord4j.rest
boolean isPublicRole();,"/**
     * Whether this role is the @everyone role for its {@link net.dv8tion.jda.api.entities.Guild Guild},
     * which is assigned to everyone who joins the {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @return True, if and only if this {@link net.dv8tion.jda.api.entities.Role Role} is the public role
     * for the {@link net.dv8tion.jda.api.entities.Guild Guild} provided by {@link #getGuild()}.
     *
     * @see net.dv8tion.jda.api.entities.Guild#getPublicRole()
     */",net.dv8tion.jda.api.entities
"@Override
    public Optional<MySQLConnectionHandler> getConnectionHandler() {
        if (this.mySQLConnectionHandler == null)
            return Optional.empty();

        return Optional.of(this.mySQLConnectionHandler);
    }",/** {@inheritDoc} */,io.github.heliumdioxid.database.mysql
"public Publisher<?> onPinsUpdate(PinsUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a channel's pinned messages are updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static Cipher createRijndaelCipher(byte [] key) {
        return createCipher(""AES/ECB/NoPadding"", ""AES"", key);
    }","/**
     * Create Rijndael (a.k.a. AES) cipher.
     *
     * @param key  byte array representing a ciphering key.
     * @return  {@link Cipher} object.
     */",threegpp.milenage.cipher
FollowupInteractionHandler reply(InteractionApplicationCommandCallbackData callbackData);,"/**
     * Build an interaction handler that will produce a reply using the contents of the supplied callback data to the
     * interaction member.
     *
     * @param callbackData the data used to produce a reply message
     * @return a followup handler to continue processing this interaction asynchronously, until the interaction token
     * bound to this interaction expires after 15 minutes.
     */",discord4j.rest.interaction
Flux<GuildEmoji> getGuildEmojis(Snowflake guildId);,"/**
     * Requests to retrieve the guild's emojis.
     *
     * @param guildId The ID of the guild.
     * @return A {@link Flux} that continually emits the guild's {@link GuildEmoji emojis}. If an error is received,
     * it is emitted through the {@code Flux}.
     */",discord4j.core.retriever
"public Flux<GuildScheduledEventData> getScheduledEvents(@Nullable Boolean withUserCount) {
        Map<String, Object> queryParams = new HashMap<>();
        Optional.ofNullable(withUserCount).ifPresent(value -> queryParams.put(""with_user_count"", value));
        return restClient.getGuildService().getScheduledEvents(id, queryParams);
    }","/**
     * Requests to retrieve the scheduled events under this guild.
     *
     * @param withUserCount Whether to optionally include the number of subscribed users for each event
     * @return A {@link Flux} that continually emits all the  {@link GuildScheduledEventData} associated with this guild.
     * If an error is received, it is emitted through the {@code Flux}.
     */",discord4j.rest.entity
"Mono<E> handle(DispatchContext<D, S> context);","/**
     * Operates and transforms a Dispatch event with its context, from gateway to user-friendly Events, so it may be
     * further routed to an event dispatcher downstream.
     * <p>
     * The context allows access to underlying client resources for operations like caching.
     *
     * @param context the dispatch context
     * @return a Flux of Events that are derived from the given dispatch context
     */",discord4j.core.event.dispatch
"public static final Route INVITE_GET = Route.get(""/invites/{invite.code}"");","/**
     * Returns an invite object for the given code.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/invite#get-invite"">
     * https://discord.com/developers/docs/resources/invite#get-invite</a>
     */",discord4j.rest.route
"@Nonnull
    public GuildChannelUnion getChannel()
    {
        return (GuildChannelUnion) channel;
    }","/**
     * The {@link GuildChannel} this invite points to.
     *
     * @return {@link GuildChannel}
     */",net.dv8tion.jda.api.events.guild.invite
"public Mono<User> getOwner(EntityRetrievalStrategy retrievalStrategy) {
        return gateway.withRetrievalStrategy(retrievalStrategy).getUserById(getOwnerId());
    }","/**
     * Requests to retrieve the current team owner, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the user
     * @return A {@link Mono} where, upon successful completion, emits the {@link User} associated with the current
     * team owner. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"@Nonnull
    Stream<T> streamUnordered();","/**
     * Behavior similar to {@link CacheView#stream()} which does not preserve order.
     *
     * @return Stream of the contained elements
     *
     * @since  4.0.0
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    public Guild.VerificationLevel getNewVerificationLevel()
    {
        return getNewValue();
    }","/**
     * The new {@link net.dv8tion.jda.api.entities.Guild.VerificationLevel VerificationLevel}
     *
     * @return The new VerificationLevel
     */",net.dv8tion.jda.api.events.guild.update
"public boolean isContentChanged() {
        return contentChanged;
    }","/**
     * Gets whether or not the content of the {@link Message} has been changed in this event.
     *
     * @return Whether or not the content of the {@link Message} has been changed.
     */",discord4j.core.event.domain.message
"public static RestRole create(RestClient restClient, Snowflake guildId, Snowflake id) {
        return new RestRole(restClient, guildId.asLong(), id.asLong());
    }","/**
     * Create a {@link RestRole} for the given parameters. This method does not perform any API request.
     *
     * @param restClient the client to make API requests
     * @param id the ID of this entity
     * @return a {@code RestRole} represented by the given parameters.
     */",discord4j.rest.entity
"@Nonnull
    public Guild getGuild()
    {
        return emoji.getGuild();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Guild Guild} where the emoji came from
     *
     * @return The origin Guild
     */",net.dv8tion.jda.api.events.emoji
"public Optional<Double> getOptionAsDouble(final String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asDouble);
    }","/**
     * Gets the value of the option corresponding to the provided name, if present, as a double.
     *
     * @param name The name of the option.
     * @return An {@link Optional} containing the value of the option corresponding to the provided name, if present, or empty otherwise.
     * @throws IllegalArgumentException If the option is present but its value cannot be converted to a double.
     */",discord4j.core.event.domain.interaction
"@Nullable
    default ImageProxy getIcon()
    {
        final String iconUrl = getIconUrl();
        return iconUrl == null ? null : new ImageProxy(iconUrl);
    }","/**
     * Returns an {@link ImageProxy} for this application team's icon.
     *
     * @return The {@link ImageProxy} of this application team's icon, or null if no icon is applied
     *
     * @see    #getIconUrl()
     */",net.dv8tion.jda.api.entities
"public Mono<Member> asFullMember(EntityRetrievalStrategy retrievalStrategy) {
        return gateway.withRetrievalStrategy(retrievalStrategy).getMemberById(getGuildId(), getId());
    }","/**
     * Retrieves the full {@link Member} instance corresponding to this resolved member, using the given retrieval
     * strategy.
     *
     * @return a {@link Mono} where, upon successful completion, emits the full {@link Member} instance corresponding to
     * this resolved member. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.command
"@Nullable
    public String getNewVanityCode()
    {
        return getNewValue();
    }","/**
     * The new vanity code
     *
     * @return The new vanity code
     */",net.dv8tion.jda.api.events.guild.update
"public Mono<Member> getMember() {
        return gateway.getMemberById(getGuildId(), getUserId());
    }","/**
     * Requests to retrieve the member this voice state is for.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link Member} this voice state is for. If an
     * error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
    default <R, A> R collect(@Nonnull Collector<? super T, A, R> collector)
    {
        return stream().collect(collector);
    }","/**
     * Collects all cached entities into a single Collection using the provided
     * {@link java.util.stream.Collector Collector}.
     * Shortcut for {@code stream().collect(collector)}.
     *
     * @param  collector
     *         The collector used to collect the elements
     *
     * @param  <R>
     *         The output type
     * @param  <A>
     *         The accumulator type
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided collector is {@code null}
     *
     * @return Resulting collections
     */",net.dv8tion.jda.api.utils.cache
"Mono<Void> onMessageReactionAdd(int shardIndex, MessageReactionAdd dispatch);","/**
     * Updates the internal state of the store according to the given {@link MessageReactionAdd} gateway dispatch.
     * This will typically perform an update operation on a related {@link MessageData} that is already present in
     * the store in order to add the reaction.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"Mono<HttpClient.ResponseReceiver<?>> write(HttpClient.RequestSender sender, @Nullable R body);","/**
     * Write a given object to the output message.
     *
     * @param sender the http request sender
     * @param body the object to write
     * @return indicates completion or error
     */",discord4j.rest.http
"Mono<GuildEmoji> getGuildEmojiById(Snowflake guildId, Snowflake emojiId);","/**
     * Requests to retrieve the guild emoji represented by the supplied IDs.
     *
     * @param guildId The ID of the guild.
     * @param emojiId The ID of the emoji.
     * @return A {@link Mono} where, upon successful completion, emits the {@link GuildEmoji} as represented by the
     *         supplied IDs. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
B[] createArray(byte []... buffers);,"/**
     * Create an array of {@link threegpp.milenage.MilenageBuffer} objects.
     *
     * @param buffers  Array of byte arrays where each element represents a contents of single buffer.
     * @return  Array of {@link MilenageBuffer} objects
     */",threegpp.milenage
"new PossibleModule())
            .registerModule(new JavaTimeModule())
            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)
            .registerModule(new Jdk8Module())
            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)
            .setVisibility(PropertyAccessor.GETTER, JsonAutoDetect.Visibility.PUBLIC_ONLY)
            .setVisibility(PropertyAccessor.CREATOR, JsonAutoDetect.Visibility.ANY)
            .setDefaultPropertyInclusion(JsonInclude.Value.construct(JsonInclude.Include.CUSTOM,
                    JsonInclude.Include.ALWAYS, PossibleFilter.class, null));","/**
     * A mapper of {@link ObjectMapper} with all the required options for Discord4J operations.
     */",discord4j.common
"@Nonnull
    @CheckReturnValue
    default WebhookMessageEditAction<Message> editOriginalComponents(@Nonnull LayoutComponent... components)
    {
        return editMessageComponentsById(""@original"", components);
    }","/**
     * Edit the source message sent by this interaction.
     * <br>For {@link IMessageEditCallback#editComponents(Collection)} and {@link IMessageEditCallback#deferEdit()} this will be the message the components are attached to.
     * For {@link IReplyCallback#deferReply()} and {@link IReplyCallback#reply(String)} this will be the reply message instead.
     *
     * <p>This method will be delayed until the interaction is acknowledged.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_WEBHOOK UNKNOWN_WEBHOOK}
     *     <br>The webhook is no longer available, either it was deleted or in case of interactions it expired.</li>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The message for that id does not exist</li>
     * </ul>
     *
     * @param  components
     *         The new component layouts for this message, such as {@link ActionRow ActionRows}
     *
     * @throws IllegalArgumentException
     *         If the provided components are null, or more than 5 layouts are provided
     *
     * @return {@link WebhookMessageEditAction}
     */",net.dv8tion.jda.api.interactions
"@Nonnull
    static UnifiedMemberCacheView allMembers(@Nonnull Collection<? extends MemberCacheView> cacheViews)
    {
        Checks.noneNull(cacheViews, ""Collection"");
        return new UnifiedCacheViewImpl.UnifiedMemberCacheViewImpl(cacheViews::stream);
    }","/**
     * Creates a combined {@link UnifiedMemberCacheView UnifiedMemberCacheView}
     * for all provided MemberCacheView implementations.
     * <br>This allows to combine cache of multiple JDA sessions or Guilds.
     *
     * @param  cacheViews
     *         Collection of {@link net.dv8tion.jda.api.utils.cache.MemberCacheView MemberCacheView} instances
     *
     * @return Combined MemberCacheView spanning over all provided instances
     */",net.dv8tion.jda.api.utils.cache
"@Nullable
    Member getMemberById(long id);","/**
     * Gets a member with the given ID, or {@code null} if the member is not found
     *
     * @param  id
     *         the ID of the member
     *
     * @throws IllegalStateException
     *         If the widget is not {@link #isAvailable() available}
     *
     * @return possibly-null Member with the given ID.
     */",net.dv8tion.jda.api.entities
"Route route = Route.custom(Method.DELETE, ""channels/{channel_id}/messages/{message_id}"");","/**
     * Create a route template for the given HTTP method.
     *
     * <p>Route syntax should include valid argument placeholders of the format: {@code '{' argument_name '}'}
     * <br>The rate-limit handling in JDA relies on the correct names of major parameters:
     * <ul>
     *     <li>{@code channel_id} for channel routes</li>
     *     <li>{@code guild_id} for guild routes</li>
     *     <li>{@code webhook_id} for webhook routes</li>
     *     <li>{@code interaction_token} for interaction routes</li>
     * </ul>
     *
     * For example, to compose the route to create a message in a channel:
     * <pre>{@code
     * Route route = Route.custom(Method.POST, ""channels/{channel_id}/messages"");
     * }</pre>
     *
     * <p>To compile the route, use {@link #compile(String...)} with the positional arguments.
     * <pre>{@code
     * Route.CompiledRoute compiled = route.compile(channelId);
     * }</pre>
     *
     * @param  method
     *         The HTTP method
     * @param  route
     *         The route template with valid argument placeholders
     *
     * @throws IllegalArgumentException
     *         If null is provided or the route is invalid (containing spaces or empty)
     *
     * @return The custom route template
     */",net.dv8tion.jda.api.requests
"@Nullable
    public static DataArray optArray(@Nonnull DataArray root, @Nonnull String path)
    {
        if (!path.endsWith(""?""))
            path += ""?"";
        return get(root, path, DataObject::getArray, DataArray::getArray);
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The {@link DataArray} at the given path, or null if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"public DiscordWebRequest copy() {
        return new DiscordWebRequest(this);
    }","/**
     * Create a new instance using the values from this one.
     *
     * @return a new request
     */",discord4j.rest.request
"@Nonnull
    public Component.Type getType()
    {
        return type;
    }","/**
     * The {@link Component.Type Type} of this component
     *
     * @return Type of this component
     */",net.dv8tion.jda.api.interactions.modals
"@Nonnull
    List<T> getValues();","/**
     * The provided selection.
     *
     * @return {@link List} of {@link T}
     */",net.dv8tion.jda.api.interactions.components.selections
"public MemberUpdateEvent(GatewayDiscordClient gateway, ShardInfo shardInfo, long guildId, long memberId,
                             @Nullable Member old, Set<Long> currentRoleIds, @Nullable String currentNickname,
                             @Nullable String currentAvatar, @Nullable String currentJoinedAt,
                             @Nullable String currentPremiumSince,
                             @Nullable Boolean currentPending, @Nullable String communicationDisabledUntil,
                             @Nullable AvatarDecoration avatarDecoration) {
        super(gateway, shardInfo);

        this.guildId = guildId;
        this.memberId = memberId;
        this.old = old;
        this.currentRoleIds = currentRoleIds;
        this.currentNickname = currentNickname;
        this.currentAvatar = currentAvatar;
        this.currentJoinedAt = currentJoinedAt;
        this.currentPremiumSince = currentPremiumSince;
        this.currentPending = currentPending;
        this.communicationDisabledUntil = communicationDisabledUntil;
        this.avatarDecoration = avatarDecoration;
    }",/** The path for member avatar image URLs. */,discord4j.core.event.domain.guild
"public boolean isSuppressed()
    {
        return suppressed;
    }","/**
     * Whether the member was suppressed in this event
     *
     * @return True, if the member was suppressed,
     *         <br>False, if the member was un-suppressed
     */",net.dv8tion.jda.api.events.guild.voice
"@Nonnull
    @CheckReturnValue
    default PermOverrideManager deny(@Nonnull Collection<Permission> permissions)
    {
        return deny(Permission.getRaw(permissions));
    }","/**
     * Denies the provided {@link net.dv8tion.jda.api.Permission Permissions}
     * from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     *
     * @param  permissions
     *         The permissions to deny from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @throws IllegalArgumentException
     *         If any of the provided Permissions is {@code null}
     *
     * @return PermOverrideManager for chaining convenience
     *
     * @see    java.util.EnumSet EnumSet
     * @see    net.dv8tion.jda.api.Permission#getRaw(java.util.Collection) Permission.getRaw(Collection)
     */",net.dv8tion.jda.api.managers
"Mono<MessageData> onMessageDelete(int shardIndex, MessageDelete dispatch);","/**
     * Updates the internal state of the store according to the given {@link MessageDelete} gateway dispatch. This
     * will typically perform a delete operation on a related {@link MessageData} that is already present in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link MessageData} before the deletion
     */",discord4j.common.store.api.layout
"public Mono<GuildUpdateData> createGuild(GuildCreateRequest request) {
        return guildService.createGuild(request);
    }","/**
     * Requests to create a guild.
     *
     * @param request A {@link GuildCreateRequest} as request body.
     * @return A {@link Mono} where, upon successful completion, emits the created {@link GuildUpdateData}. If an
     * error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest
"public static ThreadCreateAction threadCreate(int shardIndex, ThreadCreate dispatch) {
        return new ThreadCreateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link ThreadCreate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link ThreadCreateAction}
     */",discord4j.common.store.action.gateway
"public static final Route WEBHOOK_MODIFY = Route.patch(""/webhooks/{webhook.id}"");","/**
     * Modify a webhook. Returns the updated webhook object on success. All parameters to this endpoint are optional.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#modify-webhook"">
     * https://discord.com/developers/docs/resources/webhook#modify-webhook</a>
     */",discord4j.rest.route
"default int computeShardIndex(Snowflake guildId) {
        return (int) ((guildId.asLong() >> 22) % getShardCount());
    }","/**
     * Return the shard index according to the shard count given by this {@link GatewayClientGroup}.
     * @param guildId the input guild ID to compute the shard index
     * @return the shard index for a given guild ID
     */",discord4j.gateway
"public void error(Throwable error) {
        if (!(error instanceof ReconnectException)) {
            log.info(format(context, ""Triggering error sequence: {}""), error.toString());
        }
        close(DisconnectBehavior.retryAbruptly(error));
    }","/**
     * Initiates a close sequence with the given error. The session will be terminated abruptly and then instruct
     * consumers downstream that a reconnect should take place afterwards.
     *
     * @param error the cause for this session termination
     */",discord4j.gateway
boolean accepted = requestQueue.push(request);,"/**
     * This retry function is used for reading and completing HTTP requests in the event of a server error (codes
     * 500, 502, 503 and 504). The delay is calculated using exponential backoff with jitter.
     */",discord4j.rest.request
"public static GuildUpdateAction guildUpdate(int shardIndex, GuildUpdate dispatch) {
        return new GuildUpdateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildUpdate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildUpdateAction}
     */",discord4j.common.store.action.gateway
"public ThreadListPart combine(ThreadListPart other) {
        List<ThreadChannel> combineThreads = new ArrayList<>(threads.size() + other.threads.size());
        combineThreads.addAll(threads);
        combineThreads.addAll(other.threads);

        List<ThreadMember> combineMembers = new ArrayList<>(members.size() + other.members.size());
        combineMembers.addAll(members);
        combineMembers.addAll(other.members);

        return new ThreadListPart(combineThreads, combineMembers);
    }","/**
     * Combines this portion of the threads list with another portion.
     *
     * @param other The other portion to combine with.
     * @return A new {@link ThreadListPart} with both parts.
     */",discord4j.core.object
"@Nonnull
    public Guild.ExplicitContentLevel getNewLevel()
    {
        return getNewValue();
    }","/**
     * The new {@link net.dv8tion.jda.api.entities.Guild.ExplicitContentLevel ExplicitContentLevel} for the
     * {@link net.dv8tion.jda.api.entities.Guild Guild} after to this event.
     *
     * @return The new explicit content level
     */",net.dv8tion.jda.api.events.guild.update
void selectGesture(String gesture);,"/**
     * Select the gesture.
     *
     * @param gesture
     *            the gesture
     */",recorder.view
"public GatewayService getGatewayService() {
        return gatewayService;
    }","/**
     * Access a low-level representation of the API endpoints for the Gateway resource.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"public LegacyGuildCreateSpec setIcon(@Nullable Image icon) {
        builder.icon(icon == null ? Possible.absent() : Possible.of(icon.getDataUri()));
        return this;
    }","/**
     * Sets the image icon to display for the created {@link Guild}.
     *
     * @param icon The icon for the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Mono<GuildUpdateData> getData(@Nullable Boolean withCounts) {
        Map<String, Object> queryParams = new HashMap<>();
        Optional.ofNullable(withCounts).ifPresent(value -> queryParams.put(""with_counts"", value));
        return restClient.getGuildService().getGuild(id, queryParams);
    }","/**
     * Retrieve this guild's data upon subscription.
     *
     * @param withCounts when true, will return approximate member and presence counts for the guild too.
     * otherwise approximate member and presence counts will be null in {@link GuildUpdateData}.
     * @return a {@link Mono} where, upon successful completion, emits the {@link GuildUpdateData} belonging to this
     * entity. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"public static GetStickersInGuildAction getStickersInGuild(long guildId) {
        return new GetStickersInGuildAction(guildId);
    }","/**
     * Creates an action to retrieve data for all stickers present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link GetStickersInGuildAction}
     */",discord4j.common.store.action.read
"@Nonnull
    @Unmodifiable
    default List<GuildChannel> getChannels()
    {
        return getGuild()
                .getChannelCache()
                .ofType(ICategorizableChannel.class)
                .applyStream(stream -> stream
                    .filter(it -> this.equals(it.getParentCategory()))
                    .sorted()
                    .collect(Helpers.toUnmodifiableList())
                );
    }","/**
     * All {@link GuildChannel Channels} listed for this Category.
     * <br>Includes all types of channels, except for threads.
     *
     * @return Immutable list of all child channels
     */",net.dv8tion.jda.api.entities.channel.concrete
Mono<Void> disconnect(Snowflake guildId);,"/**
     * Disconnect a {@link VoiceConnection} for given {@code guildId} and remove it from the registry. If no connection
     * was present for the guild, this method does nothing.
     *
     * @param guildId the guild ID to disconnect and remove a voice connection
     * @return a {@link Mono} indicating completion of the disconnection process, if an error happens it is emitted
     * through the {@link Mono}.
     */",discord4j.voice
"String rep = tagReplacer.getValue(fplayer.getFaction(), fplayer);","/**
     * Replaces all variables in a plain raw line for a player
     *
     * @param fplayer for player
     * @param line    raw line from config with variables to replace for
     * @return clean line
     */",com.massivecraft.factions.zcore.util
"default GatewayObserver then(GatewayObserver other) {
        return CompositeGatewayObserver.compose(this, other);
    }","/**
     * Chain together another {@link GatewayObserver}.
     *
     * @param other the next {@link GatewayObserver}
     * @return a new composite {@link GatewayObserver}
     */",discord4j.gateway
"static ShardingStrategy single() {
        return new ShardingStrategy() {

            @Override
            public Mono<Integer> getShardCount(RestClient restClient) {
                return Mono.just(1);
            }

            @Override
            public GatewayClientGroupManager getGroupManager(int shardCount) {
                return new SingleGatewayClientGroup();
            }

            @Override
            public int getMaxConcurrency() {
                return 1;
            }
        };
    }","/**
     * Sharding strategy that creates a single {@link GatewayClient}. Useful for basic bots or for advanced worker
     * {@link GatewayClient} that do not directly perform authentication to the Discord Gateway.
     *
     * @return a simple non-sharded {@link ShardingStrategy}
     */",discord4j.core.shard
"public Optional<ApplicationCommandInteractionOption> getOption(final String name) {
        return getInteraction().getCommandInteraction()
                .orElseThrow(IllegalStateException::new) // should always be present for chat input commands
                .getOption(name);
    }","/**
     * Gets the option corresponding to the provided name, if present.
     *
     * @param name The name of the option.
     * @return The option corresponding to the provided name, if present.
     */",discord4j.core.event.domain.interaction
void setSelfMuted(boolean muted);,"/**
     * Set this to {@code true} if the current connection should be displayed as muted,
     * this will cause the {@link net.dv8tion.jda.api.audio.AudioSendHandler AudioSendHandler} packages
     * to not be ignored by Discord!
     *
     * @param muted
     *        Whether the connection should stop sending audio
     *        and display as muted.
     */",net.dv8tion.jda.api.managers
"public static final Route CROSSPOST_MESSAGE = Route.post(""/channels/{channel.id}/messages/{message.id}/crosspost"");","/**
     * Crosspost a Message into all guilds what follow the news channel indicated. This endpoint requires the
     * 'DISCOVERY' feature to be present for the guild and requires the 'SEND_MESSAGES' permission, if the current user
     * sent the message, or additionally the 'MANAGE_MESSAGES' permission, for all other messages, to be present for
     * the current user.
     * <p>
     * Returns a 204 empty response on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#crosspost-message"">
     * https://discord.com/developers/docs/resources/channel#crosspost-message</a>
     */",discord4j.rest.route
"@Nonnull
    @Unmodifiable
    default List<ThreadChannel> getThreadChannels()
    {
        return getGuild().getThreadChannelCache().applyStream(stream ->
            stream.filter(thread -> thread.getParentChannel() == this)
                  .collect(Helpers.toUnmodifiableList())
        );
    }","/**
     * Finds all {@link ThreadChannel ThreadChannels} whose parent is this channel.
     *
     * <p>These threads can also represent posts in {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels}.
     *
     * @return Immutable list of all ThreadChannel children.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    M sortOrder(@Nonnull final Comparator<T> comparator);","/**
     * Sorts the {@link #getCurrentOrder() current order} based on
     * the specified {@link java.util.Comparator Comparator} by using
     * {@link java.util.ArrayList#sort(java.util.Comparator) ArrayList.sort(comparator)}
     *
     * @param  comparator
     *         Comparator used to sort the current order
     *
     * @throws java.lang.IllegalArgumentException
     *         If the specified comparator is {@code null}
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    java.util.ArrayList#sort(java.util.Comparator)
     */",net.dv8tion.jda.api.requests.restaction.order
Object role = resolved.get(getAsLong());,"/**
     * The resolved {@link Role} for this option value.
     *
     * @throws IllegalStateException
     *         If this option is not of type {@link OptionType#ROLE ROLE} or
     *         {@link OptionType#MENTIONABLE MENTIONABLE} without a resolved role
     *
     * @return The resolved {@link Role}
     */",net.dv8tion.jda.api.interactions.commands
"public Mono<Void> deleteUserReaction(String emoji, Snowflake userId) {
        return restClient.getChannelService().deleteReaction(channelId, id, emoji, userId.asLong());
    }","/**
     * Requests to remove a reaction from a specified user on this message.
     *
     * @param emoji The reaction to remove on this message.
     * @param userId The user to remove the reaction on this message.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the reaction from the
     * specified user was removed on this message. If an error is received, it is emitted through the {@code Mono}.
     * @see
     * <a href=""https://discord.com/developers/docs/resources/channel#delete-user-reaction"">Delete User Reaction</a>
     */",discord4j.rest.entity
"public Snowflake getApplicationId() {
        return Snowflake.of(data.applicationId());
    }","/**
     * Returns the ID of the application the command belongs to.
     *
     * @return the ID of the application the command belongs to
     */",discord4j.core.object.command
"@Nonnull
    @CheckReturnValue
    default ChannelAction<T> removePermissionOverride(@Nonnull String id)
    {
        return removePermissionOverride(MiscUtil.parseSnowflake(id));
    }","/**
     * Removes any existing override with the provided id.
     * <br>If no override with the provided id exists, this method does nothing.
     *
     * @param  id
     *         The member or role id of the override
     *
     * @throws IllegalArgumentException
     *         If the provided string is not a valid snowflake or null
     *
     * @return The current ChannelAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"Mono<PresenceAndUserData> onPresenceUpdate(int shardIndex, PresenceUpdate dispatch);","/**
     * Updates the internal state of the store according to the given {@link PresenceUpdate} gateway dispatch. This
     * will typically perform an insert or an update operation on the related {@link PresenceData}, and update the
     * related {@link UserData} to reflect the new presence.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of both the
     * {@link PresenceData} and the {@link UserData} before the update
     */",discord4j.common.store.api.layout
DataObject gameObj = DataObject.empty();,"/**
     * Creates a new Presence representation for the provided JDAImpl instance
     *
     * @param jda
     *        The not-null JDAImpl instance to use
     */",net.dv8tion.jda.internal.managers
"boolean isMentioned(@Nonnull IMentionable mentionable, @Nonnull Message.MentionType... types);","/**
     * Checks if given {@link net.dv8tion.jda.api.entities.IMentionable IMentionable}
     * was mentioned in any way (@User, @everyone, @here, @Role).
     * <br>If no filtering {@link net.dv8tion.jda.api.entities.Message.MentionType MentionTypes} are
     * specified, all types are used.
     *
     * <p>{@link Message.MentionType#HERE MentionType.HERE} and {@link Message.MentionType#EVERYONE MentionType.EVERYONE}
     * will only be checked, if the given {@link net.dv8tion.jda.api.entities.IMentionable IMentionable} is of type
     * {@link net.dv8tion.jda.api.entities.User User} or {@link net.dv8tion.jda.api.entities.Member Member}.
     * <br>Online status of Users/Members is <b>NOT</b> considered when checking {@link Message.MentionType#HERE MentionType.HERE}.
     *
     * @param  mentionable
     *         The mentionable entity to check on.
     * @param  types
     *         The types to include when checking whether this type was mentioned.
     *         This will be used with {@link #getMentions(Message.MentionType...) getMentions(MentionType...)}
     *
     * @return True, if the given mentionable was mentioned in this message
     */",net.dv8tion.jda.api.entities
"@Nonnull
    public GuildMessageChannelUnion getGuildChannel()
    {
        if (!isFromGuild())
            throw new IllegalStateException(""This message event did not happen in a guild"");
        return (GuildMessageChannelUnion) channel;
    }","/**
     * The {@link net.dv8tion.jda.api.entities.channel.middleman.GuildMessageChannel GuildMessageChannel} for this Message
     *  if it was sent in a Guild.
     * <br>If this Message was not received from a {@link net.dv8tion.jda.api.entities.Guild Guild},
     * this will throw an {@link java.lang.IllegalStateException}.
     *
     * @throws java.lang.IllegalStateException
     *         If this was not sent in a channel in a Guild.
     *
     * @return The GuildMessageChannel
     */",net.dv8tion.jda.api.events.message
"@Nonnull
    public Timestamp plus(@Nonnull Duration duration)
    {
        Checks.notNull(duration, ""Duration"");
        return plus(duration.toMillis());
    }","/**
     * Creates a new timestamp instance with the provided offset into the future relative to the current timestamp.
     *
     * @param  duration
     *         The offset for the new timestamp
     *
     * @throws IllegalArgumentException
     *         If the provided duration is null
     *
     * @return Copy of this timestamp with the relative offset
     *
     * @see    #plus(long)
     */",net.dv8tion.jda.api.utils
"public LegacyInviteCreateSpec setMaxUses(int maxUses) {
        requestBuilder.maxUses(maxUses);
        return this;
    }","/**
     * Sets the maximum number of uses the created {@link Invite} has before expiring, or {@code 0} for unlimited
     * uses. If unset, the default is unlimited usages.
     *
     * @param maxUses The maximum number of uses, or {@code 0} for unlimited usage.
     * @return This spec.
     */",discord4j.core.spec.legacy
String value();,"/**
   * The title.
   *
   * @return the title
   */",io.github.augustoravazoli.termenu.core
"@Nonnull
    public Guild.BoostTier getOldBoostTier()
    {
        return getOldValue();
    }","/**
     * The old {@link net.dv8tion.jda.api.entities.Guild.BoostTier}
     *
     * @return The old BoostTier
     */",net.dv8tion.jda.api.events.guild.update
Mono<Guild> getGuildById(Snowflake guildId);,"/**
     * Requests to retrieve the guild represented by the supplied ID.
     *
     * @param guildId The ID of the guild.
     * @return A {@link Mono} where, upon successful completion, emits the {@link Guild} as represented by the supplied
     *         ID. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
public abstract void onEnable();,"/**
     * Method called when addon enabled.
     */",com.massivecraft.factions.addon
"@Nonnull
    public Guild getGuild()
    {
        return thread.getGuild();
    }","/**
     * The {@link Guild} containing the {@link ThreadChannel}.
     *
     * @return The {@link Guild} containing the {@link ThreadChannel}.
     */",net.dv8tion.jda.api.events.thread
"@Nonnull
    public StringBuilder getDescriptionBuilder()
    {
        return description;
    }","/**
     * The {@link java.lang.StringBuilder StringBuilder} used to
     * build the description for the embed.
     * <br>Note: To reset the description use {@link #setDescription(CharSequence) setDescription(null)}
     *
     * @return StringBuilder with current description context
     */",net.dv8tion.jda.api
"public static MessageReactionRemoveEmojiAction messageReactionRemoveEmoji(int shardIndex,
                                                                              MessageReactionRemoveEmoji dispatch) {
        return new MessageReactionRemoveEmojiAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link MessageReactionRemoveEmoji} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link MessageReactionRemoveEmojiAction}
     */",discord4j.common.store.action.gateway
"public int getNewPosition()
    {
        return getNewValue();
    }","/**
     * The new position
     *
     * @return The new position
     */",net.dv8tion.jda.api.events.role.update
boolean isCancelled();,"/**
         * Whether this request was cancelled.
         * <br>Similar to {@link #isSkipped()}, but only checks cancellation.
         *
         * @return True, if this request was cancelled
         */",net.dv8tion.jda.api.requests
"@Nonnull
    public String getId()
    {
        return id;
    }","/**
     * The custom id of this component
     *
     * @return The custom id of this component
     */",net.dv8tion.jda.api.interactions.modals
"@Nonnull
    @CheckReturnValue
    RoleAction setPermissions(@Nullable Long permissions);","/**
     * Sets the Permissions the new Role should have.
     * This will only allow permissions that the current account already holds unless
     * the account is owner or {@link net.dv8tion.jda.api.Permission#ADMINISTRATOR admin} of the parent {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  permissions
     *         The raw {@link net.dv8tion.jda.api.Permission Permissions} value for the new role.
     *         To retrieve this use {@link net.dv8tion.jda.api.Permission#getRawValue()}
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not hold one of the specified permissions
     *
     * @return The current RoleAction, for chaining convenience
     *
     * @see    net.dv8tion.jda.api.Permission#getRawValue()
     * @see    net.dv8tion.jda.api.Permission#getRaw(java.util.Collection)
     * @see    net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...)
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @CheckReturnValue
    TemplateManager setName(@Nonnull String name);","/**
     * Sets the name of this {@link Template Template}.
     *
     * @param  name
     *         The new name for this {@link Template Template}
     *
     * @throws IllegalArgumentException
     *         If the provided name is {@code null} or not between 1-100 characters long
     *
     * @return TemplateManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    EnumSet<Permission> getAllowed();","/**
     * EnumSet of all {@link net.dv8tion.jda.api.Permission Permissions} that are specifically allowed by this override.
     * <br><u>Changes to the returned set do not affect this entity directly.</u>
     *
     * @return Possibly-empty set of allowed {@link net.dv8tion.jda.api.Permission Permissions}.
     */",net.dv8tion.jda.api.entities
"@Override
    public int compareTo(Snowflake other) {
        return Long.signum((id >>> 22) - (other.id >>> 22));
    }","/**
     * Compares this snowflake to the specified snowflake.
     * <p>
     * The comparison is based on the timestamp portion of the snowflakes.
     *
     * @param other The other snowflake to compare to.
     * @return The comparator value.
     */",discord4j.common.util
Faction faction = fplayer.getFaction();,"/**
     * The map is relative to a coord and a faction north is in the direction of decreasing x east is in the direction
     * of decreasing z
     */",com.massivecraft.factions.zcore.persist
"public AuditLogPart combine(AuditLogPart other) {
        if (other.guildId != this.guildId) {
            throw new IllegalArgumentException(""Cannot combine audit log parts from two different guilds."");
        }

        Set<Webhook> combinedWebhooks = new HashSet<>(this.webhooks.size() + other.webhooks.size());
        combinedWebhooks.addAll(this.webhooks);
        combinedWebhooks.addAll(other.webhooks);

        Set<User> combinedUsers = new HashSet<>(this.users.size() + other.users.size());
        combinedUsers.addAll(this.users);
        combinedUsers.addAll(other.users);

        List<AuditLogEntry> combinedEntries = new ArrayList<>(this.entries.size() + other.entries.size());
        combinedEntries.addAll(this.entries);
        combinedEntries.addAll(other.entries);

        List<AutoModRule> combinedAutoModRules = new ArrayList<>(this.autoModRules.size() + other.autoModRules.size());
        combinedAutoModRules.addAll(this.autoModRules);
        combinedAutoModRules.addAll(other.autoModRules);

        return new AuditLogPart(guildId, combinedAutoModRules, combinedWebhooks, combinedUsers, combinedEntries);
    }","/**
     * Combines this portion of the audit log with another portion.
     *
     * @param other The other portion to combine with.
     * @return A new {@link AuditLogPart} that contains all of the webhooks, users, and entries from both parts.
     */",discord4j.core.object.audit
"@Nullable
    AudioChannelUnion getChannel();","/**
     * Returns the current {@link AudioChannelUnion} that the {@link Member} is in.
     * If the {@link Member} is currently not connected to a {@link AudioChannel}, this returns null.
     *
     * <p><b>Note:</b> This will return {@code null} if the member is not cached!
     * You can use {@link net.dv8tion.jda.api.utils.MemberCachePolicy#VOICE MemberCachePolicy.VOICE}
     * to cache members in voice channels.
     *
     * @return The AudioChannelUnion that the Member is connected to, or null.
     */",net.dv8tion.jda.api.entities
"public List<Snowflake> getAddedChannelIds() {
        return this.addedChannelIds;
    }","/**
     * Gets the channel IDs in which the option will add the user.
     *
     * @return The channel IDs in which the option will add the user.
     */",discord4j.core.object.onboarding
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction reply(@Nonnull String content)
    {
        Checks.notNull(content, ""Content"");
        return deferReply().setContent(content);
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     * </ul>
     *
     * @param  content
     *         The message content to send
     *
     * @throws IllegalArgumentException
     *         If null is provided or the content is longer than {@link Message#MAX_CONTENT_LENGTH} characters
     *
     * @return {@link ReplyCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"public static ChannelDeleteAction channelDelete(int shardIndex, ChannelDelete dispatch) {
        return new ChannelDeleteAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link ChannelDelete} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link ChannelDeleteAction}
     */",discord4j.common.store.action.gateway
boolean isSuppressEmbeds();,"/**
     * Whether embeds will be suppressed on this message.
     *
     * @return True, if embeds are suppressed
     */",net.dv8tion.jda.api.utils.messages
"@Nonnull
    public String getUserAgent()
    {
        return userAgent;
    }","/**
     * The adapted user-agent with the custom {@link #setUserAgentSuffix(String) suffix}.
     *
     * @return The user-agent
     */",net.dv8tion.jda.api.requests
"private Mono<UserEntity> swapToObj(UserUpdateDTO dto, UserEntity entity) {
        entity.setUsername(dto.getUsername());
        entity.setLastname(dto.getLastName());
        entity.setFirstname(dto.getFirstName());
        return Mono.just(entity);
    }","/**
     * This method is used to swap the dto entity
     *
     * @param dto -> UserUpdateDTO comes in and all its fields must be not null
     * @param entity -> UserEntity comes in and all its fields must be not null
     * @return Mono<UserEntity>
     * @since 1.0
     */",org.khasanof.citiesapi.service.user
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoiceLongs(@Nonnull long... choices)
    {
        return replyChoices(Arrays.stream(choices)
                .mapToObj(it -> new Command.Choice(String.valueOf(it), it))
                .collect(Collectors.toList()));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * <p>The string values of the provided longs will be used as value and name for the {@link net.dv8tion.jda.api.interactions.commands.Command.Choice Choices}.
     *
     * @param  choices
     *         The choice suggestions to present to the user
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the numeric value of any of the choices is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"public int getGatewayVersion() {
        return data.v();
    }","/**
     * Gets the gateway protocol version being used. Ex. 6.
     *
     * @return The gateway protocol version being used.
     */",discord4j.core.event.domain.lifecycle
<T> boolean emitComplete(Sinks.Many<T> sink);,"/**
     * Try to terminate the given {@code sink} successfully, respecting the semantics of
     * {@link Sinks.Many#tryEmitComplete()} and the failure handling of
     * {@link Sinks.Many#emitComplete(Sinks.EmitFailureHandler)}. Returns whether the emission was successful.
     * Implementations can throw unchecked exceptions like {@link Sinks.EmissionException} or perform side-effects
     * like waiting to determine a result.
     *
     * @param sink the target sink where this emission is attempted
     * @param <T> the type associated with the sink and element
     * @return the result of the emission, {@code true} if the sink was terminated successfully, {@code false} otherwise
     */",discord4j.common.sinks
"@Nonnull
    @CheckReturnValue
    default RestAction<Void> deleteMessages(@Nonnull Collection<Message> messages)
    {
        Checks.notEmpty(messages, ""Messages collection"");

        return deleteMessagesByIds(messages.stream()
                .map(ISnowflake::getId)
                .collect(Collectors.toList()));
    }","/**
     * Bulk deletes a list of messages.
     * <b>This is not the same as calling {@link net.dv8tion.jda.api.entities.Message#delete()} in a loop.</b>
     * <br>This is much more efficient, but it has a different ratelimit. You may call this once per second per Guild.
     *
     * <p>Must be at least 2 messages and not be more than 100 messages at a time.
     * <br>If you only have 1 message, use the {@link net.dv8tion.jda.api.entities.Message#delete()} method instead.
     *
     * <br><p>You must have the Permission {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE MESSAGE_MANAGE} in this channel to use
     * this function.
     *
     * <p>This method is best used when using {@link net.dv8tion.jda.api.entities.MessageHistory MessageHistory} to delete a large amount
     * of messages. If you have a large amount of messages but only their message Ids, please use {@link #deleteMessagesByIds(Collection)}
     *
     * <p>Possible ErrorResponses include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>if this channel was deleted</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>if any of the provided messages does not exist</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>if we were removed from the guild</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The send request was attempted after the account lost
     *         {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE} in the channel.</li>
     * </ul>
     *
     * @param  messages
     *         The collection of messages to delete.
     *
     * @throws IllegalArgumentException
     *         If the size of the list less than 2 or more than 100 messages.
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If this account does not have {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE}
     *
     * @return {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction}
     *
     * @see    #deleteMessagesByIds(Collection)
     * @see    #purgeMessages(List)
     */",net.dv8tion.jda.api.entities.channel.middleman
"public boolean isValidLength()
    {
        final int length = length();
        return length <= MessageEmbed.EMBED_MAX_LENGTH_BOT;
    }","/**
     * Checks whether the constructed {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed}
     * is within the limits for a bot account.
     *
     * @return True, if the {@link #length() length} is less or equal to {@value net.dv8tion.jda.api.entities.MessageEmbed#EMBED_MAX_LENGTH_BOT}
     *
     * @see    MessageEmbed#EMBED_MAX_LENGTH_BOT
     */",net.dv8tion.jda.api
"String header = Stream.of(
                context.getOrEmpty(KEY_BUCKET_ID).map(id -> ""B:"" + id),
                context.getOrEmpty(KEY_REQUEST_ID).map(id -> ""R:"" + id),
                context.getOrEmpty(KEY_GATEWAY_ID).map(id -> ""G:"" + id),
                context.getOrEmpty(KEY_SHARD_ID).map(id -> ""S:"" + id),
                context.getOrEmpty(KEY_GUILD_ID).map(id -> ""guildId:"" + id))
                .map(opt -> opt.orElse(""""))
                .filter(str -> !str.isEmpty())
                .collect(Collectors.joining("", ""));","/**
     * Format a message by unwrapping certain {@link ContextView} values as metadata, and if they exist, prepend them to
     * the given message.
     *
     * @param context a Reactor context to enrich the logging message
     * @param msg the logging message
     * @return a formatted log message
     */",discord4j.common
"public void stop() {
        if (task.get() != null) {
            task.get().dispose();
        }
    }","/**
     * Dispose the current emitter task without completing or cancelling existing subscriptions to {@link #ticks()}.
     */",discord4j.common
"public Publisher<?> onUnknownChannelUpdate(UnknownChannelUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild channel is updated, but its {@link discord4j.core.object.entity.channel.Channel.Type type}
     * is not supported or implemented.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    RoleManager setHoisted(boolean hoisted);","/**
     * Sets the <b><u>hoist state</u></b> of the selected {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * @param  hoisted
     *         Whether the selected {@link net.dv8tion.jda.api.entities.Role Role} should be hoisted
     *
     * @return RoleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    M reverseOrder();","/**
     * Reverses the {@link #getCurrentOrder() current order} by using
     * {@link java.util.Collections#reverse(java.util.List) Collections.reverse(orderList)}
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    java.util.Collections#reverse(java.util.List)
     */",net.dv8tion.jda.api.requests.restaction.order
"public Publisher<?> onThreadListSyncEvent(ThreadListSyncEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when the current user gains access to a thread channel.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nullable
    default JDA getElementById(@Nonnull String id)
    {
        return getElementById(Integer.parseUnsignedInt(id));
    }","/**
     * Retrieves the JDA instance represented by the provided shard ID
     * or {@code null} if none of the connected shards match the provided id.
     *
     * @param  id
     *         The ID of the shard
     *
     * @throws java.lang.NumberFormatException
     *         If the provided String is {@code null} or
     *         cannot be resolved to an unsigned int id
     *
     * @return Possibly-null entity for the specified shard ID
     */",net.dv8tion.jda.api.utils.cache
"public static GuildMemberRemoveAction guildMemberRemove(int shardIndex, GuildMemberRemove dispatch) {
        return new GuildMemberRemoveAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildMemberRemove} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildMemberRemoveAction}
     */",discord4j.common.store.action.gateway
"public List<ThreadChannel> getSyncedThreads() {
        return syncedThreads;
    }","/**
     * Returns all active threads in the given channels that the current user can access.
     *
     * @return a list of {@link ThreadChannel} with all active threads for the current user
     */",discord4j.core.event.domain.thread
Mono<Boolean> apply(GuildCreateData guildCreateData);,"/**
     * Obtain a {@link Mono} of {@link Boolean} for the given {@link GuildCreateData}. If the resulting sequence
     * contains {@code true}, then members will be requested through the Gateway for this guild.
     *
     * @param guildCreateData the guild triggering this filter
     * @return a {@link Mono} indicating if a guild should have their members requested
     */",discord4j.core.shard
"@Override
	public String getErrorPath() {
		return ""/error"";
	}","/**
	 * getErrorPath() overridden from org.springframework.boot.web.servlet.error.ErrorController
	 * @return ""/error"" route and handle it in handleError(request)
	 */",com.pfa.app.controller.web
"@Nonnull
    Role getRole();","/**
     * The target {@link net.dv8tion.jda.api.entities.Role Role} for this
     * manager
     *
     * @return The target Role
     */",net.dv8tion.jda.api.managers
"public Optional<Snowflake> getApplicationId() {
        return Optional.ofNullable(applicationId).map(Snowflake::of);
    }","/**
     * Gets the id of the bot/OAuth2 application for this discord integration, if present.
     *
     * @return The id of the bot/OAuth2 application for this discord integration, if present.
     */",discord4j.core.event.domain.integration
"public static final Route GUILD_SCHEDULED_EVENT_USERS_GET = Route.get(""/guilds/{guild.id}/scheduled-events/{event.id}/users"");","/**
     * Returns a list of users RSVP'd to the scheduled event for the given guild. Returns a list of user objects on
     * success with an optional `guild_member` property for each user if `with_member` query param is passed.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users"">
     * https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users</a>
     */",discord4j.rest.route
"record Choice(int number, String name, Method action) {}","/**
 * This class encapsulates an menu's option.
 *
 * @author Augusto Ravazoli
 * @since 3.0.0
 */",io.github.augustoravazoli.termenu.core
"@Nonnull
    @CheckReturnValue
    InviteAction setMaxAge(@Nullable final Long maxAge, @Nonnull final TimeUnit timeUnit);","/**
     * Sets the max age for the invite. Set this to {@code 0} if the invite should never expire. Default is {@code 86400} (24 hours).
     * {@code null} will reset this to the default value.
     *
     * @param  maxAge
     *         The max age for this invite or {@code null} to use the default value.
     * @param  timeUnit
     *         The {@link java.util.concurrent.TimeUnit TimeUnit} type of {@code maxAge}.
     *
     * @throws IllegalArgumentException
     *         If maxAge is negative or maxAge is positive and timeUnit is null.
     *
     * @return The current InviteAction for chaining.
     */",net.dv8tion.jda.api.requests.restaction
"final List<EmployeeAssignedProjectDto> managerSubEmployees = this.employeeService.findByManagerIdAndProjectId(this.credentialService.findByUsername(authentication.getName()).getEmployee().getEmployeeId(), Integer.parseInt(projectId));","/**
	 * display manager-assign view
	 * get data and display them by a new instance of AssignEmployeesDto
	 * @param projectId
	 * @param authentication
	 * @param model
	 * @return manager-assign view (using default view resolver)
	 */",com.pfa.app.controller.web.manager
"@Nonnull
    @Unmodifiable
    default List<ThreadChannel> getThreadChannels()
    {
        return getThreadChannelCache().asList();
    }","/**
     * Gets all {@link ThreadChannel ThreadChannel} in the cache.
     *
     * <p>These threads can also represent posts in {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels}.
     *
     * <p>This copies the backing store into a list. This means every call
     * creates a new list with O(n) complexity. It is recommended to store this into
     * a local variable or use {@link #getThreadChannelCache()} and use its more efficient
     * versions of handling these values.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return An immutable List of {@link ThreadChannel ThreadChannels}.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    @CheckReturnValue
    default InviteAction setTargetApplication(@Nonnull final String applicationId)
    {
        return setTargetApplication(MiscUtil.parseSnowflake(applicationId));
    }","/**
     * Sets the id of the targeted application.
     * <br>The invite has to point to a voice channel.
     * The invite will have the {@link Invite.TargetType#EMBEDDED_APPLICATION} target.
     *
     * @param applicationId
     *        The id of the embedded application to target
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided ID is null
     * @throws java.lang.NumberFormatException
     *         If the provided ID is not a snowflake
     *
     * @return The current InviteAction for chaining.
     */",net.dv8tion.jda.api.requests.restaction
"public Set<Message> getMessages() {
        return messages;
    }","/**
     * Gets a list of {@link Message} objects there were deleted in this event.
     *
     * @return a list of {@link Message} objects that were deleted.
     */",discord4j.core.event.domain.message
"public Set<User> getUsers() {
        return users;
    }","/**
     * Get the users that are involved in the entries of this portion of the audit log.
     *
     * @return The users that are involved in the entries of this portion of the audit log.
     */",discord4j.core.object.audit
"public boolean isCurrentPending() {
        return Optional.ofNullable(currentPending).orElse(false);
    }","/**
     * Gets whether the user has currently not yet passed the guild's Membership Screening requirements.
     *
     * @return Whether the user has currently not yet passed the guild's Membership Screening requirements.
     */",discord4j.core.event.domain.guild
"@Nonnull
    @CheckReturnValue
    PermOverrideManager grant(long permissions);","/**
     * Grants the provided {@link net.dv8tion.jda.api.Permission Permissions} bits
     * to the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     *
     * @param  permissions
     *         The permissions to grant to the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @return PermOverrideManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public Object getValue() {
        return data.value();
    }","/**
     * Gets the value of this choice.
     *
     * @return The value of this choice.
     */",discord4j.core.object.command
"@Nonnull
    @Override
    default AuditableRestAction<T> deadline(long timestamp)
    {
        return (AuditableRestAction<T>) RestAction.super.deadline(timestamp);
    }","/**
     * {@inheritDoc}
     */",net.dv8tion.jda.api.requests.restaction
"public LegacyBanQuerySpec setDeleteMessageDays(final int days) {
        request.put(""delete_message_days"", days);
        return this;
    }","/**
     * Sets the number of days to delete messages for (0-7).
     *
     * @param days A number from 0 to 7 indicating how many days of messages should be deleted when a user is banned.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Mono<StageInstance> getStageInstance() {
        return gateway.getStageInstanceByChannelId(Snowflake.of(voiceStateData.channelId().get()));
    }","/**
     * Get the stage instance for this request.
     *
     * @return A {@link Mono} where, upon successful completion, emits the
     *         {@link StageInstance} in which the request has been made
     */",discord4j.core.event.domain
"public static final Route AUTO_MOD_RULE_GET = Route.get(""/guilds/{guild.id}/auto-moderation/rules/{auto_moderation_rule.id}"");","/**
     * Get a single rule. Returns an auto moderation rule object. Requires the 'MANAGE_GUILD' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/auto-moderation#get-auto-moderation-rule"">
     * https://discord.com/developers/docs/resources/auto-moderation#get-auto-moderation-rule</a>
     */",discord4j.rest.route
"public Route getRoute() {
        return request.getRoute();
    }","/**
     * Return the API endpoint targeted by this request.
     *
     * @return the {@link Route} requested by this {@link ClientRequest}
     */",discord4j.rest.http.client
"@Override
	public List<ProjectCommit> findByEmployeeIdAndProjectId(final Integer employeeId, final Integer projectId) {
		return this.rep.findByEmployeeIdAndProjectId(employeeId, projectId);
	}","/**
	 * @param employeeId
	 * @param projectId
	 * @return list of ProjectCommit
	 */",com.pfa.app.service.impl
Route.CompiledRoute route = task.getRoute();,"/**
     * Used to execute a Request. Processes request related to provided bucket.
     *
     * @param  task
     *         The API request that needs to be sent
     * @param  handleOnRateLimit
     *         Whether to forward rate-limits, false if rate limit handling should take over
     *
     * @return Non-null if the request was ratelimited. Returns a Long containing retry_after milliseconds until
     *         the request can be made again. This could either be for the Per-Route ratelimit or the Global ratelimit.
     *         <br>Check if globalCooldown is {@code null} to determine if it was Per-Route or Global.
     */",net.dv8tion.jda.internal.requests
"@Nullable
    public VoiceChannel getOldAfkChannel()
    {
        return getOldValue();
    }","/**
     * The old afk channel
     *
     * @return The old afk channel, or null
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    @CheckReturnValue
    MemberAction setDeafen(boolean deaf);","/**
     * Whether the user should be voice deafened in the guild.
     * <br>Default: {@code false}
     *
     * @param  deaf
     *         Whether the user should be voice deafened in the guild.
     *
     * @return The current MemberAction for chaining
     */",net.dv8tion.jda.api.requests.restaction
"public Publisher<?> onEntitlementCreate(EntitlementCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an entitlement is created.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Mono<UserData> getData() {
        return restClient.getUserService().getUser(id);
    }","/**
     * Retrieve this user's data upon subscription.
     *
     * @return a {@link Mono} where, upon successful completion, emits the {@link UserData} belonging to this user.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
type = current.getType();,"/**
     * Partitions the provided {@link ItemComponent components} into a list of ActionRow instances.
     * <br>This will split the provided components by {@link Type#getMaxPerRow()} and create homogeneously typed rows,
     * meaning they will not have mixed component types.
     *
     * <p><b>Example</b>
     * <pre>{@code
     * List<ItemComponent> components = Arrays.asList(
     *   Button.primary(""id1"", ""Hello""),
     *   Button.secondary(""id2"", ""World""),
     *   SelectMenu.create(""menu:id"").build()
     * );
     *
     * List<ActionRow> partitioned = ActionRow.partition(components);
     * // partitioned[0] = ActionRow(button, button)
     * // partitioned[1] = ActionRow(selectMenu)
     * }</pre>
     *
     * @param  components
     *         The components to partition
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link List} of {@link ActionRow}
     */",net.dv8tion.jda.api.interactions.components
"public long getPermissionsRaw()
    {
        return rawPermissions;
    }","/**
     * The {@code long} representation of the literal permissions that this {@link TemplateRole Role} has.
     *
     * @return Never-negative long containing offset permissions of this role.
     */",net.dv8tion.jda.api.entities.templates
"default boolean isExpired()
    {
        return System.currentTimeMillis() > getExpirationTimestamp();
    }","/**
     * Whether this interaction has expired.
     * <br>An interaction hook is only valid for 15 minutes.
     *
     * @return True, if this interaction hook has expired
     *
     * @see    #getExpirationTimestamp()
     */",net.dv8tion.jda.api.interactions
"public PollMediaObject getData() {
        return this.data;
    }","/**
     * Gets the raw data of the poll question.
     *
     * @return the raw data of the poll question
     */",discord4j.core.object.entity.poll
"@Nonnull
    @CheckReturnValue
    default Button withEmoji(@Nullable Emoji emoji)
    {
        return new ButtonImpl(getId(), getLabel(), getStyle(), getUrl(), isDisabled(), emoji);
    }","/**
     * Returns a copy of this button with the attached Emoji.
     *
     * @param  emoji
     *         The emoji to use
     *
     * @return New button with emoji
     */",net.dv8tion.jda.api.interactions.components.buttons
void openAudioConnection(AudioChannel channel);,"/**
     * Starts the process to create an audio connection with an {@link net.dv8tion.jda.api.entities.channel.middleman.AudioChannel AudioChannel}
     * or, if an audio connection is already open, JDA will move the connection to the provided AudioChannel.
     * <br><b>Note</b>: Currently you can only be connected to a single {@link net.dv8tion.jda.api.entities.channel.middleman.AudioChannel AudioChannel}
     * per {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * <p>This method will automatically move the current connection if one connection is already open in this underlying {@link Guild}.
     * <br>Current connections can be closed with {@link #closeAudioConnection()}.
     *
     * @param  channel
     *         The {@link net.dv8tion.jda.api.entities.channel.middleman.AudioChannel AudioChannel} to open an audio connection with.
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If the provided channel was {@code null}.</li>
     *             <li>If the provided channel is not part of the Guild that the current audio connection is connected to.</li>
     *         </ul>
     * @throws UnsupportedOperationException
     *         If audio is disabled due to an internal JDA error
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         <ul>
     *             <li>If the currently logged in account does not have the Permission {@link net.dv8tion.jda.api.Permission#VOICE_CONNECT VOICE_CONNECT}</li>
     *             <li>If the currently logged in account does not have the Permission {@link net.dv8tion.jda.api.Permission#VOICE_MOVE_OTHERS VOICE_MOVE_OTHERS}
     *                 and the {@link VoiceChannel#getUserLimit() user limit} has been exceeded!</li>
     *         </ul>
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    M setBitrate(int bitrate);","/**
     * Sets the <b><u>bitrate</u></b> of the selected {@link AudioChannel}.
     * <br>The default value is {@code 64000}
     *
     * <p>A channel bitrate <b>must not</b> be less than {@code 8000} nor greater than {@link Guild#getMaxBitrate()}!
     * <br><b>This is only available to {@link AudioChannel AudioChannels}</b>
     *
     * @param  bitrate
     *         The new bitrate for the selected {@link AudioChannel}
     *
     * @throws IllegalStateException
     *         If the selected channel is not an {@link AudioChannel}
     * @throws IllegalArgumentException
     *         If the provided bitrate is less than 8000 or greater than {@link Guild#getMaxBitrate()}.
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    Guild#getFeatures()
     */",net.dv8tion.jda.api.managers.channel.middleman
"@Nonnull
    public Role getRole()
    {
        return role;
    }","/**
     * The role for this event
     *
     * @return The role for this event
     */",net.dv8tion.jda.api.events.role
"@Nonnull
    @CheckReturnValue
    public RestAction<Void> approveSpeaker()
    {
        return getVoiceState().approveSpeaker();
    }","/**
     * Promote the member to speaker.
     * <p>This requires a non-null {@link #getNewTime()}.
     * You can use {@link GuildVoiceState#inviteSpeaker()} to invite the member to become a speaker if they haven't requested to speak.
     *
     * <p>This does nothing if the member is not connected to a {@link StageChannel}.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#VOICE_MUTE_OTHERS Permission.VOICE_MUTE_OTHERS}
     *         in the associated {@link StageChannel}
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.events.guild.voice
"public static GuildMemberUpdateAction guildMemberUpdate(int shardIndex, GuildMemberUpdate dispatch) {
        return new GuildMemberUpdateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildMemberUpdate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildMemberUpdateAction}
     */",discord4j.common.store.action.gateway
"@Override
        public OffsetDateTime getTimeCreated()
        {
            throw new UnsupportedOperationException(""The date of creation cannot be calculated"");
        }","/**
         * As the ids of roles are their position, the date of creation cannot be calculated.
         *
         * @throws java.lang.UnsupportedOperationException
         *         The date of creation cannot be calculated.
         */",net.dv8tion.jda.api.entities.templates
"public ActivityUpdateRequest getActivityUpdateRequest() {
        return activityUpdateRequest;
    }","/**
     * Converts this activity's data to an object for use by the gateway.
     *
     * @return an equivalent {@code ActivityUpdateRequest} for this activity
     */",discord4j.core.object.presence
"public static final Route APPLICATION_ROLE_CONNECTION_METADATA_GET = Route.get(""/applications/{application.id}/role-connections/metadata"");","/**
     * Returns a list of application role connection metadata objects for the given application.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records"">https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records</a>
     */",discord4j.rest.route
Mono<Long> countMessagesInChannel(long channelId);,"/**
     * Counts the number of messages present in the store for the given channel ID.
     *
     * @param channelId the channel ID
     * @return A {@link Mono} emitting the message count
     */",discord4j.common.store.api.layout
Flux<GatewayPayload<?>> receiver();,"/**
     * Obtains the {@link Flux} of raw payloads inbound from the gateway connection made by this client.
     *
     * @return a {@link Flux} of {@link GatewayPayload} values
     */",discord4j.gateway
"public static GetMessagesInChannelAction getMessagesInChannel(long channelId) {
        return new GetMessagesInChannelAction(channelId);
    }","/**
     * Creates an action to retrieve data for all messages present in a store for the given channel ID.
     *
     * @param channelId the channel ID
     * @return a new {@link GetMessagesInChannelAction}
     */",discord4j.common.store.action.read
"@Nonnull
    public EmbedBuilder setAuthor(@Nullable String name, @Nullable String url, @Nullable String iconUrl)
    {
        // We only check if the name is null because its presence is what determines if the author will appear in the embed.
        if (name == null)
        {
            this.author = null;
        }
        else
        {
            Checks.notLonger(name, MessageEmbed.AUTHOR_MAX_LENGTH, ""Name"");
            urlCheck(url);
            urlCheck(iconUrl);
            this.author = new MessageEmbed.AuthorInfo(name, url, iconUrl, null);
        }
        return this;
    }","/**
     * Sets the Author of the embed. The author appears in the top left of the embed and can have a small
     * image beside it along with the author's name being made clickable by way of providing a url.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/03-setAuthor.png"">Example</a></b>
     *
     * <p><b>Uploading images with Embeds</b>
     * <br>When uploading an <u>image</u>
     * (using {@link net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#sendFiles(net.dv8tion.jda.api.utils.FileUpload...) MessageChannel.sendFiles(...)})
     * you can reference said image using the specified filename as URI {@code attachment://filename.ext}.
     *
     * <p><u>Example</u>
     * <pre><code>
     * MessageChannel channel; // = reference of a MessageChannel
     * EmbedBuilder embed = new EmbedBuilder();
     * InputStream file = new URL(""https://http.cat/500"").openStream();
     * embed.setAuthor(""Minn"", null, ""attachment://cat.png"") // we specify this in sendFile as ""cat.png""
     *      .setDescription(""This is a cute cat :3"");
     * channel.sendFiles(FileUpload.fromData(file, ""cat.png"")).setEmbeds(embed.build()).queue();
     * </code></pre>
     *
     * @param  name
     *         the name of the author of the embed. If this is not set, the author will not appear in the embed
     * @param  url
     *         the url of the author of the embed
     * @param  iconUrl
     *         the url of the icon for the author
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the character limit for {@code name}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#AUTHOR_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#AUTHOR_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the character limit for {@code url}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the provided {@code url} is not a properly formatted http or https url.</li>
     *             <li>If the character limit for {@code iconUrl}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the provided {@code iconUrl} is not a properly formatted http or https url.</li>
     *         </ul>
     *
     * @return the builder after the author has been set
     */",net.dv8tion.jda.api
"Mono<GuildData> onGuildDelete(int shardIndex, GuildDelete dispatch);","/**
     * Updates the internal state of the store according to the given {@link GuildDelete} gateway dispatch. This
     * will typically perform a delete operation on a related {@link GuildData} that is already present in the store,
     * and clean up all entities that are associated to that guild, such as the channels, the roles, the emojis, the
     * members, the voice states and the messages.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * {@link GuildData} before the deletion
     */",discord4j.common.store.api.layout
"public Optional<String> getName() {
        return data.name().toOptional().flatMap(opt -> opt);
    }","/**
     * Gets the name of the channel, if given.
     * This field can be absent when you are not in a guild, e.g. when providing a DM channel.
     *
     * @return The name of the channel.
     */",discord4j.core.object.command
"@Nonnull
    @CheckReturnValue
    MemberAction setRoles(@Nullable Role... roles);","/**
     * Sets the roles of the user for the guild.
     * <br>This will then be visible with {@link net.dv8tion.jda.api.entities.Member#getRoles() Member.getRoles()}.
     *
     * @param  roles
     *         The roles, or {@code null}
     *
     * @throws IllegalArgumentException
     *         If one of the provided roles is null or not from the same guild
     *
     * @return The current MemberAction for chaining
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    InetSocketAddress getSocketAddress();","/**
     * The connected socket address for this audio connection. This can be useful for developers
     * to open their own socket for datagram sending and allows to avoid using {@link #getNextPacket(boolean)}.
     *
     * @return {@link InetSocketAddress} of the current UDP connection
     */",net.dv8tion.jda.api.audio.factory
"public long getAnswerId()
    {
        return answerId;
    }","/**
     * The id of the answer, usually the ordinal position.
     * <br>The first answer options is usually 1.
     *
     * @return The answer id
     */",net.dv8tion.jda.api.events.message.poll
DataObject body = DataObject.empty();,"/**
     * Creates a new TemplateManager instance
     *
     * @param template
     *        {@link Template Template} that should be modified
     */",net.dv8tion.jda.internal.managers
"public Snowflake getCommandId() {
        return getInteraction().getCommandInteraction()
                .flatMap(ApplicationCommandInteraction::getId)
                .orElseThrow(IllegalStateException::new); // should always be present for application commands
    }","/**
     * Gets the ID of the invoked command.
     *
     * @return The ID of the invoked command.
     */",discord4j.core.event.domain.interaction
"public HttpMethod getMethod() {
        return request.getRoute().getMethod();
    }","/**
     * Return the HTTP method.
     *
     * @return the {@link HttpMethod} of this {@link ClientRequest}
     */",discord4j.rest.http.client
"public Mono<Guild> getGuild() {
        return getClient().getGuildById(permissions.getGuildId());
    }","/**
     * Requests to retrieve the {@link Guild} that had an application command updated in this
     * event.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link Guild} involved in
     * the event. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.command
"@Nonnull
    public PermissionOverride getPermissionOverride()
    {
        return override;
    }","/**
     * The affected {@link PermissionOverride} that was updated.
     *
     * @return The override
     */",net.dv8tion.jda.api.events.guild.override
"@Nonnull
    @CheckReturnValue
    @Deprecated
    @ForRemoval(deadline = ""5.1.0"")
    StageInstanceAction setPrivacyLevel(@Nonnull StageInstance.PrivacyLevel level);","/**
     * Sets the {@link net.dv8tion.jda.api.entities.StageInstance.PrivacyLevel PrivacyLevel} for the stage instance.
     * <br>This indicates whether guild lurkers are allowed to join the stage instance or only guild members.
     *
     * @param  level
     *         The {@link net.dv8tion.jda.api.entities.StageInstance.PrivacyLevel}
     *
     * @throws IllegalArgumentException
     *         If the privacy level is null, {@link net.dv8tion.jda.api.entities.StageInstance.PrivacyLevel#UNKNOWN UNKNOWN}.
     *
     * @return The StageInstanceAction for chaining
     *
     * @deprecated Obsolete.
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    ByteBuffer getNextPacketRaw(boolean unused);","/**
     * Used to retrieve an audio packet to send to Discord. The packet provided is already converted to Opus and
     * encrypted, and as such is completely ready to be sent to Discord.
     *
     * <p>The {@link java.nio.ByteBuffer#position()} will be positioned on the start of the packet to send
     * and the {@link java.nio.ByteBuffer#limit()} at the end of it. Use {@link java.nio.ByteBuffer#remaining()}
     * to check the length of the packet.
     *
     * <p><b>Note:</b> When the AudioSendHandler cannot or does not provide a new packet to send, this method will return null.
     *
     * <p><u>The buffer used here may be used again on the next call to this getter, if you plan on storing the data, copy it.
     * The buffer was created using {@link ByteBuffer#allocate(int)} and is not direct.</u>
     *
     * @return Possibly-null {@link ByteBuffer} containing an encoded and encrypted packet
     *         of audio data ready to be sent to discord.
     */",net.dv8tion.jda.api.audio.factory
"public Flux<ApplicationCommandData> registerCommands(Snowflake guildId) {
        return bulkOverwriteCommands(guildId, commandRequests);
    }","/**
     * Submit the command definitions to Discord to register each application command in the given guild.
     *
     * @param guildId the guild chosen for command registration
     * @return a Flux with each command registration response from Discord if successful
     */",discord4j.rest.interaction
"public Publisher<?> onStoreChannelUpdate(StoreChannelUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild store channel is updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public EntityRetriever withRetrievalStrategy(EntityRetrievalStrategy retrievalStrategy) {
        return retrievalStrategy.apply(this);
    }","/**
     * Applies the given strategy to retrieve entities using this {@link GatewayDiscordClient}.
     *
     * @param retrievalStrategy the strategy to apply
     * @return an EntityRetriever able to retrieve entities using the given strategy
     */",discord4j.core
private static final Logger LOG = Logger.getLogger(RecorderScreenView.class);,"/*******************************************************************************
 * Copyright (c) 2018 Giulianini Luca Licensed under the Apache License, Version 2.0 (the ""License""); you may not use
 * this file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and limitations under the
 * License.
 *******************************************************************************/",recorder.view
"@Override
    public void setMinTimeSeparation(final int minTimeSeparation) {
        if (minTimeSeparation >= 0 && minTimeSeparation < 1000) {
            this.minTimeSeparation = minTimeSeparation;
        } else {
            throw new IllegalStateException(""Time must be greater than 0 and less than 1000"");
        }
    }","/**
     * Set the minimum time separation between two gestures.
     * <p>
     * If the time is too short a long gesture can be recognized multiple time according to update rate value
     *
     * @param minTimeSeparation
     *            the time separation in milliseconds, a value usually between 0 and 1000.
     */",jestures.core.recognition.gesturedata
"@Nullable
    public EmojiUnion getOldEmoji()
    {
        return getOldValue();
    }","/**
     * The old {@link EmojiUnion} for the {@link ForumTag}
     *
     * @return The old {@link EmojiUnion}
     */",net.dv8tion.jda.api.events.channel.forum.update
"public boolean isInline()
        {
            return inline;
        }","/**
         * If the field is in line.
         *
         * @return true if the field can be in line with other fields, false otherwise.
         */",net.dv8tion.jda.api.entities
"public static int getUnsignedInt(@Nonnull DataArray root, @Nonnull String path)
    {
        Integer integer = get(root, path, DataObject::getUnsignedInt, DataArray::getUnsignedInt);
        if (integer == null)
            pathError(path, ""unsigned int"");
        return integer;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     * <br>If the resulting value is a string, this will parse the string using {@link Integer#parseUnsignedInt(String)}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The unsigned int value at the given path
     */",net.dv8tion.jda.api.utils.data
"public static final Route WEBHOOK_DELETE = Route.delete(""/webhooks/{webhook.id}"");","/**
     * Delete a webhook permanently. User must be owner. Returns a 204 NO CONTENT response on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#delete-webhook"">
     * https://discord.com/developers/docs/resources/webhook#delete-webhook</a>
     */",discord4j.rest.route
"@Nonnull
    @Unmodifiable
    default List<TextChannel> getTextChannels()
    {
        return getGuild().getTextChannelCache().applyStream(stream ->
            stream.filter(channel -> equals(channel.getParentCategory()))
                  .sorted()
                  .collect(Helpers.toUnmodifiableList())
        );
    }","/**
     * All {@link TextChannel TextChannels}
     * listed for this Category
     *
     * @return Immutable list of all child TextChannels
     */",net.dv8tion.jda.api.entities.channel.concrete
"public static GetStickerByIdAction getStickerById(long guildId, long stickerId) {
        return new GetStickerByIdAction(guildId, stickerId);
    }","/**
     * Creates an action to retrieve data for the sticker corresponding to the given guild ID and sticker ID.
     *
     * @param guildId the guild ID
     * @param stickerId the sticker ID
     * @return a new {@link GetStickerByIdAction}
     */",discord4j.common.store.action.read
"void setPresence(@Nullable OnlineStatus status, @Nullable Activity activity);","/**
     * Sets two presence fields of this session.
     * <br>The third field stays untouched.
     *
     * @param  status
     *         The {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} for this session
     *         (See {@link #setStatus(OnlineStatus)})
     * @param  activity
     *         The {@link net.dv8tion.jda.api.entities.Activity Activity} for this session
     *         (See {@link #setActivity(net.dv8tion.jda.api.entities.Activity)} for more info)
     *
     * @throws java.lang.IllegalArgumentException
     *         If the specified OnlineStatus is {@link net.dv8tion.jda.api.OnlineStatus#UNKNOWN UNKNOWN}
     */",net.dv8tion.jda.api.managers
"@Nonnull
    public DiscordLocale getLocale()
    {
        return this.locale;
    }","/**
     * The preferred locale for this guild.
     *
     * @return The preferred {@link DiscordLocale} for this guild
     */",net.dv8tion.jda.api.entities.templates
"@Override
    public double getMinDtwThreashold() {
        return this.minDTWThreashold;
    }","/**
     * Get the threshold for gesture minimum acceptance.
     * <p>
     * Only gestures, that have a feature vector distance (by DTW) lower than minThreashold, are accepted.
     *
     *
     * @return represents the minimum distance above which a feature vector is accepted
     */",jestures.core.recognition.gesturedata
"public Publisher<?> onCategoryCreate(CategoryCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild channel category is created.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    default GuildManager addFeatures(@Nonnull String... features)
    {
        Checks.noneNull(features, ""Features"");
        return addFeatures(Arrays.asList(features));
    }","/**
     * Adds a {@link Guild#getFeatures() Guild Feature} to the list of features.
     * <br>The list of available features, including which ones can be configured, is available in the
     * <a href=""https://discord.com/developers/docs/resources/guild#guild-object-guild-features"" target=""_blank"">Official Discord API Documentation</a>.
     *
     * @param  features
     *         The features to add
     *
     * @throws IllegalArgumentException
     *         If any of the provided features is null
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
        public String getSessionId()
        {
            return sessionId;
        }","/**
         * The session id for the voice server session
         *
         * @return The session id
         */",net.dv8tion.jda.api.hooks
"@SuppressWarnings(""unchecked"")
	public static void register(@SuppressWarnings(""rawtypes"") Map tagletMap) {
		WRReturnTaglet tag = new WRReturnTaglet();
		Taglet t = (Taglet) tagletMap.get(tag.getName());
		if (t != null) {
			tagletMap.remove(tag.getName());
		}
		tagletMap.put(tag.getName(), tag);
	}","/**
	 * Register this Taglet.
	 * 
	 * @param tagletMap
	 *            the map to register this tag to.
	 */",net.winroad.wrdoclet.taglets
"public abstract void write(String format, Object... args);","/**
   * Writes a formatted string to the terminal output.
   *
   * @param format the format
   * @param args   the args
   */",io.github.augustoravazoli.termenu.io
"@Nonnull
    M moveUp(int amount);","/**
     * Moves the currently selected entity {@code amount} positions <b>UP</b>
     * in order by pushing all entities down by one position.
     *
     * @param  amount
     *         The amount of positions that should be moved
     *
     * @throws java.lang.IllegalStateException
     *         If no entity has been selected yet, use {@link #selectPosition(Object)}
     * @throws java.lang.IllegalArgumentException
     *         If the specified amount would cause the entity to go out-of-bounds
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    #moveTo(int)
     */",net.dv8tion.jda.api.requests.restaction.order
void run(boolean isLast) throws InterruptedException;,"/**
         * When called, establishes the session.
         * <br>This will return once the required payload to start the session has been delivered.
         *
         * @param  isLast
         *         True, if this is the last node in a queue worker.
         *         When true this will not wait for the payload to be delivered.
         *
         * @throws InterruptedException
         *         If the calling thread is interrupted
         */",net.dv8tion.jda.api.utils
"String value = tagReplacer.getValue(faction, fplayer);","/**
     * Replaces all variables in a plain raw line for a faction, using relations from fplayer
     *
     * @param faction for faction
     * @param fplayer from player
     * @param line    raw line from config with variables to replace for
     * @return clean line
     */",com.massivecraft.factions.zcore.util
boolean inVoiceChannel();,"/**
         * Used to determine if the member is currently in a voice channel.
         * <br>If this is false, getChannel() will return null
         * 
         * @return True, if the member is in a voice channel
         */",net.dv8tion.jda.api.entities
"@Nonnull
    M swapPosition(@Nonnull T swapEntity);","/**
     * Swaps the currently selected entity with the specified entity.
     * No other entities are affected by this operation.
     *
     * @param  swapEntity
     *         Target entity to switch positions with
     *
     * @throws java.lang.IllegalStateException
     *         If no entity has been selected yet, use {@link #selectPosition(Object)}
     * @throws java.lang.IllegalArgumentException
     *         If the specified position is out-of-bounds,
     *         or if the target entity is {@code null} or not
     *         available in this order action implementation
     *
     * @return The current OrderAction sub-implementation instance
     *
     * @see    #swapPosition(int)
     */",net.dv8tion.jda.api.requests.restaction.order
"public Mono<VoiceConnection> getVoiceConnection() {
        return getGuild()
                .flatMap(Guild::getVoiceConnection)
                .filterWhen(voiceConnection -> voiceConnection.getChannelId().map(channelId -> channelId.equals(getId())));
    }","/**
     * Returns the current voice connection registered for this stage channel's guild.
     *
     * @return A {@link Mono} of {@link VoiceConnection} for this stage channel's guild if present, or empty otherwise.
     * The resulting {@code Mono} will also complete empty if the registered voice connection is not associated with
     * this stage channel.
     */",discord4j.core.object.entity.channel
"Flux<VoiceStateData> getVoiceStatesInChannel(long guildId, long channelId);","/**
     * Retrieves data for all voice states present in the store for the given guild ID and channel ID.
     *
     * @param guildId the guild ID
     * @param channelId the channel ID
     * @return A {@link Flux} emitting the voice states, or empty if none is present
     */",discord4j.common.store.api.layout
"public static final Route GUILD_SCHEDULED_EVENT_DELETE = Route.delete(""/guilds/{guild.id}/scheduled-events/{event.id}"");","/**
     * Deletes a scheduled event for the given guild. Returns a 204 empty response on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event"">
     * https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event</a>
     */",discord4j.rest.route
"public void error(Throwable error) {
        log.info(format(context, ""Triggering error sequence: {}""), error.toString());
        close(DisconnectBehavior.retryAbruptly(error));
    }","/**
     * Initiates a close sequence with the given error. The session will be terminated abruptly and then instruct
     * consumers downstream that a reconnect should take place afterwards.
     *
     * @param error the cause for this session termination
     */",discord4j.voice
"@Nonnull
    @Unmodifiable
    default List<StageChannel> getStageChannels()
    {
        return getStageChannelCache().asList();
    }","/**
     * Gets all {@link StageChannel StageChannels} in the cache.
     * <br>In {@link Guild} cache, channels are sorted according to their position and id.
     *
     * <p>This copies the backing store into a list. This means every call
     * creates a new list with O(n) complexity. It is recommended to store this into
     * a local variable or use {@link #getStageChannelCache()} and use its more efficient
     * versions of handling these values.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return An immutable List of {@link StageChannel StageChannels}.
     */",net.dv8tion.jda.api.entities.channel.attribute
void setConnectTimeout(long timeout);,"/**
     * Sets the amount of time, in milliseconds, that will be used as the timeout when waiting for the audio connection
     * to successfully connect. The default value is 10 second (10,000 milliseconds).
     * <br><b>Note</b>: If you set this value to 0, you can remove timeout functionality and JDA will wait FOREVER for the connection
     * to be established. This is no advised as it is possible that the connection may never be established.
     *
     * @param timeout
     *        The amount of time, in milliseconds, that should be waited when waiting for the audio connection
     *        to be established.
     */",net.dv8tion.jda.api.managers
"public LegacyVoiceChannelCreateSpec setParentId(@Nullable Snowflake parentId) {
        requestBuilder.parentId(parentId == null ? Possible.absent() : Possible.of(parentId.asString()));
        return this;
    }","/**
     * Sets the parent ID for the created {@link VoiceChannel}.
     * <p>
     * The parent ID is equivalent to a {@link Category} ID.
     *
     * @param parentId The {@code Snowflake} of the parent {@code Category}.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public HttpMethod getMethod() {
        return method;
    }","/**
     * Return the HTTP method for this route.
     *
     * @return the {@link HttpMethod} of this {@link Route}
     */",discord4j.rest.route
"@Nonnull
    public EmbedBuilder setAuthor(@Nullable String name, @Nullable String url)
    {
        return setAuthor(name, url, null);
    }","/**
     * Sets the Author of the embed. The author appears in the top left of the embed and can have a small
     * image beside it along with the author's name being made clickable by way of providing a url.
     * This convenience method just sets the name and the url.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/03-setAuthor.png"">Example</a></b>
     *
     * @param  name
     *         the name of the author of the embed. If this is not set, the author will not appear in the embed
     * @param  url
     *         the url of the author of the embed
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the character limit for {@code name}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#AUTHOR_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#AUTHOR_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the character limit for {@code url}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#URL_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the provided {@code url} is not a properly formatted http or https url.</li>
     *         </ul>
     *
     * @return the builder after the author has been set
     */",net.dv8tion.jda.api
"public ApplicationCommand.Type getCommandType() {
        return getInteraction().getCommandInteraction()
                .flatMap(ApplicationCommandInteraction::getApplicationCommandType)
                .orElseThrow(IllegalStateException::new); // should always be present for app command auto-complete
    }","/**
     * Gets the type of the invoked command.
     *
     * @return The type of the invoked command.
     */",discord4j.core.event.domain.interaction
"public void setMessage(String message) {
        this.message = message;
    }","/**
     * Set the power loss message.
     *
     * @param message of powerloss
     */",com.massivecraft.factions.event
"public Mono<GuildChannel> getChannel() {
        return gateway.getChannelById(getChannelId()).cast(GuildChannel.class);
    }","/**
     * Requests to retrieve the channel associated to this overwrite.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link GuildChannel} associated to this
     * overwrite. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
    @CheckReturnValue
    GuildStickerManager setTags(@Nonnull Collection<String> tags);","/**
     * Sets the <b><u>tags</u></b> of the sticker.
     * <br>These are used for auto-complete when sending a message in the client, and for the sticker picker menu.
     *
     * <p>The combined list of sticker tags <b>must</b> at most be 200 characters long!
     *
     * <p><b>Example</b>: {@code catDance} or {@code dogWave}
     *
     * @param  tags
     *         The new tags for the sticker (up to 200 characters)
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code tags} is {@code null}</li>
     *             <li>If {@code tags} is empty</li>
     *             <li>If {@code tags} contains {@code null} or empty strings</li>
     *             <li>If the concatenated tags are more than 200 characters long (including commas between tags)</li>
     *         </ul>
     *
     * @return GuildStickerManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"static RetryingTransformer retryWhen(RouteMatcher routeMatcher, reactor.util.retry.Retry retry) {
        return new RetryingTransformer(routeMatcher, retry);
    }","/**
     * Applies a custom retry strategy to the requests matching the given {@link RouteMatcher}, effectively
     * suppressing the {@link ClientException} that would be forwarded otherwise.
     * <p>
     * Care must be taken when applying this transformation while using a long running retry factory, as it may
     * effectively block further requests on the same rate limiting bucket.
     *
     * @param routeMatcher the {@link RouteMatcher} determining whether to match a particular request
     * @param retry the {@link reactor.util.retry.Retry} factory to install while applying this transformation
     * @return a {@link ResponseFunction} that transforms matching response statuses into sequence that retries the
     * request once after waiting 1 second.
     */",discord4j.rest.response
void cancel();,"/**
     * Cancels the task and will emit a {@link java.util.concurrent.CancellationException CancellationException}.
     */",net.dv8tion.jda.api.utils.concurrent
public abstract boolean isEmpty();,"/**
     * Whether this builder is considered empty, this checks for all <em>required</em> fields of the request type.
     * <br>On a create request, this checks for {@link #setContent(String) content}, {@link #setEmbeds(Collection) embeds}, {@link #setComponents(Collection) components}, and {@link #setFiles(Collection) files}.
     * <br>An edit request is only considered empty if no setters were called. And never empty, if the builder is a {@link MessageEditRequest#setReplace(boolean) replace request}.
     *
     * @return True, if the builder state is empty
     */",net.dv8tion.jda.api.utils.messages
"@Nonnull
    @CheckReturnValue
    public RestAction<Member> retrieveMember()
    {
        if (member != null)
            return new CompletedRestAction<>(getJDA(), member);
        if (!getChannel().getType().isGuild())
            throw new IllegalStateException(""Cannot retrieve member for a private reaction not from a guild"");
        return getGuild().retrieveMemberById(getUserIdLong());
    }","/**
     * Retrieves the {@link Member} who owns the reaction.
     * <br>If a member is known, this will return {@link #getMember()}.
     *
     * <p>Note that banning a member will also fire {@link MessageReactionRemoveEvent} and no member will be available
     * in those cases. An {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MEMBER UNKNOWN_MEMBER} error response
     * should be the failure result.
     *
     * @throws IllegalStateException
     *         If this event is not from a guild
     *
     * @return {@link RestAction} - Type: {@link Member}
     *
     * @since  4.2.1
     */",net.dv8tion.jda.api.events.message.react
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction replyPoll(@Nonnull MessagePollData poll)
    {
        Checks.notNull(poll, ""Message Poll"");
        return deferReply().setPoll(poll);
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#POLL_INVALID_CHANNEL_TYPE POLL_INVALID_CHANNEL_TYPE}
     *     <br>This channel does not allow polls</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#POLL_WITH_UNUSABLE_EMOJI POLL_WITH_UNUSABLE_EMOJI}
     *     <br>This poll uses an external emoji that the bot is not allowed to use</li>
     * </ul>
     *
     * @param  poll
     *         The {@link MessagePollData} to send
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link ReplyCallbackAction}
     *
     * @see    net.dv8tion.jda.api.utils.messages.MessageCreateBuilder MessageCreateBuilder
     * @see    MessagePollBuilder
     */",net.dv8tion.jda.api.interactions.callbacks
"public static final Route GUILD_TEMPLATE_GET = Route.get(""/guilds/templates/{template.code}"");","/**
     * Get a template. Returns a template object for the given code on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/template#get-template"">
     *         https://discord.com/developers/docs/resources/template#get-template</a>
     */",discord4j.rest.route
"@Nonnull
    static <E extends ISnowflake> SnowflakeCacheView<E> allSnowflakes(@Nonnull Collection<? extends SnowflakeCacheView<E>> cacheViews)
    {
        Checks.noneNull(cacheViews, ""Collection"");
        return new UnifiedCacheViewImpl.UnifiedSnowflakeCacheView<>(cacheViews::stream);
    }","/**
     * Creates a combined {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView}
     * for all provided SnowflakeCacheView implementations.
     * <br>This allows to combine cache of multiple JDA sessions or Guilds.
     *
     * @param  cacheViews
     *         Collection of {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView} implementations
     *
     * @param  <E>
     *         The target type of the chain
     *
     * @return Combined SnowflakeCacheView spanning over all provided implementation instances
     */",net.dv8tion.jda.api.utils.cache
"public static Builder builder(int shardIndex, int shardCount) {
        return new Builder(ShardInfo.create(shardIndex, shardCount));
    }","/**
     * Create a builder to create an {@link IdentifyOptions} using the given shard information.
     *
     * @param shardIndex the shard index for authentication
     * @param shardCount the shard count for authentication
     * @return a {@link Builder}
     */",discord4j.gateway
"public int getIndex() {
        return index;
    }","/**
     * Return the shard index represented by this {@link ShardInfo}.
     *
     * @return the shard number (0-based)
     */",discord4j.gateway
"public static long getLong(@Nonnull DataArray root, @Nonnull String path)
    {
        Long longValue = get(root, path, DataObject::getLong, DataArray::getLong);
        if (longValue == null)
            pathError(path, ""long"");
        return longValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     * <br>If the resulting value is a string, this will parse the string using {@link Long#parseLong(String)}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The long value at the given path
     */",net.dv8tion.jda.api.utils.data
"public VoiceState getCurrent() {
        return current;
    }","/**
     * Gets the current, new, {@link VoiceState} that has been updated in this event.
     *
     * @return The current {@link VoiceState}.
     */",discord4j.core.event.domain
"public Optional<Instant> getLastPinTimestamp() {
        return Optional.ofNullable(lastPinTimestamp);
    }","/**
     * Gets the ISO8601 timestamp of when the last pinned {@link discord4j.core.object.entity.Message} w
     * as pinned, if present. This is NOT the timestamp of when the {@code Message} was created.
     * 
     * @return The timestamp of the when the last pinned {@link discord4j.core.object.entity.Message} was pinned,
     * if present.
     */",discord4j.core.event.domain.channel
"@Nullable
    AudioSendHandler getSendingHandler();","/**
     * The currently set {@link net.dv8tion.jda.api.audio.AudioSendHandler AudioSendHandler}. If there is
     * no sender currently set, this method will return {@code null}.
     *
     * @return The currently active {@link net.dv8tion.jda.api.audio.AudioSendHandler AudioSendHandler} or {@code null}.
     */",net.dv8tion.jda.api.managers
"@Nonnull
    String getModalId();","/**
     * Returns the custom id of the Modal in question
     *
     * @return Custom id
     * 
     * @see    Modal.Builder#setId(String)
     */",net.dv8tion.jda.api.interactions.modals
boolean isIdle();,"/**
     * Whether the current session is marked as afk or not.
     *
     * <p>This is relevant to client accounts to monitor
     * whether new messages should trigger mobile push-notifications.
     *
     * @return True if this session is marked as afk
     */",net.dv8tion.jda.api.managers
executor = provider.provide(shardId);,"/**
     * This method creates the internal {@link java.util.concurrent.ScheduledExecutorService ScheduledExecutorService}.
     * It is intended as a hook for custom implementations to create their own executor.
     *
     * @return A new ScheduledExecutorService
     */",net.dv8tion.jda.api.sharding
Mono<Void> update(UserUpdateDTO dto);,"/**
     * This method is used to update the user entity.
     *
     * @param dto -> UserUpdateDTO comes in and all its fields must be not null
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.service.user
"public Publisher<?> onSessionInvalidated(SessionInvalidatedEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a gateway session has been invalidated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public boolean isFinalized() {
        return this.data.isFinalized();
    }","/**
     * Gets if the poll result is finalized.
     *
     * @return {@code true} if the poll results are finalized, {@code false} otherwise
     */",discord4j.core.object.entity.poll
"public GatewayReactorResources(ReactorResources parent) {
        super(parent.getHttpClient(), parent.getTimerTaskScheduler(), parent.getBlockingTaskScheduler());
        this.payloadSenderScheduler = DEFAULT_PAYLOAD_SENDER_SCHEDULER.get();
    }","/**
     * Create Gateway resources based off {@link ReactorResources} properties, and providing defaults for the
     * remaining properties.
     *
     * @param parent the resources instance to get properties from
     */",discord4j.gateway
"@Nonnull
        String getEffectiveName();","/**
         * Gets the visible name of the member. If they have a nickname set,
         * this will be their nickname. Otherwise, it will be their username.
         * 
         * @return never-null String containing the member's effective (visible) name
         */",net.dv8tion.jda.api.entities
"@Override
        public String toString() {
            return ""[retry_started]"";
        }","/**
     * Propagated when a reconnection attempt with IDENTIFY has started.
     */",discord4j.gateway
void restart(int id);,"/**
     * Restarts the shards with the given id only.
     * <br> If there is no shard with the given Id, this method acts like {@link #start(int)}.
     *
     * @param  id
     *         The id of the target shard
     *
     * @throws java.lang.IllegalArgumentException
     *         If shardId is negative or higher than maxShardId
     * @throws java.util.concurrent.RejectedExecutionException
     *         If {@link #shutdown()} has already been invoked
     */",net.dv8tion.jda.api.sharding
"void stop(boolean shutdown, @Nonnull Runnable callback);","/**
     * Indication to stop accepting new requests.
     *
     * @param shutdown
     *        Whether to also cancel previously queued request
     * @param callback
     *        Function to call once all requests are completed, used for final cleanup
     */",net.dv8tion.jda.api.requests
"@Nonnull
    @CheckReturnValue
    GuildManager setSystemChannel(@Nullable TextChannel systemChannel);","/**
     * Sets the system {@link net.dv8tion.jda.api.entities.channel.concrete.TextChannel TextChannel} of this {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  systemChannel
     *         The new system channel for this {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         or {@code null} to reset
     *
     * @throws IllegalArgumentException
     *         If the provided channel is not from this guild
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"void addAllFeatureVectorsAndSerialize(String gestureName, List<List<Vector2D>> featureVector) throws IOException;","/**
     * Serialize all gesture feature vector.
     *
     * @param gestureName
     *            the {@link String} gesture name
     * @param featureVector
     *            the {@link List} of {@link List} of feature vector.
     * @throws IOException
     *             the {@link IOException}
     * @throws JsonIOException
     *             the {@link JsonIOException} if can't serialize
     */",jestures.core.serialization
"@Nullable
    public Member getNewOwner()
    {
        return getNewValue();
    }","/**
     * The new owner
     *
     * @return The new owner
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    public EnumSet<Permission> getOldPermissions()
    {
        return getOldValue();
    }","/**
     * The old permissions
     *
     * @return The old permissions
     */",net.dv8tion.jda.api.events.role.update
"public static LineChart<Number, Number> createDerivativeLineChart(final int timeRange) {
        final NumberAxis x2Axis = new NumberAxis(""Space"", -100, 100, 1);
        final NumberAxis x1Axis = new NumberAxis(""Time"", 0, timeRange, 1);
        final LineChart<Number, Number> lineChart = new LineChart<>(x1Axis, x2Axis);
        lineChart.getYAxis().setAutoRanging(false);
        lineChart.getYAxis().setAutoRanging(false);
        lineChart.setAnimated(false);
        return lineChart;
    }","/**
     * Create the charts.
     * 
     * @param timeRange
     *            the max time range
     * @return the {@link LineChart}
     */",jestures.core.view.utils
"public Mono<Void> delete(@Nullable final String reason) {
        return restClient.getGuildService().deleteGuildRole(guildId, id, reason);
    }","/**
     * Requests to delete this role while optionally specifying the reason.
     *
     * @param reason The reason, if present.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the role has been deleted. If
     * an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
Flux<Member> getGuildMembers(Snowflake guildId);,"/**
     * Requests to retrieve the guild's members.
     *
     * @param guildId   the ID of the guild.
     * @return A {@link Flux} that continually emits the {@link Member members} of the guild. If an error is received,
     *         it is emitted through the {@code Flux}.
     */",discord4j.core.retriever
"public Builder indices(Function<Integer, Publisher<Integer>> shardIndexSource) {
            this.shardIndexSource = Objects.requireNonNull(shardIndexSource);
            return this;
        }","/**
         * Set a generator function to derive a {@link Publisher} of shard indices to identify to Discord Gateway.
         * Defaults to identify all shards. Any invocation of this method will also replace the previously set value
         * at {@link #indices(int...)}.
         *
         * @param shardIndexSource the generator function to determine the shards to identify
         * @return this builder
         */",discord4j.core.shard
"@Nonnull
    public CompletableFuture<InputStream> download(int size)
    {
        return download(getUrl(size));
    }","/**
     * Retrieves the {@link InputStream} of this image at the specified size.
     * <br><b>The image may not be resized at any size, usually Discord only allows for a few powers of 2</b>, so numbers like 128, 256, 512..., 100 might also be a valid size.
     *
     * <p>If the image is not of a valid size, the CompletableFuture will hold an exception since the HTTP request would have returned a 404.
     *
     * @param  size
     *         The size of this image
     *
     * @return {@link CompletableFuture} which holds an {@link InputStream}, the {@link InputStream} must be closed manually.
     */",net.dv8tion.jda.api.utils
"public static final Route WEBHOOK_TOKEN_GET = Route.get(""/webhooks/{webhook.id}/{webhook.token}"");","/**
     * Same as {@link #WEBHOOK_GET}, except this call does not require authentication and returns no user in the
     * webhook object.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#get-webhook-with-token""
     * >https://discord.com/developers/docs/resources/webhook#get-webhook-with-token</a>
     */",discord4j.rest.route
"public long asLong() {
        try {
            return Long.parseLong(asString());
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException(""Choice value cannot be converted to long"", e);
        }
    }","/**
     * Gets the value of this choice as a long.
     *
     * @return The value of this choice as a long.
     */",discord4j.core.object.command
String key = entry.getKey();,"/**
     * Create a new {@link ClientRequest} from the given request template.
     *
     * @param request the {@link DiscordWebRequest} template
     */",discord4j.rest.http.client
World world = chunk.getWorld();,"/**
     * Used for checking if regions are located in a chunk
     * @param chunk Chunk in question.
     * @return
     */",com.massivecraft.factions.integration
"public <T extends MessageComponent> List<T> getComponents(Class<T> componentType) {
        return getComponents()
                .stream()
                .flatMap(it -> {
                    if (it instanceof ActionRow) {
                        ActionRow row = (ActionRow) it;
                        return row.getChildren().stream();
                    }
                    return Stream.empty();
                })
                .flatMap(it -> {
                    if (componentType.isAssignableFrom(it.getClass())) {
                        return Stream.of(componentType.cast(it));
                    }
                    return Stream.empty();
                })
                .collect(Collectors.toList());
    }","/**
     * Gets the components from the modal that match the given component type.
     *
     * @param componentType the modal component type to return
     * @return The components from the modal
     */",discord4j.core.event.domain.interaction
"public static final Route DELETE_TEST_ENTITLEMENT = Route.delete(""/applications/{application.id}/entitlements/{entitlement.id}"");","/**
     * Deletes a test entitlement for a given application.
     *
     * @see <a href=""https://discord.com/developers/docs/monetization/entitlements#delete-test-entitlement"">Docs</a>
     */",discord4j.rest.route
"public Mono<InviteData> delete(@Nullable String reason) {
        return restClient.getInviteService().deleteInvite(code, reason);
    }","/**
     * Delete this resource from the Discord API.
     *
     * @param reason include a reason for audit log purposes, can be {@code null}
     * @return a Mono with the {@link InviteData} contents if successful, otherwise an empty Mono
     */",discord4j.rest.entity
"@Nonnull
    public List<MessageEmbed.Field> getFields()
    {
        return fields;
    }","/**
     * <b>Modifiable</b> list of {@link net.dv8tion.jda.api.entities.MessageEmbed MessageEmbed} Fields that the builder will
     * use for {@link #build()}.
     * <br>You can add/remove Fields and restructure this {@link java.util.List List} and it will then be applied in the
     * built MessageEmbed. These fields will be available again through {@link net.dv8tion.jda.api.entities.MessageEmbed#getFields() MessageEmbed.getFields()}.
     *
     * @return Mutable List of {@link net.dv8tion.jda.api.entities.MessageEmbed.Field Fields}
     */",net.dv8tion.jda.api
"@Nonnull
    String getUserId();","/**
     * The id of the user who will be added by this task
     *
     * @return The id of the user
     */",net.dv8tion.jda.api.requests.restaction
AttachedFile attachment = message.getAttachments().get(0);,"/**
     * The {@link AttachedFile AttachedFiles} that should be attached to the message.
     * <br>This will replace all the existing attachments on the message, you can use {@link Collections#emptyList()} or {@code null} to clear all attachments.
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * <p><b>Example</b><br>
     * <pre>{@code
     * // Here ""message"" is an instance of the Message interface
     *
     * // Creates a list of the currently attached files of the message, important to get the generic parameter of the list right
     * List<AttachedFile> attachments = new ArrayList<>(message.getAttachments());
     *
     * // The name here will be ""cat.png"" to discord, what the file is called on your computer is irrelevant and only used to read the data of the image.
     * FileUpload file = FileUpload.fromData(new File(""mycat-final-copy.png""), ""cat.png""); // Opens the file called ""cat.png"" and provides the data used for sending
     *
     * // Adds another file to upload in addition the current attachments of the message
     * attachments.add(file);
     *
     * message.editMessage(""New content"")
     *        .setAttachments(attachments)
     *        .queue();
     * }</pre>
     *
     * @param  attachments
     *         The {@link AttachedFile AttachedFiles} to attach to the message,
     *         null or an empty list will set the attachments to an empty list and remove them from the message
     *
     * @throws IllegalArgumentException
     *         If null is provided inside the collection
     *
     * @return The same instance for chaining
     *
     * @see    Collections#emptyList()
     * @see    AttachedFile#fromAttachment(String)
     * @see    AttachedFile#fromData(InputStream, String)
     */",net.dv8tion.jda.api.utils.messages
"public boolean isHoisted()
    {
        return this.hoisted;
    }","/**
     * Whether this {@link TemplateRole Role} is hoisted
     * <br>Members in a hoisted role are displayed in their own grouping on the user-list
     *
     * @return True, if this {@link TemplateRole Role} is hoisted.
     */",net.dv8tion.jda.api.entities.templates
"public boolean isSendingVideo()
    {
        return video;
    }","/**
     * True if this user started sending video. False if the user stopped sending video.
     *
     * @return True, if the user started sending video
     */",net.dv8tion.jda.api.events.guild.voice
"default boolean canInteract(Member issuer)
    {
        return PermissionUtil.canInteract(issuer, this);
    }","/**
     * Whether the specified Member can interact with this emoji
     *
     * @param  issuer
     *         The User to test
     *
     * @return True, if the provided Member can use this emoji
     */",net.dv8tion.jda.api.entities.emoji
"default Mono<GuildScheduledEventData> getScheduledEventById(long guildId, long eventId) {
        return Mono.empty();
    }","/**
     * Retrieves data for the guild scheduled event corresponding to the given guild ID and event ID.
     *
     * @param guildId the guild ID
     * @param eventId the event ID
     * @return A {@link Mono} emitting the scheduled event, or empty if not found
     * @since 3.2.5
     */",discord4j.common.store.api.layout
"public Optional<StoreChannel> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the {@link StoreChannel} that was updated in this event, if present.
     * This may not be available if {@code StoreChannels} are not stored.
     *
     * @return The old version of the updated {@link StoreChannel}, if present.
     */",discord4j.core.event.domain.channel
"@Nonnull
        public ResourceBundleLocalizationFunction build()
        {
            return new ResourceBundleLocalizationFunction(bundles);
        }","/**
         * Builds the resource bundle localization function.
         *
         * @return The new {@link ResourceBundleLocalizationFunction}
         */",net.dv8tion.jda.api.interactions.commands.localization
"@Nullable
    String getIconId();","/**
     * The id hash for the icon of this team.
     *
     * @return The icon id, or null if no icon is applied
     *
     * @see    #getIconUrl()
     */",net.dv8tion.jda.api.entities
"public OnboardingPromptOptionData getData() {
        return this.data;
    }","/**
     * Gets the raw data for this option.
     *
     * @return The raw data for this option.
     */",discord4j.core.object.onboarding
"@Nonnull
    CustomEmoji asCustom();","/**
     * Returns the underlying {@link CustomEmoji} if applicable.
     *
     * @throws IllegalStateException
     *         If this is not a {@link CustomEmoji}
     *
     * @return The {@link CustomEmoji}
     */",net.dv8tion.jda.api.entities.emoji
"@Nonnull
    default MessageCreateAction setMessageReference(@Nullable Message message)
    {
        return setMessageReference(message == null ? null : message.getId());
    }","/**
     * Message reference used for a reply.
     * <br>The client will show this message as a reply to the target message.
     *
     * <p>You can only reply to messages from the same channel.
     * By default, this will mention the author of the target message, this can be disabled using {@link #mentionRepliedUser(boolean)}.
     *
     * <p>This also requires {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY Permission.MESSAGE_HISTORY} in the channel.
     * If this permission is missing, you receive {@link net.dv8tion.jda.api.requests.ErrorResponse#REPLY_FAILED_MISSING_MESSAGE_HISTORY_PERM ErrorResponse.REPLY_FAILED_MISSING_MESSAGE_HISTORY_PERM}.
     *
     * <p>If the target message does not exist, this will result in {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE ErrorResponse.UNKNOWN_MESSAGE}.
     * You can use {@link #failOnInvalidReply(boolean)} to allow unknown or deleted messages.
     *
     * @param  message
     *         The target message to reply to
     *
     * @return The same instance for chaining
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    public JDA getJDA()
    {
        return this.api;
    }","/**
     * The {@link net.dv8tion.jda.api.JDA JDA} instance used to create this Template instance.
     *
     * @return The corresponding JDA instance
     */",net.dv8tion.jda.api.entities.templates
"public Publisher<?> onComponentInteraction(ComponentInteractionEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user interacts with a component.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"final Route.CompiledRoute route = Route.Templates.SYNC_TEMPLATE.compile(guild.getId(), this.code);","/**
     * Syncs this template.
     * <br>Requires {@link net.dv8tion.jda.api.Permission#MANAGE_SERVER MANAGE_SERVER} in the template's guild.
     * Will throw an {@link net.dv8tion.jda.api.exceptions.InsufficientPermissionException InsufficientPermissionException} otherwise.
     *
     * @throws IllegalStateException
     *         If the account is not in the template's guild
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_SERVER MANAGE_SERVER} in the template's guild
     *
     * @return {@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type: {@link net.dv8tion.jda.api.entities.templates.Template Template}
     *         <br>The synced Template object
     */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    default Guild getGuild()
    {
        return getEmoji().getGuild();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Guild Guild} this Manager's
     * {@link RichCustomEmoji} is in.
     * <br>This is logically the same as calling {@code getEmoji().getGuild()}
     *
     * @return The parent {@link net.dv8tion.jda.api.entities.Guild Guild}
     */",net.dv8tion.jda.api.managers
RestAction<PrivateChannel> action = user.openPrivateChannel();,"/**
     * Submits a Request for execution.
     * <br>Using the default callback functions:
     * {@link #setDefaultSuccess(Consumer)} and {@link #setDefaultFailure(Consumer)}
     *
     * <p>To access the response you can use {@link #queue(java.util.function.Consumer)}
     * and to handle failures use {@link #queue(java.util.function.Consumer, java.util.function.Consumer)}.
     *
     * <p><b>This method is asynchronous</b>
     *
     * <p><b>Example</b><br>
     * <pre>{@code
     * public static void sendMessage(MessageChannel channel, String content)
     * {
     *     // sendMessage returns ""MessageAction"" which is a specialization for ""RestAction<Message>""
     *     RestAction<Message> action = channel.sendMessage(content);
     *     // call queue() to send the message off to discord.
     *     action.queue();
     * }
     * }</pre>
     *
     * @throws java.util.concurrent.RejectedExecutionException
     *         If the requester has been shutdown by {@link JDA#shutdown()} or {@link JDA#shutdownNow()}
     *
     * @see net.dv8tion.jda.api.entities.channel.middleman.MessageChannel#sendMessage(java.lang.CharSequence) MessageChannel.sendMessage(CharSequence)
     * @see #queue(java.util.function.Consumer) queue(Consumer)
     * @see #queue(java.util.function.Consumer, java.util.function.Consumer) queue(Consumer, Consumer)
     */",net.dv8tion.jda.api.requests
"@Nonnull
    @CheckReturnValue
    default M putPermissionOverride(@Nonnull IPermissionHolder permHolder, @Nullable Collection<Permission> allow, @Nullable Collection<Permission> deny)
    {
        long allowRaw = allow == null ? 0 : Permission.getRaw(allow);
        long denyRaw  = deny  == null ? 0 : Permission.getRaw(deny);
        return putPermissionOverride(permHolder, allowRaw, denyRaw);
    }","/**
     * Adds an override for the specified {@link IPermissionHolder IPermissionHolder}
     * with the provided permission sets as allowed and denied permissions. If the permission holder already
     * had an override on this channel it will be replaced instead.
     * <br>Example: {@code putPermissionOverride(guild.getSelfMember(), EnumSet.of(Permission.MESSAGE_SEND, Permission.VIEW_CHANNEL), null)}
     *
     * @param  permHolder
     *         The permission holder
     * @param  allow
     *         The permissions to grant, or null
     * @param  deny
     *         The permissions to deny, or null
     *
     * @throws IllegalArgumentException
     *         If the provided permission holder is {@code null}
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         in this channel, or tries to set permissions it does not have without having {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS} explicitly for this channel through an override.
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    #putPermissionOverride(IPermissionHolder, long, long)
     * @see    java.util.EnumSet EnumSet
     */",net.dv8tion.jda.api.managers.channel.attribute
"@Nonnull
    static <E extends ISnowflake> SnowflakeCacheView<E> allSnowflakes(@Nonnull Supplier<? extends Stream<? extends SnowflakeCacheView<E>>> generator)
    {
        Checks.notNull(generator, ""Generator"");
        return new UnifiedCacheViewImpl.UnifiedSnowflakeCacheView<>(generator);
    }","/**
     * Creates a combined {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView}
     * for all provided SnowflakeCacheView implementations.
     * <br>This allows to combine cache of multiple JDA sessions or Guilds.
     *
     * @param  generator
     *         Stream generator of {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView} implementations
     *
     * @param  <E>
     *         The target type of the chain
     *
     * @return Combined SnowflakeCacheView spanning over all provided implementation instances
     */",net.dv8tion.jda.api.utils.cache
"public ShardingStrategy build() {
            return new DefaultShardingStrategy(this);
        }","/**
         * Create the {@link ShardingStrategy}.
         *
         * @return a custom {@link ShardingStrategy}
         */",discord4j.core.shard
CompletableFuture<Boolean> isConnected();,"/**
     * Checks asynchronously if there is an active mysql-database-connection
     * @return boolean that shows whether an active database-connection exists
     */",io.github.heliumdioxid.database.api
"public Publisher<?> onAutoModRuleUpdate(AutoModRuleUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an automod rule has been updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    AutoModRuleManager setEnabled(boolean enabled);","/**
     * Sets the <b><u>enabled</u></b> state of the selected {@link AutoModRule}.
     *
     * <p>When a rule is disabled, it will not be applied to any messages.
     *
     * @param  enabled
     *         True, if the selected {@link AutoModRule} should be enabled
     *
     * @return AutoModRuleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    default CommandEditAction addSubcommands(@Nonnull Collection<? extends SubcommandData> subcommands)
    {
        Checks.noneNull(subcommands, ""Subcommands"");
        return addSubcommands(subcommands.toArray(new SubcommandData[0]));
    }","/**
     * Add up to 25 {@link SubcommandData Subcommands} to this command.
     * <br>This will replace any existing options/subcommands/groups on the command.
     *
     * @param  subcommands
     *         The subcommands to add
     *
     * @throws IllegalArgumentException
     *         If null is provided, or more than 25 subcommands are provided.
     *         Also throws if you try to mix subcommands/options/groups in one command.
     *
     * @return The CommandEditAction instance, for chaining
     */",net.dv8tion.jda.api.requests.restaction
"public Optional<Snowflake> getGuildId() {
       return Optional.ofNullable(guildId).map(Snowflake::of);
    }","/**
     * Gets the {@link Snowflake} ID of the {@link Guild} the user has started typing in, if this happened in a guild.
     *
     * @return The {@link Snowflake} ID of the {@link Guild} the user has started typing in, if this happened in a guild.
     */",discord4j.core.event.domain.channel
"private static Snowflake idFromRoleData(RoleData data) {
        return Snowflake.of(data.id());
    }","/**
     * Simple utility method for getting a Snowflake ID from RoleData for comparison.
     *
     * @param data RoleData to get the ID from
     * @return A Snowflake representation of the role's ID
     */",discord4j.rest.util
"B create(byte [] sqn, byte [] amf);","/**
     * Create {@link threegpp.milenage.MilenageBuffer} object from SQN and AMF values.
     *
     * @param sqn  Array of bytes with length equal to {@link Milenage#SQN_LEN_BYTES}.
     * @param amf  Array of bytes with length equal to {@link Milenage#AMF_LEN_BYTES}.
     * @return  {@link threegpp.milenage.MilenageBuffer} object.
     */",threegpp.milenage
"public static CountTotalAction countUsers() {
        return new CountTotalAction(CountableEntity.USERS);
    }","/**
     * Creates an action to count the number of users present in a store.
     *
     * @return a new {@link CountTotalAction}
     */",discord4j.common.store.action.read
"String sanitized = MarkdownSanitizer.escape(input, ~MarkdownSanitizer.MONO);","/**
     * Escapes already existing monospace (single backtick) regions in the input
     * and applies monospace formatting to the entire string.
     * <br>The resulting string will be {@code ""`"" + escaped(input) + ""`""}.
     *
     * @param  input
     *         The input to monospace
     *
     * @return The resulting output
     */",net.dv8tion.jda.api.utils
"public InteractionResponse getInteractionResponse() {
        return response;
    }","/**
     * Returns a REST-only handler for common operations related to an interaction response associated with this event.
     *
     * @return a handler aggregating a collection of REST API methods to work with an interaction response
     * @see #editReply()
     * @see #getReply()
     * @see #deleteReply()
     * @see #createFollowup()
     * @see #editFollowup(Snowflake)
     * @see #deleteFollowup(Snowflake)
     */",discord4j.core.event.domain.interaction
"public static final Route CURRENT_USER_GUILD_MEMBER_GET = Route.get(""/users/@me/guilds/{guild.id}/member"");","/**
     * Returns a guild member object for the current user. Requires the guilds.members.read OAuth2 scope.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/user#get-current-user-guild-member"">Discord</a>
     */",discord4j.rest.route
DefaultEventDispatcher.Builder eventScheduler(Scheduler eventScheduler);,"/**
         * Set the {@link Scheduler} this dispatcher should use to publish events to its subscribers. Using a bounded
         * elastic/blocking-capable one is recommended for general workloads that may have blocking sequences.
         *
         * @param eventScheduler a custom {@link Scheduler} to publish events
         * @return this builder
         */",discord4j.core.event
"public Publisher<?> onGuildCreate(GuildCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when the bot receives initial information on startup, after it joins a guild, or after an outage is
     * resolved.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
StartThreadWithoutMessageMono startPublicThreadWithoutMessage(String threadName);,"/**
     * Start a new public thread that is not connected to an existing message. Properties specifying how to create the thread
     * can be set via the {@code withXxx} methods of the returned {@link StartThreadWithoutMessageMono}.
     *
     * @param threadName the name of the thread
     * @return A {@link StartThreadWithoutMessageMono} where, upon successful completion, emits the created {@link ThreadChannel}.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction replyFormat(@Nonnull String format, @Nonnull Object... args)
    {
        Checks.notNull(format, ""Format String"");
        return reply(String.format(format, args));
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     * </ul>
     *
     * @param  format
     *         Format string for the message content
     * @param  args
     *         Format arguments for the content
     *
     * @throws IllegalArgumentException
     *         If the format string is null or the resulting content is longer than {@link Message#MAX_CONTENT_LENGTH} characters
     *
     * @return {@link ReplyCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"public static int getUnsignedInt(@Nonnull DataObject root, @Nonnull String path)
    {
        Integer integer = get(root, path, DataObject::getUnsignedInt, DataArray::getUnsignedInt);
        if (integer == null)
            pathError(path, ""unsigned int"");
        return integer;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     * <br>If the resulting value is a string, this will parse the string using {@link Integer#parseUnsignedInt(String)}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The unsigned int value at the given path
     */",net.dv8tion.jda.api.utils.data
"public LegacyEmbedCreateSpec setColor(final Color color) {
        requestBuilder.color(color.getRGB());
        return this;
    }","/**
     * Sets the color of the embed.
     *
     * @param color A {@link Color} to display on the embed.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@SuppressWarnings(""unchecked"")
	public static void register(@SuppressWarnings(""rawtypes"") Map tagletMap) {
		WRRefReqTaglet tag = new WRRefReqTaglet();
		Taglet t = (Taglet) tagletMap.get(tag.getName());
		if (t != null) {
			tagletMap.remove(tag.getName());
		}
		tagletMap.put(tag.getName(), tag);
	}","/**
	 * Register this Taglet.
	 * 
	 * @param tagletMap
	 *            the map to register this tag to.
	 */",net.winroad.wrdoclet.taglets
"@Nonnull
    @CheckReturnValue
    PermissionOverrideAction setPermissions(long allowBits, long denyBits);","/**
     * Combination of {@link #setAllowed(long)} and {@link #setDenied(long)}
     * <br>First sets the allow bits and then the deny bits.
     *
     * @param  allowBits
     *         An unsigned bitwise representation
     *         of granted Permissions
     * @param  denyBits
     *         An unsigned bitwise representation
     *         of denied Permissions
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     *
     * @see    #setPermissions(java.util.Collection, java.util.Collection)
     * @see    net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...) Permission.getRaw(Permission...)
     * @see    net.dv8tion.jda.api.Permission#getRaw(java.util.Collection)  Permission.getRaw(Collection)
     */",net.dv8tion.jda.api.requests.restaction
Mono<User> getSelf();,"/**
     * Requests to retrieve the bot user.
     *
     * @return A {@link Mono} where, upon successful completion, emits the bot {@link User user}. If an error is
     *         received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
"@Nullable
    default String getMessageId()
    {
        long id = getMessageIdLong();
        return id == 0L ? null : Long.toUnsignedString(getMessageIdLong());
    }","/**
     * The id of the {@link net.dv8tion.jda.api.entities.Message Message} which triggered the rule.
     *
     * @return The id of the message, or {@code null} if the message has been blocked
     */",net.dv8tion.jda.api.entities.automod
"public LegacyGuildEditSpec setDescription(@Nullable String description) {
        requestBuilder.descriptionOrNull(description);
        return this;
    }","/**
     * Sets the description for the guild, if the guild is discoverable.
     *
     * @param description The description for the guild.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static final Route GUILD_SCHEDULED_EVENT_GET = Route.get(""/guilds/{guild.id}/scheduled-events/{event.id}"");","/**
     * Returns a scheduled event for the given guild.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event"">
     * https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event</a>
     */",discord4j.rest.route
"public String format() {
        return index + "","" + count;
    }","/**
     * Return a string form of this {@link ShardInfo} using the following pattern: {@code index,count}
     *
     * @return a formatted string representing this object
     */",discord4j.gateway
UserData getUserData();,"/**
     * Return the raw user data that created this interaction.
     *
     * @return a user data object
     */",discord4j.rest.interaction
"public Optional<String> getText() {
        return this.data.text().toOptional();
    }","/**
     * Gets the text of the poll question.
     *
     * @return An {@link Optional} containing the text of the poll question, or {@link Optional#empty()} if not present
     */",discord4j.core.object.entity.poll
"public static final Route GUILD_PRUNE_COUNT_GET = Route.get(""/guilds/{guild.id}/prune"");","/**
     * Returns an object with one 'pruned' key indicating the number of members that would be removed in a prune
     * operation. Requires the 'KICK_MEMBERS' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-prune-count"">
     * https://discord.com/developers/docs/resources/guild#get-guild-prune-count</a>
     */",discord4j.rest.route
"public VoiceChannel getCurrent() {
        return current;
    }","/**
     * Gets the current, new version of the {@link VoiceChannel} that was updated in this event.
     *
     * @return The current version of the updated {@link VoiceChannel}.
     */",discord4j.core.event.domain.channel
"public int getMaxUses() {
        return getData().maxUses().toOptional()
                .orElseThrow(IllegalStateException::new);
    }","/**
     * Gets the max number of times this invite can be used.
     *
     * @return The max number of times this invite can be used.
     */",discord4j.core.object
"@Nonnull
        public GuildVoiceState getVoiceState()
        {
            return voiceState;
        }","/**
         * The voice state for the guild
         *
         * @return The voice state
         */",net.dv8tion.jda.api.hooks
"@Nonnull
    @Unmodifiable
    default List<StageChannel> getStageChannelsByName(@Nonnull String name, boolean ignoreCase)
    {
        return getStageChannelCache().getElementsByName(name, ignoreCase);
    }","/**
     * Gets a list of all {@link StageChannel StageChannels}
     * in this Guild that have the same name as the one provided.
     * <br>If there are no channels with the provided name, then this returns an empty list.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  name
     *         The name used to filter the returned {@link StageChannel StageChannels}.
     * @param  ignoreCase
     *         Determines if the comparison ignores case when comparing. True - case insensitive.
     *
     * @return Possibly-empty immutable list of all StageChannel names that match the provided name.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Snowflake getCommandId() {
        return getInteraction().getCommandInteraction()
                .flatMap(ApplicationCommandInteraction::getId)
                .orElseThrow(IllegalStateException::new); // should always be present for app command auto-complete
    }","/**
     * Gets the ID of the invoked command.
     *
     * @return The ID of the invoked command.
     */",discord4j.core.event.domain.interaction
long getOwnerIdLong();,"/**
     * The id for the user who owns this team.
     *
     * @return The owner id
     */",net.dv8tion.jda.api.entities
"@Nonnull
    DatagramSocket getUdpSocket();","/**
     * The UDP connection for this audio connection. The {@link net.dv8tion.jda.api.audio.factory.DefaultSendSystem DefaultSendSystem}
     * uses this socket to send audio packets to discord, and this is also the socket used to receive audio packets from discord.
     * <br>If you are implementing your own system, it is recommended that you used this connection as it is part of JDA's internal
     * system that JDA monitors for errors and closures. It should be noted however that using this is not required to
     * send audio packets if the developer wishes to open their own UDP socket to send from.
     *
     * @return The UDP socket connection used for audio sending.
     */",net.dv8tion.jda.api.audio.factory
"@Nonnull
    @CheckReturnValue
    PermissionOverrideAction deny(long denyBits);","/**
     * Denies the specified permissions.
     * <br>This does not override already denied permissions.
     *
     * @param  denyBits
     *         The permissions to deny, in addition to already denied permissions
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public static final Route LIST_ENTITLEMENTS = Route.get(""/applications/{application.id}/entitlements"");","/**
     * Returns a list of entitlements for a given application.
     *
     * @see <a href=""https://discord.com/developers/docs/monetization/entitlements#list-entitlements"">Docs</a>
     */",discord4j.rest.route
"public LegacyGuildTemplateEditSpec setName(String name) {
        this.name = Possible.of(name);
        return this;
    }","/**
     * Sets the name of the template.
     *
     * @param name The name for the template.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Publisher<?> onReactionRemove(ReactionRemoveEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a reaction is removed from a message. Guild ID might be missing if this event fires for a DM
     * channel.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static GetThreadMemberByIdAction getThreadMemberById(long threadId, long userId) {
        return new GetThreadMemberByIdAction(threadId, userId);
    }","/**
     * Creates an action to retrieve data for the thread member corresponding to the given thread ID and user ID.
     *
     * @param threadId the thread ID
     * @param userId the user ID
     * @return a new {@link GetThreadMemberByIdAction}
     */",discord4j.common.store.action.read
"static DispatchEventMapper discardEvents() {
        DispatchHandlers handlers = new DispatchHandlers();
        return new DispatchEventMapper() {
            @Override
            public <D, S, E extends Event> Mono<E> handle(DispatchContext<D, S> context) {
                // TODO improve DispatchHandlers to avoid creating Event objects to then discard here
                return handlers.handle(context).then(Mono.empty());
            }
        };
    }","/**
     * Create a {@link DispatchEventMapper} that processes updates and records them into the right {@link Store}, while
     * not producing any {@link Event} downstream.
     *
     * @return a {@link DispatchEventMapper} that only caches updates
     */",discord4j.core.event.dispatch
"@Nullable
    JDA getElementById(int id);","/**
     * Retrieves the JDA instance represented by the provided shard ID.
     *
     * @param  id
     *         The ID of the entity
     *
     * @return Possibly-null entity for the specified shard ID
     */",net.dv8tion.jda.api.utils.cache
"public Publisher<?> onNewsChannelUpdate(NewsChannelUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild news channel is updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"<T> boolean emitError(Sinks.Many<T> sink, Throwable error);","/**
     * Try to fail the given {@code sink}, respecting the semantics of {@link Sinks.Many#tryEmitError(Throwable)} and
     * the failure handling of {@link Sinks.Many#emitError(Throwable, Sinks.EmitFailureHandler)}. Returns whether the
     * emission was successful. Implementations can throw unchecked exceptions like {@link Sinks.EmissionException}
     * or perform side-effects like waiting to determine a result.
     *
     * @param sink the target sink where this emission is attempted
     * @param error the exception to signal, non-null
     * @param <T> the type associated with the sink and element
     * @return the result of the emission, {@code true} if the failure was correctly emitted, {@code false} otherwise
     */",discord4j.common.sinks
"byte [][] takeBytes(int... args)
            throws IndexOutOfBoundsException;","/**
     * Takes number of bytes beginning from given offset.
     *
     * @param  args  An array of even integers where each pair
     *               consists from start and end position in bytes inside buffer.
     * @return  An array of byte arrays where each element contains appropriate fragment of
     *          source buffer.
     * @throws  IndexOutOfBoundsException if {@code offset} or {@code numBytes}
     *          point outside of this buffer.
     */",threegpp.milenage
FPlayer fplayer = FPlayers.getInstance().getByPlayer(p);,"/**
     * Read only map of Permissions.
     *
     * @return unmodifiable permissions map
     */",com.massivecraft.factions.zcore.persist
"public C build(Function<O, Router> routerFactory) {
        return super.build(routerFactory);
    }","/**
     * Create a client capable of connecting to Discord REST API and to establish Gateway and Voice Gateway connections,
     * using a custom {@link Router} factory. The resulting {@link DiscordClient} will use the produced
     * {@link Router} for every request.
     *
     * @param routerFactory the factory of {@link Router} implementation
     * @return a configured {@link DiscordClient} based on this builder parameters
     */",discord4j.core
"public DiscordWebRequest getDiscordRequest() {
        return request;
    }","/**
     * Return the original request template.
     *
     * @return the {@link DiscordWebRequest} template that created this {@link ClientRequest}
     */",discord4j.rest.http.client
"@Nonnull
        public String getId()
        {
            return customId;
        }","/**
         * The custom id used to identify the select menu.
         *
         * @return The custom id
         */",net.dv8tion.jda.api.interactions.components.selections
"public Mono<Void> deleteFollowup(final Snowflake messageId) {
        return getInteractionResponse().deleteFollowupMessage(messageId.asLong());
    }","/**
     * Delete a followup message created under this interaction.
     *
     * @param messageId the message ID to be deleted
     * @return a {@link Mono} where, upon successful message deletion, returns a completion signal. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.interaction
"@Nullable
    default NewsChannel getNewsChannelById(long id)
    {
        return (NewsChannel) getChannelCache().getElementById(ChannelType.NEWS, id);
    }","/**
     * Gets a {@link NewsChannel NewsChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link NewsChannel NewsChannel}.
     *
     * @return Possibly-null {@link NewsChannel NewsChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"int apply(@Nonnull String string, int offset, int limit);","/**
         * Implements a splitting strategy.
         *
         * <p>The goal of a strategy is to implement a greedy algorithm to find the optimal point to split the string.
         * Ideally, this should be close to the {@code limit}.
         *
         * <p>This should not return an offset larger than {@code limit}.
         * Any offset lower than the input offset, is interpreted as unsuccessful.
         *
         * @param  string
         *         The input string
         * @param  offset
         *         The current offset where to start your substring
         * @param  limit
         *         The maximum length your substring should be
         *
         * @return The exclusive end index of your chunk, negative to indicate failure. (should be in range of {@code offset < x <= limit}).
         */",net.dv8tion.jda.api.utils
"@Nonnull
    public EmbedBuilder setAuthor(@Nullable String name)
    {
        return setAuthor(name, null, null);
    }","/**
     * Sets the Author of the embed. The author appears in the top left of the embed and can have a small
     * image beside it along with the author's name being made clickable by way of providing a url.
     * This convenience method just sets the name.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/03-setAuthor.png"">Example</a></b>
     *
     * @param  name
     *         the name of the author of the embed. If this is not set, the author will not appear in the embed
     *
     * @throws java.lang.IllegalArgumentException
     *         If {@code name} is longer than {@value net.dv8tion.jda.api.entities.MessageEmbed#AUTHOR_MAX_LENGTH} characters,
     *         as defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#AUTHOR_MAX_LENGTH}
     *
     * @return the builder after the author has been set
     */",net.dv8tion.jda.api
"@Nonnull
    @CheckReturnValue
    default RoleAction setColor(@Nullable Color color)
    {
        return this.setColor(color != null ? color.getRGB() : null);
    }","/**
     * Sets the color which the new role should be displayed with.
     *
     * @param  color
     *         An {@link java.awt.Color Color} for the new role, null to use default white/black
     *
     * @return The current RoleAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public String getCode() {
        return data.code();
    }","/**
     * Gets the template code (unique ID).
     *
     * @return The template code (unique ID).
     */",discord4j.core.object
boolean isAnimated();,"/**
     * Whether this emoji is animated.
     *
     * @return True, if this emoji is animated
     */",net.dv8tion.jda.api.entities.emoji
"public Mono<InviteData> getData(boolean withCounts, boolean withExpiration,
                                    @Nullable Snowflake guildScheduledEventId) {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put(""with_counts"", withCounts);
        queryParams.put(""with_expiration"", withExpiration);
        if (guildScheduledEventId != null) {
            queryParams.put(""guild_scheduled_event_id"", guildScheduledEventId.asString());
        }
        return restClient.getInviteService().getInvite(code, queryParams);
    }","/**
     * Retrieve the contents of this REST entity from Discord API.
     *
     * @param withCounts whether the invite should contain approximate member counts
     * @param withExpiration whether the invite should contain the expiration date
     * @param guildScheduledEventId the guild scheduled event to include with the invite, can be {@code null}
     * @return a Mono with the {@link InviteData} contents if successful, otherwise an error Mono
     */",discord4j.rest.entity
"public Guild getGuild() {
        return guild;
    }","/**
     * Gets the {@link Guild} that has become available in this event.
     *
     * @return The {@link Guild} that has become available.
     */",discord4j.core.event.domain.guild
Mono<MessageData> createFollowupMessageEphemeral(MultipartRequest<WebhookExecuteRequest> request);,"/**
     * Create a new ephemeral followup message using the provided request. This uses a webhook tied to the interaction
     * ID and token.
     *
     * @param request the message request to be sent as followup
     * @return a {@link Mono} where, upon successful completion, emits the sent message. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"public Mono<Void> delete(@Nullable final String reason) {
        return gateway.getRestClient().getEmojiService()
                .deleteGuildEmoji(getGuildId().asLong(), getId().asLong(), reason);
    }","/**
     * Requests to delete this emoji while optionally specifying a reason.
     *
     * @param reason The reason, if present.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the emoji has been deleted.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"@Nullable
    public OffsetDateTime getNewTimeOutEnd()
    {
        return getNewValue();
    }","/**
     * The new end of the time out
     *
     * @return The new end of the time out
     */",net.dv8tion.jda.api.events.guild.member.update
"public Mono<GuildTemplate> delete() {
        return gateway.getRestClient().getTemplateService()
                .deleteTemplate(guildId, getCode())
                .map(data -> new GuildTemplate(gateway, data));
    }","/**
     * Requests to delete this template.
     *
     * @return A {@link Mono} where, upon successful completion, emits the deleted template. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.core.object
"public Publisher<?> onConnect(ConnectEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when connecting to the Gateway for the first time only.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public RestMessage getMessageById(final Snowflake channelId, final Snowflake messageId) {
        return RestMessage.create(this, channelId, messageId);
    }","/**
     * Requests to retrieve the message represented by the supplied IDs.
     *
     * @param channelId The ID of the channel.
     * @param messageId The ID of the message.
     * @return A {@link RestMessage} as represented by the supplied IDs.
     */",discord4j.rest
"Mono<GuildSticker> getGuildStickerById(Snowflake guildId, Snowflake stickerId);","/**
     * Requests to retrieve the guild sticker represented by the supplied IDs.
     *
     * @param guildId The ID of the guild.
     * @param stickerId The ID of the sticker.
     * @return A {@link Mono} where, upon successful completion, emits the {@link GuildSticker} as represented by the
     *         supplied IDs. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
"public Mono<Category> edit(CategoryEditSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(
                () -> getClient().getRestClient().getChannelService()
                        .modifyChannel(getId().asLong(), spec.asRequest(), spec.reason()))
                .map(data -> EntityUtil.getChannel(getClient(), data))
                .cast(Category.class);
    }","/**
     * Requests to edit this category.
     *
     * @param spec an immutable object specifying how to edit this category
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link Category}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    public CompletableFuture<File> downloadToFile(@Nonnull File file)
    {
        Checks.notNull(file, ""File"");

        final CompletableFuture<Path> downloadToPathFuture = downloadToPath(url, file.toPath());
        return FutureUtil.thenApplyCancellable(downloadToPathFuture, Path::toFile);
    }","/**
     * Downloads the data of this file into the specified file.
     *
     * <p><b>Implementation note:</b>
     *       The file is first downloaded into a temporary file, the file is then moved to its real destination when the download is complete.
     *
     * @param  file
     *         The file in which to download the data
     *
     * @throws IllegalArgumentException
     *         If any of the follow checks are true
     *         <ul>
     *             <li>The target file is null</li>
     *             <li>The parent folder of the target file does not exist</li>
     *             <li>The target file exists and is not a {@link Files#isRegularFile(Path, LinkOption...) regular file}</li>
     *             <li>The target file exists and is not {@link Files#isWritable(Path) writable}</li>
     *         </ul>
     *
     * @return {@link CompletableFuture} which holds a {@link File}, it is the same as the file passed in the parameters.
     */",net.dv8tion.jda.api.utils
"@Nonnull
    @CheckReturnValue
    GuildStickerManager setName(@Nonnull String name);","/**
     * Sets the <b><u>name</u></b> of the sticker.
     *
     * <p>A sticker name <b>must</b> be between 2-30 characters long!
     *
     * <p><b>Example</b>: {@code catDance} or {@code dogWave}
     *
     * @param  name
     *         The new name for the sticker (2-30 characters)
     *
     * @throws IllegalArgumentException
     *         If the provided name is {@code null} or not between 2-30 characters long
     *
     * @return GuildStickerManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public Publisher<?> onMemberChunk(MemberChunkEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when members are streamed to the client from Discord.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Optional<Activity> getActivity() {
        return data.activities().stream().map(Activity::new).findFirst();
    }","/**
     * Get a user's current activity, if present.
     *
     * @return an {@link Optional} with the user's activity, or empty if not present.
     */",discord4j.core.object.presence
"public String getMessage() {
        return message;
    }","/**
     * Get the power loss message.
     *
     * @return power loss message as String.
     */",com.massivecraft.factions.event
"public boolean isEmoji()
    {
        return emoji != null;
    }","/**
     * Whether this {@link RoleIcon} is an emoji instead of a custom image.
     *
     * @return True, if this {@link RoleIcon} is an emoji
     */",net.dv8tion.jda.api.entities
boolean isEmpty();,"/**
     * Whether the cache is empty
     *
     * <p>This is more efficient than creating a list or set snapshot first as it checks the size
     * of the internal cache directly.
     * <br>On a projected cache view this will simply look through all projected views and return false
     * the moment it finds one that is not empty.
     *
     * @return True, if this cache is currently empty
     */",net.dv8tion.jda.api.utils.cache
"public CompletableFuture<Optional<DeleteResult>> deleteDocuments(final String collection, final String fieldName, final Object value) {
        return getCollection(collection).thenApplyAsync(optionalMongoCollection -> optionalMongoCollection.map(mongoCollection -> mongoCollection.deleteMany(Filters.eq(fieldName, value))));
    }","/**
     * Deletes a list of {@link Document} of a MongoCollection asynchronously
     * @param collection name of the collection
     * @param fieldName name of the field in the collection
     * @param value value of the given field in the collection
     * @return {@link DeleteResult} of the deletion
     */",io.github.heliumdioxid.database.mongo
"@Nonnull
    @CheckReturnValue
    GuildWelcomeScreenManager setDescription(@Nullable String description);","/**
     * Sets the description of the welcome screen.
     *
     * <p>The description must not be longer than {@value GuildWelcomeScreen#MAX_DESCRIPTION_LENGTH}
     *
     * @param  description
     *         The new description of the welcome screen, or {@code null} to remove the description
     *
     * @throws IllegalArgumentException
     *         If the description longer than {@value GuildWelcomeScreen#MAX_DESCRIPTION_LENGTH}
     *
     * @return GuildWelcomeScreenManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static final Route GUILD_INVITES_GET = Route.get(""/guilds/{guild.id}/invites"");","/**
     * Returns a list of invite objects (with invite metadata) for the guild. Requires the 'MANAGE_GUILD' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-invites"">
     * https://discord.com/developers/docs/resources/guild#get-guild-invites</a>
     */",discord4j.rest.route
"public static GetRolesAction getRoles() {
        return new GetRolesAction();
    }","/**
     * Creates an action to retrieve data for all roles present in a store.
     *
     * @return a new {@link GetRolesAction}
     */",discord4j.common.store.action.read
"@Override
    public BigIntegerBuffer[] createArray(byte[]... buffers) {
        BigIntegerBuffer [] array = new BigIntegerBuffer[buffers.length];

        for(int i = 0; i < buffers.length; i++) {
            array[i] = create(buffers[i]);
        }
        return array;
    }","/**
     * {@inheritDoc}
     */",threegpp.milenage.biginteger
"public IdentifyOptions build() {
            return new IdentifyOptions(this);
        }","/**
         * Construct the authentication policy.
         *
         * @return a built {@link IdentifyOptions}
         */",discord4j.gateway
"public static final Comparator<Role> ROLE_ORDER =
            Comparator.comparing(Role::getRawPosition).thenComparing(Role::getId);","/**
     * The ordering of Discord {@link Role roles}.
     * <p>
     * In Discord, two orderable entities may have the same ""raw position,"" the position as reported by the ""position"" field.
     * This conflict is resolved by comparing the creation time of the entities, reflected in their {@link Snowflake IDs}.
     */",discord4j.core.util
"public Publisher<?> onChatInputAutoCompleteInteraction(ChatInputAutoCompleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user is typing a chat input command option that has auto-complete enabled.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    MessageCreateAction setStickers(@Nullable Collection<? extends StickerSnowflake> stickers);","/**
     * Set the stickers to send alongside this message.
     * <br>This is not supported for message edits.
     *
     * @param  stickers
     *         The stickers to send, or null to not send any stickers
     *
     * @throws IllegalStateException
     *         If this request is a message edit request
     * @throws IllegalArgumentException
     *         <ul>
     *           <li>If any of the provided stickers is a {@link GuildSticker},
     *               which is either {@link GuildSticker#isAvailable() unavailable} or from a different guild.</li>
     *           <li>If the collection has more than {@value Message#MAX_STICKER_COUNT} stickers</li>
     *           <li>If a collection with null entries is provided</li>
     *         </ul>
     *
     * @return Updated MessageCreateAction for chaining convenience
     *
     * @see    Sticker#fromId(long)
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @Override
    @CheckReturnValue
    AccountManager reset(long fields);","/**
     * Resets the fields specified by the provided bit-flag pattern.
     * You can specify a combination by using a bitwise OR concat of the flag constants.
     * <br>Example: {@code manager.reset(AccountManager.NAME | AccountManager.AVATAR);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #AVATAR}</li>
     * </ul>
     *
     * @param  fields
     *         Integer value containing the flags to reset.
     *
     * @return AccountManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"Mono<Void> onThreadCreate(int shardIndex, ThreadCreate dispatch);","/**
     * Updates the internal state of the store according to the given {@link ThreadCreate} gateway dispatch. This
     * will typically perform an insert operation on the related {@link ChannelData}.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"@Nonnull
    @CheckReturnValue
    CommandEditAction apply(@Nonnull CommandData commandData);","/**
     * Replace the command with the provided {@link CommandData}.
     *
     * @param  commandData
     *         The data for the command
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return The CommandEditAction instance, for chaining
     *
     * @see    Commands
     * @see    CommandCreateAction
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @Override
    GuildWelcomeScreenManager reset(long fields);","/**
     * Resets the fields specified by the provided bit-flag pattern.
     * You can specify a combination by using a bitwise OR concat of the flag constants.
     * <br>Example: {@code manager.reset(GuildWelcomeScreenManager.DESCRIPTION | GuildWelcomeScreenManager.CHANNELS);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #ENABLED}</li>
     *     <li>{@link #DESCRIPTION}</li>
     *     <li>{@link #CHANNELS}</li>
     * </ul>
     *
     * @param  fields
     *         Integer value containing the flags to reset.
     *
     * @return GuildWelcomeScreenManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public Mono<Void> delete(@Nullable String reason) {
        return restClient.getEmojiService().deleteGuildEmoji(guildId, id, reason);
    }","/**
     * Delete this guild emoji. Requires the {@link Permission#MANAGE_EMOJIS} permission. Returns empty on success.
     *
     * @param reason an optional reason for the audit log
     * @return a {@link Mono} where, upon subscription, emits a complete signal on success. If an error is received, it
     * is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"@Nonnull
    public Result<T> onSuccess(@Nonnull Consumer<? super T> callback)
    {
        Checks.notNull(callback, ""Callback"");
        if (isSuccess())
            callback.accept(value);
        return this;
    }","/**
     * Passive success handler.
     * <br>This will apply the provided callback if {@link #isSuccess()} is true
     * and return the same result for further chaining.
     *
     * @param  callback
     *         The passive callback
     *
     * @throws IllegalArgumentException
     *         If the callback is null
     *
     * @return The same result instance
     */",net.dv8tion.jda.api.utils
"public Optional<String> getText() {
        return this.data.data().text().toOptional();
    }","/**
     * Gets the text of the poll answer.
     *
     * @return An {@link Optional} containing the text of the poll answer, or {@link Optional#empty()} if not present
     */",discord4j.core.object.entity.poll
void setActivity(@Nullable Activity activity);,"/**
     * Sets the {@link net.dv8tion.jda.api.entities.Activity Activity} for this session.
     * <br>An Activity can be retrieved via {@link net.dv8tion.jda.api.entities.Activity#playing(String)}.
     * For streams you provide a valid streaming url as second parameter
     *
     * <p>Examples:
     * <br>{@code presence.setActivity(Activity.playing(""Thrones""));}
     * <br>{@code presence.setActivity(Activity.streaming(""Thrones"", ""https://twitch.tv/EasterEggs""));}
     *
     * @param  activity
     *         An {@link net.dv8tion.jda.api.entities.Activity Activity} instance or null to reset
     *
     * @see    net.dv8tion.jda.api.entities.Activity#playing(String)
     * @see    net.dv8tion.jda.api.entities.Activity#streaming(String, String)
     */",net.dv8tion.jda.api.managers
"@Nonnull
    @CheckReturnValue
    default GuildWelcomeScreenManager setWelcomeChannels(@Nonnull GuildWelcomeScreen.Channel... channels)
    {
        Checks.notNull(channels, ""Welcome channels"");
        return setWelcomeChannels(Arrays.asList(channels));
    }","/**
     * Sets the welcome channels of the welcome screen.
     *
     * <p>The order of the parameters defines in what order the channels appear on Discord.
     *
     * @param  channels
     *         The new welcome channels to use, you can provide nothing in order to remove all welcome channels.
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code channels} is {@code null}</li>
     *             <li>If more than {@value GuildWelcomeScreen#MAX_WELCOME_CHANNELS} welcome channels are set</li>
     *         </ul>
     *
     * @return GuildWelcomeScreenManager for chaining convenience
     *
     * @see    #setWelcomeChannels(Collection)
     */",net.dv8tion.jda.api.managers
"public Mono<Void> deleteOwnReaction(String emoji) {
        return restClient.getChannelService().deleteOwnReaction(channelId, id, emoji);
    }","/**
     * Requests to remove a reaction from the current user on this message.
     *
     * @param emoji The reaction to remove on this message.
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating the reaction from the current
     * user was removed on this message. If an error is received, it is emitted through the {@code Mono}.
     * @see <a href=""https://discord.com/developers/docs/resources/channel#delete-own-reaction"">Delete Own Reaction</a>
     */",discord4j.rest.entity
"default Mono<Category> getCategory(EntityRetrievalStrategy retrievalStrategy) {
        return Mono.justOrEmpty(getCategoryId())
                .flatMap(id -> getClient().withRetrievalStrategy(retrievalStrategy).getChannelById(id))
                .cast(Category.class);
    }","/**
     * Requests to retrieve the category for this channel, if present, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the category
     * @return A {@link Mono} where, upon successful completion, emits the {@link Category category} this channel, if
     * present. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    @CheckReturnValue
    PermOverrideManager deny(long permissions);","/**
     * Denies the provided {@link net.dv8tion.jda.api.Permission Permissions} bits
     * from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     *
     * @param  permissions
     *         The permissions to deny from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @return PermOverrideManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static final Route WEBHOOK_EXECUTE_SLACK = Route.post(""/webhooks/{webhook.id}/{webhook.token}/slack"");","/**
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#execute-slackcompatible-webhook"">
     * https://discord.com/developers/docs/resources/webhook#execute-slackcompatible-webhook</a>
     */",discord4j.rest.route
"@Nullable
    public String getEndpoint() {
        return endpoint;
    }","/**
     * Gets the voice server host's endpoint URL.
     *
     * @return The void server host's endpoint URL.
     */",discord4j.core.event.domain
"default boolean canInteract(User issuer, MessageChannel channel, boolean botOverride)
    {
        return PermissionUtil.canInteract(issuer, this, channel, botOverride);
    }","/**
     * Whether the specified User can interact with this emoji within the provided MessageChannel
     * <br>Special override to exclude elevated bot permissions in case of (for instance) reacting to messages.
     *
     * @param  issuer
     *         The User to test
     * @param  channel
     *         The MessageChannel to test
     * @param  botOverride
     *         Whether bots can use non-managed emojis in other guilds
     *
     * @return True, if the provided Member can use this emoji
     */",net.dv8tion.jda.api.entities.emoji
"@Nonnull
    default String getRuleId()
    {
        return Long.toUnsignedString(getRuleIdLong());
    }","/**
     * The id of the {@link AutoModRule} which has been triggered.
     *
     * @return The id of the rule
     */",net.dv8tion.jda.api.entities.automod
boolean onVoiceStateUpdate(@Nonnull VoiceStateUpdate update);,"/**
     * Handles the <b>VOICE_STATE_UPDATE</b>.
     * <br>This indicates the user might have moved to a new voice channel.
     *
     * @param  update
     *         The {@link VoiceStateUpdate} to handle
     *
     * @return True, if a connection was previously established
     */",net.dv8tion.jda.api.hooks
boolean isStealthEnabled();,"/**
     * Used to know if stealth is toggled on or off
     *
     * @return if stealth mode is on or not.
     */",com.massivecraft.factions
"@Nonnull
    @CheckReturnValue
    CommandEditAction setDefaultPermissions(@Nonnull DefaultMemberPermissions permission);","/**
     * Sets the {@link net.dv8tion.jda.api.Permission Permissions} that a user must have in a specific channel to be able to use this command.
     * <br>By default, everyone can use this command ({@link DefaultMemberPermissions#ENABLED}). Additionally, a command can be disabled for everyone but admins via {@link DefaultMemberPermissions#DISABLED}.
     * <p>These configurations can be overwritten by moderators in each guild. See {@link Command#retrievePrivileges(net.dv8tion.jda.api.entities.Guild)} to get moderator defined overrides.
     *
     * @param  permission
     *         {@link DefaultMemberPermissions} representing the default permissions of this command.
     *
     * @return The CommandEditAction instance, for chaining
     *
     * @see DefaultMemberPermissions#ENABLED
     * @see DefaultMemberPermissions#DISABLED
     */",net.dv8tion.jda.api.requests.restaction
"public VoiceService getVoiceService() {
        return voiceService;
    }","/**
     * Access a low-level representation of the API endpoints for the Voice Region resource.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"@Nullable
    public String getOldAvatarUrl()
    {
        return previous == null ? null : String.format(AVATAR_URL, getSelfUser().getId(), previous, previous.startsWith(""a_"") ? "".gif"" : "".png"");
    }","/**
     * The old avatar url
     *
     * @return  The old avatar url
     */",net.dv8tion.jda.api.events.self
void closeAudioConnection();,"/**
     * Close down the current audio connection of this {@link net.dv8tion.jda.api.entities.Guild Guild}
     * and disconnects from the {@link net.dv8tion.jda.api.entities.channel.middleman.AudioChannel AudioChannel}.
     * <br>If this is called when JDA doesn't have an audio connection, nothing happens.
     */",net.dv8tion.jda.api.managers
"public static final Route VOICE_REGION_LIST = Route.get(""/voice/regions"");","/**
     * Returns an array of voice region objects that can be used when creating servers.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/voice#list-voice-regions"">
     * https://discord.com/developers/docs/resources/voice#list-voice-regions</a>
     */",discord4j.rest.route
"public static final Route GUILD_MEMBER_REMOVE = Route.delete(""/guilds/{guild.id}/members/{user.id}"");","/**
     * Remove a member from a guild. Requires 'KICK_MEMBERS' permission. Returns a 204 empty response on success. Fires
     * a Guild Member Remove Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#remove-guild-member"">
     * https://discord.com/developers/docs/resources/guild#remove-guild-member</a>
     */",discord4j.rest.route
"@Nonnull
    public OffsetDateTime getTimeShutdown()
    {
        return shutdownTime;
    }","/**
     * Time of WebSocket disconnect
     *
     * @return {@link java.time.OffsetDateTime OffsetDateTime} representing
     *         the point in time when the connection was dropped.
     */",net.dv8tion.jda.api.events.session
"public Optional<VoiceChannel> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the {@link VoiceChannel} that was updated in this event, if present.
     * This may not be available if {@code VoiceChannels} are not stored.
     *
     * @return The old version of the updated {@link VoiceChannel}, if present.
     */",discord4j.core.event.domain.channel
void appendSession(@Nonnull SessionConnectNode node);,"/**
     * Called by a JDA session when a WebSocket should be started. (Connecting and Reconnecting)
     * <br>This should only add the node to a queue and execute the queue with respect to the {@link #IDENTIFY_DELAY}.
     *
     * @param  node
     *         The {@link net.dv8tion.jda.api.utils.SessionController.SessionConnectNode SessionConnectNode}
     */",net.dv8tion.jda.api.utils
"default <T> T getOption(@Nonnull String name,
                            @Nullable Supplier<? extends T> fallback,
                            @Nonnull Function<? super OptionMapping, ? extends T> resolver)
    {
        Checks.notNull(resolver, ""Resolver"");
        OptionMapping mapping = getOption(name);
        if (mapping != null)
            return resolver.apply(mapping);
        return fallback == null ? null : fallback.get();
    }","/**
     * Finds the first option with the specified name.
     * <br>A resolver is used to get the value if the option is provided.
     * If no option is provided for the given name, this will simply return your provided fallback instead.
     * You can use {@link #getOption(String, Function)} to fall back to {@code null}.
     *
     * <p>For {@link CommandAutoCompleteInteraction}, this might be incomplete and unvalidated.
     * Auto-complete interactions happen on incomplete command inputs and are not validated.
     *
     * <p><b>Example</b>
     * <br>You can understand this as a shortcut for these lines of code:
     * <pre>{@code
     * OptionMapping opt = event.getOption(""reason"");
     * String reason = opt == null ? context.getFallbackReason() : opt.getAsString();
     * }</pre>
     * Which can be written with this resolver as:
     * <pre>{@code
     * String reason = event.getOption(""reason"", context::getFallbackReason , OptionMapping::getAsString);
     * }</pre>
     *
     * @param  name
     *         The option name
     * @param  fallback
     *         The fallback supplier to use if the option is not provided, meaning {@link #getOption(String)} returns null
     * @param  resolver
     *         The mapping resolver function to use if there is a mapping available,
     *         the provided mapping will never be null!
     * @param  <T>
     *         The type of the resolved option value
     *
     * @throws IllegalArgumentException
     *         If the name or resolver is null
     *
     * @return The resolved option with the provided name, or {@code fallback} if that option is not provided
     *
     * @see    #getOption(String, Function)
     * @see    #getOption(String, Object, Function)
     */",net.dv8tion.jda.api.interactions.commands
Flux<MemberData> getExactMembersInGuild(long guildId);,"/**
     * Retrieves data for all members for the given guild ID. If some members are not present in the store and thus
     * is not able to return the full member list of the guild, it will error with
     * {@link ExactResultNotAvailableException}.
     *
     * @param guildId the guild ID
     * @return A {@link Flux} emitting the members, or {@link ExactResultNotAvailableException} if not all are present
     */",discord4j.common.store.api.layout
"@Nullable
    public Member getMember()
    {
        return message.getMember();
    }","/**
     * The Author of the Message received as {@link net.dv8tion.jda.api.entities.Member Member} object.
     * <br>This will be {@code null} in case of Message being received in
     * a {@link PrivateChannel PrivateChannel}
     * or {@link #isWebhookMessage() isWebhookMessage()} returning {@code true}.
     *
     * @return The Author of the Message as null-able Member object.
     *
     * @see    #isWebhookMessage()
     */",net.dv8tion.jda.api.events.message
"public static CountTotalAction countPresences() {
        return new CountTotalAction(CountableEntity.PRESENCES);
    }","/**
     * Creates an action to count the number of presences present in a store.
     *
     * @return a new {@link CountTotalAction}
     */",discord4j.common.store.action.read
"public StickerService getStickerService() {
        return stickerService;
    }","/**
     * Access a low-level representation of the API endpoints for the Guild Sticker resource. It is recommended you use
     * methods like {@link #getGuildStickerById(Snowflake, Snowflake)}, {@link #restGuildSticker(Snowflake, StickerData)} or
     * {@link RestSticker#create(RestClient, Snowflake, Snowflake)}.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"@Nonnull
    @CheckReturnValue
    GuildStickerManager setDescription(@Nonnull String description);","/**
     * Sets the <b><u>description</u></b> of the sticker.
     *
     * <p>A sticker description <b>must</b> be between 2-100 characters long!
     *
     * @param  description
     *         The new description for the sticker (2-100 characters)
     *
     * @throws IllegalArgumentException
     *         If the provided description is {@code null} or not between 2-100 characters long
     *
     * @return GuildStickerManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static String getEmojiString(ReactionEmoji emoji) {
        if (emoji instanceof ReactionEmoji.Unicode) {
            return ((ReactionEmoji.Unicode) emoji).getRaw();
        } else {
            ReactionEmoji.Custom custom = ((ReactionEmoji.Custom) emoji);
            return custom.getName() + "":"" + custom.getId().asString();
        }
    }","/**
     * The UNIX time that represents Discord's epoch (January 1, 2015).
     *
     * @deprecated Use {@link Snowflake#DISCORD_EPOCH}.
     */",discord4j.core.util
"public static final Comparator<RoleData> ROLE_ORDER =
            Comparator.comparing(RoleData::position).thenComparing(OrderUtil::idFromRoleData);","/**
     * The ordering of Discord {@link Role roles}.
     * <p>
     * In Discord, two orderable entities may have the same ""raw position,"" the position as reported by the ""position""
     * field.
     * This conflict is resolved by comparing the creation time of the entities, reflected in their
     * {@link discord4j.common.util.Snowflake IDs}.
     */",discord4j.rest.util
"public MonetizationService getMonetizationService() {
        return monetizationService;
    }","/**
     * Access a low-level representation of the API endpoints for the Monetization resource.
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
void deleteGesture();,"/**
     * Delete the gesture.
     */",recorder.view
"@Nonnull
    @Unmodifiable
    public List<TemplateChannel> getChannels()
    {
        return this.channels;
    }","/**
     * Gets all {@link net.dv8tion.jda.api.entities.templates.TemplateChannel Channels} in this {@link net.dv8tion.jda.api.entities.templates.TemplateGuild Guild}.
     *
     * @return An immutable List of {@link net.dv8tion.jda.api.entities.templates.TemplateChannel Channels}.
     */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    default String getPackId()
    {
        return Long.toUnsignedString(getPackIdLong());
    }","/**
     * The ID of the pack the sticker is from.
     *
     * @return the ID of the pack the sticker is from
     */",net.dv8tion.jda.api.entities.sticker
"public static final Route APPLICATION_INFO_GET = Route.get(""/oauth2/applications/@me"");","/**
     * Returns the bot's OAuth2 application info.
     *
     * @see <a href=https://discord.com/developers/docs/topics/oauth2#get-current-application-information>
     * https://discord.com/developers/docs/topics/oauth2#get-current-application-information</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    CommandListUpdateAction addCommands(@Nonnull Collection<? extends CommandData> commands);","/**
     * Adds up to
     * {@value Commands#MAX_SLASH_COMMANDS} slash commands,
     * {@value Commands#MAX_USER_COMMANDS} user context commands, and
     * {@value Commands#MAX_MESSAGE_COMMANDS} message context commands.
     *
     * <p>When a command is not listed in this request, it will be deleted.
     *
     * @param  commands
     *         The {@link CommandData commands} to add
     *
     * @throws IllegalArgumentException
     *         If null or more than
     *         {@value Commands#MAX_SLASH_COMMANDS} slash commands,
     *         {@value Commands#MAX_USER_COMMANDS} user context commands, or
     *         {@value Commands#MAX_MESSAGE_COMMANDS} message context commands, are provided
     *
     * @return The CommandUpdateAction instance, for chaining
     *
     * @see    Commands#slash(String, String) Commands.slash(...)
     * @see    Commands#message(String) Commands.message(...)
     * @see    Commands#user(String) Commands.user(...)
     */",net.dv8tion.jda.api.requests.restaction
boolean isMember();,"/**
     * Whether this Action will
     * create a {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     * for a {@link net.dv8tion.jda.api.entities.Member Member} or not
     *
     * @return True, if this is targeting a Member
     *         If this is {@code false} it is targeting a {@link net.dv8tion.jda.api.entities.Role Role}. ({@link #isRole()})
     */",net.dv8tion.jda.api.requests.restaction
"public PollAnswerCountObject getData() {
        return this.data;
    }","/**
     * Gets the raw data of the poll answer count.
     *
     * @return the raw data of the poll answer count
     */",discord4j.core.object.entity.poll
Parameter[] parameters = method.parameters();,"/**
	 * param which will not be displayed in doc.
	 */",net.winroad.wrdoclet.builder
"default Mono<ExtendedInvite> createInvite(InviteCreateSpec spec) {
        return Mono.defer(
                () -> getClient().getRestClient().getChannelService()
                        .createChannelInvite(getId().asLong(), spec.asRequest(), spec.reason()))
                .map(data -> new ExtendedInvite(getClient(), data));
    }","/**
     * Requests to create an invite.
     *
     * @param spec an immutable object that specifies how to create the invite
     * @return A {@link Mono} where, upon successful completion, emits the created {@link ExtendedInvite}. If an error
     * is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"public RestScheduledEvent scheduledEvent(Snowflake eventId) {
        return RestScheduledEvent.create(restClient, id, eventId.asLong());
    }","/**
     * Returns a {@link RestScheduledEvent} representation under this guild.
     * This method does not perform any API request.
     *
     * @param eventId The entity ID
     * @return a {@code RestGuildScheduledEvent} with the given ID, under this guild
     */",discord4j.rest.entity
"@Nonnull
    @CheckReturnValue
    RestAction<User> retrieveUser();","/**
     * Retrieves the {@link User User} that this {@link PrivateChannel PrivateChannel} communicates with.
     *
     * <br>This method fetches the channel from the API and retrieves the User from that.
     *
     * @return A {@link RestAction RestAction} to retrieve the {@link User User} that this {@link PrivateChannel PrivateChannel} communicates with.
     */",net.dv8tion.jda.api.entities.channel.concrete
"@Nullable
    default MediaChannel getMediaChannelById(long id)
    {
        return (MediaChannel) getChannelCache().getElementById(ChannelType.MEDIA, id);
    }","/**
     * Gets a {@link MediaChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link MediaChannel}.
     *
     * @return Possibly-null {@link MediaChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public boolean isMemberOverride()
    {
        return override.isMemberOverride();
    }","/**
     * Whether this override was for a member.
     * <br>Note that {@link #getMember()} might still be null if the member isn't cached or there is a discord inconsistency.
     *
     * @return True, if this override is for a member
     */",net.dv8tion.jda.api.events.guild.override
"public Publisher<?> onBan(BanEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user is banned from a guild.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public String getTitle() {
        return this.data.title();
    }","/**
     * Gets the title of the option.
     *
     * @return The title of the option.
     */",discord4j.core.object.onboarding
"@Nullable
    default StageChannel getStageChannelById(@Nonnull String id)
    {
        return (StageChannel) getChannelCache().getElementById(ChannelType.STAGE, id);
    }","/**
     * Gets a {@link StageChannel StageChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link StageChannel StageChannel}.
     *
     * @throws java.lang.NumberFormatException
     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
     *
     * @return Possibly-null {@link StageChannel StageChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
        static Strategy onChar(@Nonnull Predicate<Character> predicate)
        {
            Checks.notNull(predicate, ""Predicate"");
            return (string, offset, limit) ->
            {
                for (int i = offset + limit; i > offset; i--)
                {
                    if (predicate.test(string.charAt(i)))
                        return i;
                }
                return -1;
            };
        }","/**
         * Strategy to split on the provided character tests.
         *
         * @param  predicate
         *         The splitting character test
         *
         * @throws IllegalArgumentException
         *         If the predicate is null
         *
         * @return The strategy to split on characters that pass the test
         */",net.dv8tion.jda.api.utils
"@Nonnull
    public EmbedBuilder setTimestamp(@Nullable TemporalAccessor temporal)
    {
        this.timestamp = Helpers.toOffsetDateTime(temporal);
        return this;
    }","/**
     * Sets the Timestamp of the embed.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/13-setTimestamp.png"">Example</a></b>
     *
     * <p><b>Hint:</b> You can get the current time using {@link java.time.Instant#now() Instant.now()} or convert time from a
     * millisecond representation by using {@link java.time.Instant#ofEpochMilli(long) Instant.ofEpochMilli(long)};
     *
     * @param  temporal
     *         the temporal accessor of the timestamp
     *
     * @return the builder after the timestamp has been set
     */",net.dv8tion.jda.api
"@SuppressWarnings(""unchecked"")
        public <R, S extends StoreAction<R>> Builder map(Class<S> actionType,
                                                         Function<? super S, ? extends Publisher<R>> handler) {
            Objects.requireNonNull(actionType);
            Objects.requireNonNull(handler);
            mappings.put(actionType, action -> handler.apply((S) action));
            return this;
        }","/**
         * Maps a specific action type to a handler function to execute.
         *
         * @param actionType the type of the action
         * @param handler    the handler to execute when an action of the specified type is received
         * @param <R>        the return type of the action
         * @param <S>        the type of the action itself
         * @return this {@link Builder} enriched with the added mapping
         */",discord4j.common.store.api
"public int getUsageCount() {
        return data.usageCount();
    }","/**
     * Gets the number of times the template has been used.
     *
     * @return The number of times the template has been used.
     */",discord4j.core.object
"public CompletableFuture<Optional<MongoCursor<Document>>> iterator(final String collection, final String fieldName, final Object value) {
        return getCollection(collection).thenApplyAsync(optionalMongoCollection -> optionalMongoCollection.map(mongoCollection -> mongoCollection.find(Filters.eq(fieldName, value)).iterator()));
    }","/**
     * Gets a {@link MongoCursor<Document>} of a MongoCollection with the given filter asynchronously
     * @param collection name of the collection
     * @param fieldName name of the field in the collection
     * @param value value of the given field in the collection
     * @return iterator of all found {@link Document}
     */",io.github.heliumdioxid.database.mongo
LegacyAuditSpec<T> setReason(@Nullable String reason);,"/**
     * Sets the reason to show in the audit logs when the spec is built.
     *
     * @param reason The audit log reason.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nullable
    public String getNewSplashUrl()
    {
        return next == null ? null : String.format(Guild.SPLASH_URL, guild.getId(), next);
    }","/**
     * The url of the new splash
     *
     * @return The url of the new splash, or null
     */",net.dv8tion.jda.api.events.guild.update
"public Mono<GuildApplicationCommandPermissionsData> getApplicationCommandPermissions(long applicationId,
                                                                                         long guildId,
                                                                                         long commandId) {
        return exchange(Routes.APPLICATION_COMMAND_PERMISSIONS_GET.newRequest(applicationId, guildId, commandId),
                GuildApplicationCommandPermissionsData.class);
    }","/**
     * Fetches permissions for a specific command for your application in a guild. Returns a guild application command
     * permissions object.
     *
     * @param applicationId your application ID
     * @param guildId the guild ID
     * @param commandId the command ID
     * @return a Mono with command permissions object for the requested guild, or an error Mono in case a request fails
     */",discord4j.oauth2
"@Nonnull
    public String getUrl(int size)
    {
        Checks.positive(size, ""Image size"");

        return IOUtil.addQuery(getUrl(), ""size"", size);
    }","/**
     * Returns the image URL for the specified size.
     * <br>The size is a best-effort resize from Discord, with recommended size values as powers of 2 such as 1024 or 512.
     *
     * @param  size
     *         The size of the image
     *
     * @return URL of the image with the specified size
     */",net.dv8tion.jda.api.utils
"@Nullable
    default T getElementById(@Nonnull ChannelType type, @Nonnull String id)
    {
        return getElementById(type, MiscUtil.parseSnowflake(id));
    }","/**
     * Retrieves the entity represented by the provided ID.
     *
     * @param  type
     *         The expected {@link ChannelType}
     * @param  id
     *         The ID of the entity
     *
     * @throws java.lang.NumberFormatException
     *         If the provided String is {@code null} or
     *         cannot be resolved to an unsigned long id
     *
     * @return Possibly-null entity for the specified ID, null if the expected type is different from the actual type
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    default EnumSet<Permission> getInheritedPermissions()
    {
        return Permission.getPermissions(getInherited());
    }","/**
     * Set of {@link net.dv8tion.jda.api.Permission Permissions}
     * that would be <b>inherited</b> from other permission holders.
     * <br>Permissions returned are not explicitly granted or denied!
     * <br><u>Changes to the returned set do not affect this entity directly.</u>
     *
     * @return set of inherited {@link net.dv8tion.jda.api.Permission Permissions}
     *
     * @see    #getInherited()
     */",net.dv8tion.jda.api.requests.restaction
"public Message getResolvedMessage() {
        return getInteraction().getCommandInteraction()
                .flatMap(ApplicationCommandInteraction::getResolved)
                .flatMap(it -> it.getMessage(getTargetId()))
                .orElseThrow(IllegalStateException::new);
    }","/**
     * Gets the resolved targeted Message.
     *
     * @return The resolved targeted Message.
     */",discord4j.core.event.domain.interaction
"public Mono<Void> deleteAllReactions() {
        return restClient.getChannelService().deleteAllReactions(channelId, id);
    }","/**
     * Requests to remove all the reactions on this message.
     *
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating all the reactions on this
     * message were removed. If an error is received, it is emitted through the {@code Mono}.
     * @see
     * <a href=""https://discord.com/developers/docs/resources/channel#delete-all-reactions"">Delete All Reactions</a>
     */",discord4j.rest.entity
"public static final Route WEBHOOK_EXECUTE_GITHUB = Route.post(""/webhooks/{webhook.id}/{webhook.token}/github"");","/**
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#execute-githubcompatible-webhook"">
     * https://discord.com/developers/docs/resources/webhook#execute-githubcompatible-webhook</a>
     */",discord4j.rest.route
"static TimeoutEmissionStrategy timeoutDrop(Duration duration) {
        return new TimeoutEmissionStrategy(Duration.ofMillis(10).toNanos(), duration.toNanos(), false);
    }","/**
     * Create an {@link EmissionStrategy} that will retry overflowing and non-serialized emissions until a given
     * {@code duration} and <strong>drop</strong> values upon timeout.
     *
     * @param duration the {@link Duration} to wait until elements are dropped
     * @return a strategy with a drop on timeout behavior
     */",discord4j.common.sinks
"public RestWebhook restWebhook(WebhookData data) {
        return RestWebhook.create(this, Snowflake.of(data.id()));
    }","/**
     * Requests to retrieve the webhook represented by the supplied {@link WebhookData}.
     *
     * @param data The data of the webhook.
     * @return A {@link RestWebhook} as represented by the supplied ID.
     */",discord4j.rest
"public LegacyGuildEditSpec setFeatures(Set<String> features) {
        requestBuilder.features(features);
        return this;
    }","/**
     * Sets the enabled guild features.
     * <br>
     * You can see the available
     * <a href=""https://discord.com/developers/docs/resources/guild#guild-object-guild-features"">guild features</a>
     *
     * @param features Enabled guild features.
     * @return This spec.
     */",discord4j.core.spec.legacy
boolean isRole();,"/**
     * Whether this Action will
     * create a {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     * for a {@link net.dv8tion.jda.api.entities.Role Role} or not
     *
     * @return True, if this is targeting a Role.
     *         If this is {@code false} it is targeting a {@link net.dv8tion.jda.api.entities.Member Member}. ({@link #isMember()})
     */",net.dv8tion.jda.api.requests.restaction
"public int getNewMaxPresences()
    {
        return getNewValue();
    }","/**
     * The new max presences
     *
     * @return The new max presences
     */",net.dv8tion.jda.api.events.guild.update
"Get the to many string slice
                List<String> theToMany = args.subList(this.requiredArgs.size() + this.optionalArgs.size(), args.size());","/**
     * In this method we validate that all prerequisites to perform this command has been met.
     *
     * @param sender of the command
     * @param args   of the command
     * @return true if valid, false if not.
     */",com.massivecraft.factions.zcore
boolean isDisabled();,"/**
     * Whether this action component is disabled.
     *
     * <p>You can use {@link #asDisabled()} or {@link #asEnabled()} to create enabled/disabled instances.
     *
     * @return True, if this button is disabled
     */",net.dv8tion.jda.api.interactions.components
"public Mono<StageInstanceData> getStageInstance(final Snowflake channelId) {
        return stageInstanceService.getStageInstance(channelId.asLong());
    }","/**
     * Requests to retrieve a stage instance.
     *
     * @param channelId The channel id associated to the stage instance.
     * @return A {@link Mono} where, upon successful completion, emits the {@link StageInstanceData} associated to the
     * supplied channel ID. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest
"static Builder builder() {
        return new DefaultEventDispatcher.Builder();
    }","/**
     * Create an {@link EventDispatcher} builder. It can be configured with a custom {@link FluxProcessor} for
     * events, a custom {@link FluxSink.OverflowStrategy} to handle backpressure and a custom {@link Scheduler} to
     * dispatch events.
     *
     * @return a {@link Builder}
     */",discord4j.core.event
"public String getUrl() {
        return url;
    }","/**
     * Return the request URL.
     *
     * @return the request URL for this {@link ClientRequest}
     */",discord4j.rest.http.client
"public Status getStatus() {
        return Status.of(data.status());
    }","/**
     * Get the user's status.
     *
     * @return The user's status.
     */",discord4j.core.object.presence
"void addFeatureVector(String gesture, int index) throws IOException;","/**
     * Select the feature vector.
     *
     * @param gesture
     *            the {@link String} gesture
     * @param index
     *            the index in the list
     * @throws IOException
     *             the exception
     * @throws JsonIOException
     *             the {@link JsonIOException}
     */",recorder.controller
"public Optional<WebhookData> getWebhook() {
        return data.webhook().toOptional();
    }","/**
     * Return webhook information if this client was authorized using a {@link Scope#WEBHOOK_INCOMING} scope.
     * By fetching {@link WebhookData#token()} and {@link WebhookData#id()} you can send messages with the webhook.
     *
     * @return webhook details tied to this access token, if present
     */",discord4j.oauth2.object
"public GuildEmojiEditMono edit() {
        return GuildEmojiEditMono.of(this);
    }","/**
     * Requests to edit this guild emoji. Properties specifying how to edit this emoji can be set via the {@code
     * withXxx} methods of the returned {@link GuildEmojiEditMono}.
     *
     * @return A {@link GuildEmojiEditMono} where, upon successful completion, emits the edited {@link GuildEmoji}. If
     * an error is received, it is emitted through the {@code GuildEmojiEditMono}.
     */",discord4j.core.object.entity
"tags = StringUtils.substringBefore(tags, ""\n"");","/**
	 * Split string to get tag set.
	 * 
	 * @param tags
	 *            the String of tags to split.
	 * @return set of tags.
	 */",net.winroad.wrdoclet.taglets
"@Nonnull
    @CheckReturnValue
    AutoModRuleManager setName(@Nonnull String name);","/**
     * Sets the <b><u>name</u></b> of the selected {@link AutoModRule}.
     *
     * <p>A rule name <b>must</b> be between 1-{@value AutoModRule#MAX_RULE_NAME_LENGTH} characters long!
     *
     * @param  name
     *         The new name for the selected {@link AutoModRule}
     *
     * @throws IllegalArgumentException
     *         If the provided name is {@code null} or not between 1-{@value AutoModRule#MAX_RULE_NAME_LENGTH} characters long
     *
     * @return AutoModRuleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"@Nonnull
    public String getValue()
    {
        return value;
    }","/**
     * The query value that the user is currently typing.
     *
     * <p>This is not validated and may not be a valid value for an actual command.
     * For instance, a user may input invalid numbers for {@link OptionType#NUMBER}.
     *
     * @return The current auto-completable query value
     */",net.dv8tion.jda.api.interactions
boolean isHoisted();,"/**
     * Whether this {@link net.dv8tion.jda.api.entities.Role Role} is hoisted
     * <br>Members in a hoisted role are displayed in their own grouping on the user-list
     *
     * @return True, if this {@link net.dv8tion.jda.api.entities.Role Role} is hoisted.
     */",net.dv8tion.jda.api.entities
"public static Predicate<Throwable> isStatusCode(Integer... codes) {
        return t -> {
            if (t instanceof ClientException) {
                ClientException e = (ClientException) t;
                return Arrays.asList(codes).contains(e.getStatus().code());
            }
            return false;
        };
    }","/**
     * {@link Predicate} helper to further classify a {@link ClientException} depending on the underlying HTTP status
     * code.
     *
     * @param codes the status codes for which this {@link Predicate} should return {@code true}
     * @return a {@link Predicate} that returns {@code true} if the given {@link Throwable} is a {@link ClientException}
     * containing the given HTTP status code
     */",discord4j.rest.http.client
void resetFrame();,"/**
     * Reset the frame for starting a new gesture.
     */",jestures.core.codification
"public static final Route SEARCH_GUILD_MEMBERS_GET = Route.get(""/guilds/{guild.id}/members/search"");","/**
     * Returns a list of guild member objects whose username or nickname starts with a provided string.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#search-guild-members"">
     * https://discord.com/developers/docs/resources/guild#search-guild-members</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    R setName(@Nonnull String name);","/**
     * Sets the name for the new GuildChannel.
     *
     * @param  name
     *         The not-null name for the new GuildChannel (up to {@value Channel#MAX_NAME_LENGTH} characters)
     *
     * @throws IllegalArgumentException
     *         If the provided name is null, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters
     *
     * @return The current action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    ChannelManager<?, ?> getManager();","/**
     * Returns the {@link ChannelManager ChannelManager} for this GuildChannel.
     * <br>In the ChannelManager, you can modify the name, topic and position of this GuildChannel.
     * You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL Permission.MANAGE_CHANNEL}
     *
     * @return The ChannelManager of this GuildChannel
     */",net.dv8tion.jda.api.entities.channel.middleman
"@Nonnull
    @CheckReturnValue
    GuildManager setDefaultNotificationLevel(@Nonnull Guild.NotificationLevel level);","/**
     * Sets the {@link net.dv8tion.jda.api.entities.Guild.NotificationLevel Notification Level} of this {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  level
     *         The new Notification Level for this {@link net.dv8tion.jda.api.entities.Guild Guild}
     *
     * @throws IllegalArgumentException
     *         If the provided level is {@code null} or UNKNOWN
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public GatewayReactorResources(HttpClient httpClient, Scheduler timerTaskScheduler,
                                   Scheduler blockingTaskScheduler, Scheduler payloadSenderScheduler) {
        super(httpClient, timerTaskScheduler, blockingTaskScheduler);
        this.payloadSenderScheduler = payloadSenderScheduler;
    }","/**
     * Create Gateway resources allowing full customization of its properties.
     *
     * @param httpClient the HTTP client to use for initiating Gateway websocket connections. A default is provided
     * in {@link ReactorResources#DEFAULT_HTTP_CLIENT}
     * @param timerTaskScheduler the scheduler for timed tasks. A default can be created from
     * {@link ReactorResources#DEFAULT_TIMER_TASK_SCHEDULER}
     * @param blockingTaskScheduler the scheduler for blocking tasks. A default can be created from
     * {@link ReactorResources#DEFAULT_BLOCKING_TASK_SCHEDULER}
     * @param payloadSenderScheduler a scheduler for sending payloads. A default can be created from
     * {@link GatewayReactorResources#DEFAULT_PAYLOAD_SENDER_SCHEDULER}
     */",discord4j.gateway
"@Nonnull
    public CompletableFuture<File> downloadToFile(@Nonnull File file, int size)
    {
        Checks.notNull(file, ""File"");

        final CompletableFuture<Path> downloadToPathFuture = downloadToPath(getUrl(size), file.toPath());
        return FutureUtil.thenApplyCancellable(downloadToPathFuture, Path::toFile);
    }","/**
     * Downloads the data of this image, at the specified size, and stores it in the specified file.
     * <br><b>The image may not be resized at any size, usually Discord only allows for a few powers of 2</b>, so numbers like 128, 256, 512..., 100 might also be a valid size.
     *
     * <p>If the image is not of a valid size, the CompletableFuture will hold an exception since the HTTP request would have returned a 404.
     *
     * <p><b>Implementation note:</b>
     *       The file is first downloaded into a temporary file, the file is then moved to its real destination when the download is complete.
     *
     * @param  file
     *         The file in which to download the image
     *
     * @throws IllegalArgumentException
     *         If any of the follow checks are true
     *         <ul>
     *             <li>The target file is null</li>
     *             <li>The parent folder of the target file does not exist</li>
     *             <li>The target file exists and is not a {@link Files#isRegularFile(Path, LinkOption...) regular file}</li>
     *             <li>The target file exists and is not {@link Files#isWritable(Path) writable}</li>
     *             <li>The requested size is negative or 0</li>
     *         </ul>
     *
     * @return {@link CompletableFuture} which holds a {@link File}, it is the same as the file passed in the parameters.
     */",net.dv8tion.jda.api.utils
"public void next() {
        attempts.incrementAndGet();
    }","/**
     * Signal that the next retry attempt should be underway.
     */",discord4j.common.retry
"@Nonnull
    public List<FileUpload> getFiles()
    {
        return files;
    }","/**
     * The {@link FileUpload FileUploads} attached to this message.
     *
     * @return The list of file uploads
     */",net.dv8tion.jda.api.utils.messages
"void addFeatureVectorAndSerialize(String gestureName, List<Vector2D> featureVector) throws IOException;","/**
     * Serialize the feature vector.
     *
     * @param gestureName
     *            the {@link String} gesture name
     * @param featureVector
     *            the {@link List} feature vector
     * @throws IOException
     *             the {@link IOException}
     * @throws JsonIOException
     *             the {@link JsonIOException} if can't serialize
     */",jestures.core.serialization
"public Optional<User> getOldUser() {
        return Optional.ofNullable(oldUser);
    }","/**
     * Gets the old version of the {@link User} that was updated, if present.
     * This may not be available if {@code Users} are not stored.
     *
     * @return The old version of the {@link User}, if present.
     */",discord4j.core.event.domain
"@Nonnull
    @CheckReturnValue
    default GuildManager setInvitesDisabled(boolean disabled)
    {
        if (disabled)
            return addFeatures(""INVITES_DISABLED"");
        return removeFeatures(""INVITES_DISABLED"");
    }","/**
     * Configures the {@code INVITES_DISABLED} feature flag of this guild.
     * <br>This is equivalent to adding or removing the feature {@code INVITES_DISABLED} via {@link #setFeatures(Collection)}.
     *
     * @param  disabled
     *         True, to pause/disable all invites to the guild
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static ThreadMembersUpdateAction threadMembersUpdate(int shardIndex, ThreadMembersUpdate dispatch) {
        return new ThreadMembersUpdateAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link ThreadMembersUpdate} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link ThreadMembersUpdateAction}
     */",discord4j.common.store.action.gateway
"public Publisher<?> onAuditLogEntryCreate(AuditLogEntryCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a new entry in Audit Log is created in a guild.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    AutoCompleteCallbackAction replyChoices(@Nonnull Collection<Command.Choice> choices);","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * @param  choices
     *         The choice suggestions to present to the user, 0-{@value OptionData#MAX_CHOICES} choices
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If any of the choice names are empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the numeric value of any of the choices is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *             <li>If the string value of any of the choices is empty or longer than {@value OptionData#MAX_CHOICE_VALUE_LENGTH}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"public Publisher<?> onPollVoteRemove(PollVoteRemoveEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user removes their vote in a poll.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static final Route CURRENT_USER_GET = Route.get(""/users/@me"");","/**
     * Returns the user object of the requester's account. For OAuth2, this requires the identify scope, which will
     * return the object without an email, and optionally the email scope, which returns the object with an email.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/user#get-current-user"">
     * https://discord.com/developers/docs/resources/user#get-current-user</a>
     */",discord4j.rest.route
"@GetMapping(value = {""/manager-delete-project""}","/**
	 * handle deletion of a specific project
	 * Please NOTE that by deleting a project, you will delete all assignments related to this project
	 * @param projectId
	 * @param model
	 * @return redirection to manager-index view (using default view resolver)
	 */",com.pfa.app.controller.web.manager
"public Optional<List<String>> getValues() {
        return data.values().toOptional();
    }","/**
     * Gets the values selected if this is a select menu interaction.
     *
     * @return The select menu values selected.
     */",discord4j.core.object.command
"public int[] asArray() {
        return new int[]{index, count};
    }","/**
     * Return this {@link ShardInfo} object in array representation: [index, count]
     *
     * @return an array with 2 elements, {@code index} and {@code count}
     */",discord4j.gateway
Flux<VoiceStateData> getVoiceStatesInGuild(long guildId);,"/**
     * Retrieves data for all voice states present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Flux} emitting the voice states, or empty if none is present
     */",discord4j.common.store.api.layout
"@Nonnull
    public String getBaseUrl()
    {
        return baseUrl;
    }","/**
     * The configured base-url for REST-api requests.
     *
     * @return The base-url
     */",net.dv8tion.jda.api.requests
"@Nonnull
    public Timestamp minus(@Nonnull Duration duration)
    {
        Checks.notNull(duration, ""Duration"");
        return minus(duration.toMillis());
    }","/**
     * Creates a new timestamp instance with the provided offset into the past relative to the current timestamp.
     *
     * @param  duration
     *         The offset for the new timestamp
     *
     * @throws IllegalArgumentException
     *         If the provided duration is null
     *
     * @return Copy of this timestamp with the relative offset
     *
     * @see    #minus(long)
     */",net.dv8tion.jda.api.utils
"public List<String> getScopes() {
        return this.data.oauth2InstallParams()
            .toOptional()
            .map(InstallParamsData::scopes)
            .orElse(Collections.emptyList());
    }","/**
     * Gets the scopes of this configuration
     *
     * @return The scopes of this configuration
     */",discord4j.core.object
"Mono<Set<MessageData>> onMessageDeleteBulk(int shardIndex, MessageDeleteBulk dispatch);","/**
     * Updates the internal state of the store according to the given {@link MessageDeleteBulk} gateway dispatch. This
     * will typically perform a delete operation on a related collection of {@link MessageData} that is already present
     * in the store.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done, optionally returning the old state of the
     * set of {@link MessageData} before the deletion
     */",discord4j.common.store.api.layout
"eventProcessor = EmitterProcessor.create(Queues.SMALL_BUFFER_SIZE, false);","/**
     * Creates a new event dispatcher using the given {@link FluxProcessor}, backpressure-handling strategy and
     * threading model.
     *
     * @param eventProcessor a {@link FluxProcessor} of {@link Event}, used to bridge gateway events to the dispatcher
     * subscribers
     * @param overflowStrategy an overflow strategy, see {@link FluxSink.OverflowStrategy} for the available strategies
     * @param eventScheduler a {@link Scheduler} to ensure a certain thread model on each published signal
     */",discord4j.core.event
"Mono<Void> onMessageReactionRemove(int shardIndex, MessageReactionRemove dispatch);","/**
     * Updates the internal state of the store according to the given {@link MessageReactionRemove} gateway dispatch.
     * This will typically perform an update operation on a related {@link MessageData} that is already present in
     * the store in order to remove the reaction.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"@Nonnull
    public List<ForumTagSnowflake> getAppliedTags()
    {
        return appliedTags;
    }","/**
     * The applied tags for the thread / forum post.
     *
     * @return The applied tags
     */",net.dv8tion.jda.api.requests.restaction
"public static RestStageInstance create(RestClient restClient, Snowflake channelId) {
        return new RestStageInstance(restClient, channelId.asLong());
    }","/**
     * Create a {@link RestStageInstance} for a given channel ID. This method does not perform any API request.
     *
     * @param restClient the client to make API requests
     * @param channelId the channel ID of this entity
     * @return a {@link RestStageInstance} represented by this {@param channelId}.
     */",discord4j.rest.entity
default void handleEncodedAudio(@Nonnull OpusPacket packet) {},"/**
     * If {@link #canReceiveEncoded()} returns true, JDA will provide raw {@link net.dv8tion.jda.api.audio.OpusPacket OpusPackets}
     * to this method <b>every 20 milliseconds</b>. These packets are for specific users rather than a combined packet
     * of all users like {@link #handleCombinedAudio(CombinedAudio)}.
     *
     * <p>This is useful for systems that want to either do lazy decoding of audio through {@link net.dv8tion.jda.api.audio.OpusPacket#getAudioData(double)}
     * or for systems that can decode and transform the audio data manually without JDA involvement.
     *
     * @param packet
     *        The {@link net.dv8tion.jda.api.audio.OpusPacket}
     *
     * @since  4.0.0
     */",net.dv8tion.jda.api.audio
"public Snowflake getGuildId() {
        // Even though Discord's raw Voice State structure does not include the guild_id key when sent in the
        // voice_states for a guild_create, we manually populate the field in GuildDispatchHandlers.guildCreate, so
        // it should always be present, making this safe.
        return Snowflake.of(data.guildId().toOptional().orElseThrow(IllegalStateException::new));
    }","/**
     * Gets the guild ID this voice state is for.
     *
     * @return The guild ID this voice state is for.
     */",discord4j.core.object
"@Nonnull
    PermissionOverrideAction resetAllow();","/**
     * Resets the allowed permissions to the current original value.
     * <br>For a new override this will just be 0.
     *
     * @return The current PermissionOverrideAction for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    default ForumChannel getForumChannelById(@Nonnull String id)
    {
        return (ForumChannel) getChannelCache().getElementById(ChannelType.FORUM, id);
    }","/**
     * Gets a {@link ForumChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link ForumChannel}.
     *
     * @throws java.lang.NumberFormatException
     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
     *
     * @return Possibly-null {@link ForumChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Optional<Instant> getCommunicationDisabledUntil() {
        return Optional.ofNullable(communicationDisabledUntil)
            .map(timestamp -> DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(timestamp, Instant::from));
    }","/**
     * Gets when the user ends their timeout, if present.
     *
     * @return When the user ends their timeout in the server, if present.
     */",discord4j.core.event.domain.guild
"public Route getRoute() {
        return route;
    }","/**
     * Return the API endpoint targeted by this request.
     *
     * @return the {@link Route} of this {@link DiscordWebRequest}
     */",discord4j.rest.request
"@Nullable
    default TeamMember getMember(@Nonnull User user)
    {
        Checks.notNull(user, ""User"");
        return getMemberById(user.getIdLong());
    }","/**
     * Retrieves the {@link net.dv8tion.jda.api.entities.TeamMember TeamMember} instance
     * for the provided user. If the user is not a member of this team, null is returned.
     *
     * @param  user
     *         The user for the team member
     *
     * @throws java.lang.IllegalArgumentException
     *         If provided with null
     *
     * @return The {@link net.dv8tion.jda.api.entities.TeamMember TeamMember} for the user or null
     */",net.dv8tion.jda.api.entities
"@Nonnull
    public static String maskedLink(@Nonnull String text, @Nonnull String url)
    {
        return ""["" + text.replace(""]"", ""\\]"") + ""]("" + url.replace("")"", ""%29"") + "")"";
    }","/**
     * Creates a masked link with the provided url as target.
     * <br>This will replace any closing parentheses (in the url) with the url encoded equivalent
     * and replace closing square brackets with their escaped equivalent.
     *
     * @param  text
     *         The text to display
     * @param  url
     *         The target url
     *
     * @return The resulting output
     */",net.dv8tion.jda.api.utils
private static final Logger LOG = Logger.getLogger(RecognitionScreenView.class);,"/*******************************************************************************
 * Copyright (c) 2018 Giulianini Luca Licensed under the Apache License, Version 2.0 (the ""License""); you may not use
 * this file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and limitations under the
 * License.
 *******************************************************************************/",jestures.core.view.screens
"protected IdentifyOptions(Builder builder) {
        this.shardInfo = builder.shardInfo;
        this.initialStatus = builder.initialStatus;
        this.intents = builder.intents;
        this.largeThreshold = builder.largeThreshold;
        this.resumeSession = builder.resumeSession;
    }","/**
     * Create a new Gateway authentication policy.
     *
     * @param builder a builder used to configure this object
     */",discord4j.gateway
"public Mono<Void> deleteReply() {
        return getInteractionResponse().deleteInitialResponse();
    }","/**
     * Deletes the initial reply to this interaction.
     *
     * @return a {@link Mono} where, upon successful initial reply deletion, emits nothing indicating completion. If an
     * error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.interaction
"public Optional<String> getReason() {
        return Optional.ofNullable(reason).filter(r -> !r.isEmpty());
    }","/**
     * Return a websocket close reason, if present.
     *
     * @return an {@link Optional} containing a close reason if present, or empty otherwise
     */",discord4j.common.close
Duration apply(HttpClientResponse response);,"/**
     * Apply this function to a {@link HttpClientResponse} to obtain a {@link Duration} representing a delay due to
     * rate limiting.
     *
     * @param response the original {@link HttpClientResponse}
     * @return a {@link Duration} indicating rate limiting, can be {@link Duration#ZERO} if no limit is present
     */",discord4j.rest.request
"public Publisher<?> onMessageCreate(MessageCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a message is sent in a message channel.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    RestAction<Void> deleteMessagesByIds(@Nonnull Collection<String> messageIds);","/**
     * Bulk deletes a list of messages.
     * <b>This is not the same as calling {@link MessageChannel#deleteMessageById(String)} in a loop.</b>
     * <br>This is much more efficient, but it has a different ratelimit. You may call this once per second per Guild.
     *
     * <p>Must be at least 2 messages and not be more than 100 messages at a time.
     * <br>If you only have 1 message, use the {@link net.dv8tion.jda.api.entities.Message#delete()} method instead.
     *
     * <br><p>You must have {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE} in this channel to use
     * this function.
     *
     * <p>This method is best used when you have a large amount of messages but only their message Ids. If you are using
     * {@link net.dv8tion.jda.api.entities.MessageHistory MessageHistory} or have {@link net.dv8tion.jda.api.entities.Message Message}
     * objects, it would be easier to use {@link #deleteMessages(java.util.Collection)}.
     *
     * <p>Possible ErrorResponses include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>if this channel was deleted</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>if any of the provided messages does not exist</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>if we were removed from the guild</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The send request was attempted after the account lost
     *         {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE} in the channel.</li>
     * </ul>
     *
     * @param  messageIds
     *         The message ids for the messages to delete.
     *
     * @throws java.lang.IllegalArgumentException
     *         If the size of the list less than 2 or more than 100 messages.
     * @throws java.lang.NumberFormatException
     *         If any of the provided ids cannot be parsed by {@link Long#parseLong(String)}
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If this account does not have {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE}
     *
     * @return {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction}
     *
     * @see    #deleteMessages(Collection)
     * @see    #purgeMessagesById(List)
     */",net.dv8tion.jda.api.entities.channel.middleman
"@Nonnull
    ActionComponent getComponent();","/**
     * The {@link ActionComponent} instance.
     *
     * @return The {@link ActionComponent}
     */",net.dv8tion.jda.api.interactions.components
"public abstract void receive(char sequence, int timestamp, int ssrc, byte[] audio);","/**
     * Called when audio is received, automatically extracting useful information.
     * @param sequence The sequence of the packet.
     * @param timestamp The timestamp of the packet.
     * @param ssrc The ssrc of the audio source.
     * @param audio The <a href=""https://en.wikipedia.org/wiki/Opus_(audio_format)"">Opus</a>-encoded audio.
     */",discord4j.voice
"public Presence getCurrent() {
        return current;
    }","/**
     * Gets the current, new version of the {@link Presence}.
     *
     * @return The current, new version of the {@link Presence}.
     */",discord4j.core.event.domain
"@Nonnull
    RichCustomEmoji getEmoji();","/**
     * The target {@link RichCustomEmoji} that will be modified by this Manager
     *
     * @return The target emoji
     */",net.dv8tion.jda.api.managers
"public RestMember getMemberById(final Snowflake guildId, final Snowflake userId) {
        return RestMember.create(this, guildId, userId);
    }","/**
     * Requests to retrieve the member represented by the supplied IDs.
     *
     * @param guildId The ID of the guild.
     * @param userId The ID of the user.
     * @return A {@link RestMember} as represented by the supplied IDs.
     */",discord4j.rest
"@Nonnull
        public List<LayoutComponent> getComponents()
        {
            return components;
        }","/**
         * Returns a modifiable list of all components
         *
         * @return A modifiable list of all components
         */",net.dv8tion.jda.api.interactions.modals
Mono<Long> countMembersInGuild(long guildId);,"/**
     * Counts the number of members present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Mono} emitting the member count
     */",discord4j.common.store.api.layout
"public int getAnswerId() {
        return this.answerId;
    }","/**
     * Get the ID of the answer that was voted.
     *
     * @return The ID of the answer that was voted.
     */",discord4j.core.event.domain.poll
"@Nonnull
    public static String getString(@Nonnull DataArray root, @Nonnull String path)
    {
        String string = get(root, path, DataObject::getString, DataArray::getString);
        if (string == null)
            pathError(path, ""String"");
        return string;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The String value at the given path
     */",net.dv8tion.jda.api.utils.data
"public ShardCoordinator getShardCoordinator() {
        return shardCoordinator;
    }","/**
     * Returns the {@link ShardCoordinator} that is capable of coordinating certain shard actions.
     *
     * @return the {@link ShardCoordinator} tied to this {@link GatewayResources}
     */",discord4j.core
"public static GetGuildByIdAction getGuildById(long guildId) {
        return new GetGuildByIdAction(guildId);
    }","/**
     * Creates an action to retrieve data for the guild corresponding to the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link GetGuildByIdAction}
     */",discord4j.common.store.action.read
"@Nonnull
    @CheckReturnValue
    AuditableRestAction<Void> modifyStatus(@Nonnull String status);","/**
     * Change the current voice channel status.
     * <br>This can be configured by users who are connected
     * and have the {@link net.dv8tion.jda.api.Permission#VOICE_SET_STATUS set voice channel status} permission.
     *
     * @param  status
     *         The new status, or empty to unset
     *
     * @throws IllegalArgumentException
     *         If the status is null or longer than {@value #MAX_STATUS_LENGTH} characters
     * @throws net.dv8tion.jda.api.exceptions.MissingAccessException
     *         If the currently logged in account does not have {@link Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} in this channel
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         <ul>
     *             <li>If the currently logged in account is <b>not connected</b> and does not have the {@link Permission#MANAGE_CHANNEL MANAGE_CHANNEL} permission.</li>
     *             <li>If the currently logged in account is <b>connected</b> and does not have the {@link Permission#VOICE_SET_STATUS VOICE_SET_STATUS} permission.</li>
     *         </ul>
     *
     * @return {@link AuditableRestAction}
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nullable
    default VoiceChannel getVoiceChannelById(@Nonnull String id)
    {
        return (VoiceChannel) getChannelCache().getElementById(ChannelType.VOICE, id);
    }","/**
     * Gets a {@link VoiceChannel VoiceChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link VoiceChannel VoiceChannel}.
     *
     * @throws java.lang.NumberFormatException
     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
     *
     * @return Possibly-null {@link VoiceChannel VoiceChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public EventDispatcher getEventDispatcher() {
        return eventDispatcher;
    }","/**
     * Distributes events to subscribers. Starting from v3.1, the {@link EventDispatcher} is capable of distributing
     * events from all {@link GatewayClient} connections (shards) that were specified when this
     * {@link GatewayDiscordClient} was created.
     *
     * @return the {@link EventDispatcher} tied to this {@link GatewayResources}
     */",discord4j.core
"public static final Route GUILD_GET = Route.get(""/guilds/{guild.id}"");","/**
     * Returns the guild object for the given id.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild"">
     * https://discord.com/developers/docs/resources/guild#get-guild</a>
     */",discord4j.rest.route
"@Nullable
    public String getNewBannerUrl()
    {
        return next == null ? null : String.format(Guild.BANNER_URL, guild.getId(), next, next.startsWith(""a_"") ? ""gif"" : ""png"");
    }","/**
     * The new banner url
     *
     * @return The new banner url, or null if the banner was removed
     */",net.dv8tion.jda.api.events.guild.update
"default Mono<Webhook> createWebhook(WebhookCreateSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(
                () -> getClient().getRestClient().getWebhookService()
                        .createWebhook(getId().asLong(), spec.asRequest(), spec.reason()))
                .map(data -> new Webhook(getClient(), data));
    }","/**
     * Requests to create a webhook.
     *
     * @param spec an immutable object that specifies how to create the webhook
     * @return A {@link Mono} where, upon successful completion, emits the created {@link Webhook}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"default Flux<Message> getMessagesBefore(Snowflake messageId) {
        final Function<Map<String, Object>, Flux<MessageData>> doRequest = params ->
                getClient().getRestClient().getChannelService()
                        .getMessages(getId().asLong(), params);

        return PaginationUtil.paginateBefore(doRequest, data -> Snowflake.asLong(data.id()), messageId.asLong(), 100)
                .map(data -> new Message(getClient(), data));
    }","/**
     * Requests to retrieve <i>all</i> messages <i>before</i> the specified ID.
     * <p>
     * The returned {@code Flux} will emit items in <i>reverse-</i>chronological order (newest to oldest). It is
     * recommended to limit the emitted items by invoking either {@link Flux#takeWhile(Predicate)} (to retrieve IDs
     * within a specified range) or {@link Flux#take(long)} (to retrieve a specific amount of IDs).
     * <p>
     * The following example will get <i>all</i> messages from {@code messageId} to {@code myOtherMessageId}: {@code
     * getMessagesBefore(messageId).takeWhile(message -> message.getId().compareTo(myOtherMessageId) >= 0)}
     *
     * @param messageId The ID of the <i>newest</i> message to retrieve. Use {@link Snowflake#of(Instant)} to retrieve a
     *                  time-based ID.
     * @return A {@link Flux} that continually emits <i>all</i> {@link Message messages} <i>before</i> the specified ID.
     * If an error is received, it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    @Override
    CustomEmojiManager reset(long... fields);","/**
     * Resets the fields specified by the provided bit-flag patterns.
     * <br>Example: {@code manager.reset(CustomEmojiManager.NAME, CustomEmojiManager.ROLES);}
     *
     * <p><b>Flag Constants:</b>
     * <ul>
     *     <li>{@link #NAME}</li>
     *     <li>{@link #ROLES}</li>
     * </ul>
     *
     * @param  fields
     *         Integer values containing the flags to reset.
     *
     * @return CustomEmojiManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public boolean isLogged()
    {
        return logged;
    }","/**
     * Whether this Throwable was already printed using the JDA logging system
     *
     * @return True, if this throwable was already logged
     */",net.dv8tion.jda.api.events
"public Publisher<?> onVoiceChannelCreate(VoiceChannelCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild voice channel is created.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    ThreadChannelPaginationAction retrieveArchivedPrivateThreadChannels();","/**
     * Retrieves the archived private {@link ThreadChannel ThreadChannels} for this channel.
     * <br>This will iterate over all previously opened private threads, that have been archived.
     * This is a moderator restricted method, since private threads are only visible to members with {@link net.dv8tion.jda.api.Permission#MANAGE_THREADS Permission.MANAGE_THREADS}.
     *
     * <p>You can use {@link #retrieveArchivedPublicThreadChannels()}, to get all <em>public</em> archived threads.
     *
     * <p>Note that {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels} cannot have private threads.
     *
     * @throws InsufficientPermissionException
     *         If the bot does not have {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY Permission.MESSAGE_HISTORY}
     *         or {@link net.dv8tion.jda.api.Permission#MANAGE_THREADS Permission.MANAGE_THREADS} in this channel
     *
     * @return {@link ThreadChannelPaginationAction} to iterate over all private archived ThreadChannels
     */",net.dv8tion.jda.api.entities.channel.attribute
"public boolean isNewlyCreated() {
        return threadNewlyCreated;
    }","/**
     * Gets if the thread related to this event was newly created.
     *
     * @return {@code true} if was newly created, {@code false} otherwise.
     */",discord4j.core.event.domain.thread
"@Nonnull
        public Builder setId(@Nonnull String customId)
        {
            Checks.notBlank(customId, ""ID"");
            Checks.notLonger(customId, MAX_ID_LENGTH, ""ID"");
            this.id = customId;
            return this;
        }","/**
         * Sets the custom id for this modal.
         *
         * @param  customId
         *         Custom id
         *
         * @throws IllegalArgumentException
         *         If the provided id is null, blank, or is longer than {@value #MAX_ID_LENGTH} characters.
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.modals
"@Nonnull
        public Builder setId(@Nonnull String id)
        {
            Checks.notBlank(id, ""ID"");
            Checks.notLonger(id, MAX_ID_LENGTH, ""ID"");
            this.id = id;
            return this;
        }","/**
         * Sets the id for this TextInput
         * <br>This is used to uniquely identify it.
         *
         * @param  id
         *         The id to set
         *
         * @throws IllegalArgumentException
         *         <ul>
         *             <li>If id is null or blank</li>
         *             <li>If id is longer than {@value #MAX_ID_LENGTH} characters</li>
         *         </ul>
         *
         * @return The same Builder for chaining convenience.
         */",net.dv8tion.jda.api.interactions.components.text
"public static final Route REACTION_DELETE = Route.delete(""/channels/{channel.id}/messages/{message.id}/reactions/{emoji}"");","/**
     * Deletes all the reactions for a given emoji on a message. This endpoint requires the 'MANAGE_MESSAGES' permission
     * to be present on the current user.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji"">
     * https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    default RestAction<Void> clearReactionsById(long messageId)
    {
        return clearReactionsById(Long.toUnsignedString(messageId));
    }","/**
     * Attempts to remove all reactions from a message with the specified {@code messageId} in this TextChannel
     * <br>This is useful for moderator commands that wish to remove all reactions at once from a specific message.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The clear-reactions request was attempted after the account lost access to the {@link TextChannel TextChannel}
     *         due to {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} being revoked, or the
     *         account lost access to the {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The clear-reactions request was attempted after the account lost {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE}
     *         in the {@link TextChannel TextChannel} when adding the reaction.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *         The clear-reactions request was attempted after the Message had been deleted.</li>
     * </ul>
     *
     * @param  messageId
     *         The message id
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have
     *         {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE} in this channel.
     *
     * @return {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction}
     */",net.dv8tion.jda.api.entities.channel.middleman
"@Nonnull
    public EnumSet<User.UserFlag> getOldFlags()
    {
        return getOldValue();
    }","/**
     * Gets the old {@link net.dv8tion.jda.api.entities.User.UserFlag UserFlags} of the User as {@link EnumSet}.
     * 
     * @return {@link EnumSet} of the old {@link net.dv8tion.jda.api.entities.User.UserFlag UserFlags}
     */",net.dv8tion.jda.api.events.user.update
"@Nonnull
        VoiceState getVoiceState();","/**
         * The current voice state of the member.
         * <br>If the user is not in voice, this will return a VoiceState with a null channel.
         * 
         * @return never-null VoiceState of the member
         */",net.dv8tion.jda.api.entities
"@Nonnull
        public B setId(@Nonnull String customId)
        {
            Checks.notEmpty(customId, ""Component ID"");
            Checks.notLonger(customId, ID_MAX_LENGTH, ""Component ID"");
            this.customId = customId;
            return (B) this;
        }","/**
         * Change the custom id used to identify the select menu.
         *
         * @param  customId
         *         The new custom id to use
         *
         * @throws IllegalArgumentException
         *         If the provided id is null, empty, or longer than {@value #ID_MAX_LENGTH} characters
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.components.selections
"public Mono<Void> inviteMemberToStageSpeakers(Member member) {
        return Mono.defer(() -> gateway.getRestClient().getGuildService()
                .modifyOthersVoiceState(member.getGuildId().asLong(), member.getId().asLong(),
                        UpdateUserVoiceStateRequest.builder().suppress(false).build()));
    }","/**
     * Requests to invite the specified {@param member} to the speakers of the stage channel associated with this
     * stage instance.
     *
     * @param member The member to invite to the stage speakers
     * @return A {@link Mono} where, upon successful completion, emits nothing; indicating that the specified
     * {@param member} has been invited to the speakers of the stage channel associated with this stage instance.
     * If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"@Nonnull
    IPermissionContainer getPermissionContainer();","/**
     * The channel containing the permissions relevant to this channel.
     *
     * <p>This is usually the same channel, but for threads the parent channel is used instead.
     *
     * @return The permission container
     */",net.dv8tion.jda.api.entities.channel.middleman
"public PermissionSet getPermissions() {
        return PermissionSet.of(this.data.permissions());
    }","/**
     * Gets the permissions of this configuration
     *
     * @return The permissions of this configuration
     */",discord4j.core.object
"@Nonnull
    ChannelType getType();","/**
     * The {@link ChannelType} for the resulting channel.
     *
     * @return The channel type
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    public MessagePollData build()
    {
        if (answers.isEmpty())
            throw new IllegalStateException(""Cannot build a poll without answers"");
        return new MessagePollData(
            layout,
            new MessagePoll.Question(title, null),
            new ArrayList<>(answers),
            duration,
            isMultiAnswer
        );
    }","/**
     * Build the poll data.
     *
     * @throws IllegalStateException
     *         If no answers have been added to the builder
     *
     * @return {@link MessagePollData}
     */",net.dv8tion.jda.api.utils.messages
boolean inAudioChannel();,"/**
     * Used to determine if the {@link Member} is currently connected to an {@link AudioChannel}
     * in the {@link Guild} returned from {@link #getGuild()}.
     * <br>If this is {@code false}, {@link #getChannel()} will return {@code null}.
     *
     * @return True, if the {@link Member} is currently connected to an {@link AudioChannel} in this {@link Guild}
     */",net.dv8tion.jda.api.entities
"public Optional<Set<GuildEmoji>> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets a list of ALL old emojis of the {@link Guild}, if present.
     * This may not be available if {@code GuildEmojis} are not stored.
     *
     * @return A list of ALL old emojis of the {@link Guild}.
     */",discord4j.core.event.domain.guild
"@Nonnull
    default ChannelType getType()
    {
        return getChannel().getType();
    }","/**
     * The {@link ChannelType ChannelType} of
     * the targeted {@link net.dv8tion.jda.api.entities.channel.middleman.MessageChannel MessageChannel}.
     *
     * @return {@link ChannelType ChannelType}
     */",net.dv8tion.jda.api.requests.restaction.pagination
Faction myFaction = this.getFaction();,"/**
     * Check if the scoreboard should be shown. Simple method to be used by above method.
     *
     * @param toShow Faction to be shown.
     * @return true if should show, otherwise false.
     */",com.massivecraft.factions.zcore.persist
"default Mono<Void> send(Publisher<? extends GatewayPayload<?>> publisher) {
        return Flux.from(publisher)
                .doOnNext(payload -> sender().emitNext(payload, Sinks.EmitFailureHandler.FAIL_FAST))
                .then();
    }","/**
     * Sends a sequence of {@link GatewayPayload payloads} through this {@link GatewayClient} and returns a
     * {@link Mono} that signals completion when the payloads have been sent.
     *
     * @param publisher a sequence of outbound payloads
     * @return a {@link Mono} completing when payloads have been sent
     */",discord4j.gateway
"@Nonnull
    @CheckReturnValue
    RoleManager setMentionable(boolean mentionable);","/**
     * Sets the <b><u>mentionable state</u></b> of the selected {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * @param  mentionable
     *         Whether the selected {@link net.dv8tion.jda.api.entities.Role Role} should be mentionable
     *
     * @return RoleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public int getUses()
    {
        return uses;
    }","/**
     * How many times this invite has been used.
     * <br>This is reset after the invite is changed or removed.
     *
     * @return The invite uses
     */",net.dv8tion.jda.api.entities
"protected PermissionException(@Nonnull Permission permission, String reason)
    {
        super(reason);
        Checks.notNull(permission, ""permission"");
        this.permission = permission;
    }","/**
     * Creates a new PermissionException
     *
     * @param permission
     *        The required {@link net.dv8tion.jda.api.Permission Permission}
     * @param reason
     *        The reason for this Exception
     */",net.dv8tion.jda.api.exceptions
"public static RouteMatcher route(Route route) {
        return new RouteMatcher(route.newRequest());
    }","/**
     * Create a new {@link RouteMatcher} that matches any request made for the given {@link Route}. A list of
     * {@link Route} objects exist in the {@link Routes} class.
     *
     * @param route the {@link Route} to be matched by this instance
     * @return a new {@link RouteMatcher}
     */",discord4j.rest.request
"@Nullable
        default String getSubscriptionId()
        {
            return hasSubscriptionListing() ? Long.toUnsignedString(getSubscriptionIdLong()) : null;
        }","/**
         * The subscription listing id for this role. If a role has a subscription id then it is a premium role that 
         * can be acquired by users via purchase.
         *
         * @return The listing id, or null if this role is not for a subscription listing
         *
         * @see    #isAvailableForPurchase()
         */",net.dv8tion.jda.api.entities
"@Nonnull
    String getAccessToken();","/**
     * The access token
     *
     * @return The access token
     */",net.dv8tion.jda.api.requests.restaction
"public String getAddonName() {
        return addonName;
    }","/**
     * Addon name
     * @return Addon name.
     */",com.massivecraft.factions.addon
"public void exit() {
    System.exit(0);
  }","/**
   * Exits the program. 
   */",io.github.augustoravazoli.termenu.io
"@Nonnull
    public StageChannel getChannel()
    {
        return instance.getChannel();
    }","/**
     * The {@link StageChannel} this instance belongs to
     *
     * @return The StageChannel
     */",net.dv8tion.jda.api.events.stage
"public static final Route GUILD_ROLE_MODIFY = Route.patch(""/guilds/{guild.id}/roles/{role.id}"");","/**
     * Modify a guild role. Requires the 'MANAGE_ROLES' permission. Returns the updated role on success. Fires a Guild
     * Role Update Gateway event.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#modify-guild-role"">
     * https://discord.com/developers/docs/resources/guild#modify-guild-role</a>
     */",discord4j.rest.route
"@Nonnull
    public CompletableFuture<Icon> downloadAsIcon(int width, int height)
    {
        return downloadAsIcon(getUrl(width, height));
    }","/**
     * Downloads the data of this attachment, at the specified size, and constructs an {@link Icon} from the data.
     * <br>The attachment, if an image, may be resized at any size, however if the size does not fit the ratio of the image, then it will be cropped as to fit the target size.
     * <br>If the attachment is not an image then the size parameters are ignored and the file is downloaded.
     *
     * @param  width
     *         The width of this image, must be positive
     * @param  height
     *         The height of this image, must be positive
     *
     * @throws IllegalArgumentException
     *         If any of the follow checks are true
     *         <ul>
     *             <li>The requested width is negative or 0</li>
     *             <li>The requested height is negative or 0</li>
     *         </ul>
     *
     * @return {@link CompletableFuture} which holds an {@link Icon}.
     */",net.dv8tion.jda.api.utils
"@RequestMapping(value = ""updateWeather"", method = RequestMethod.PUT)
    public Mono<Void> updateWeather(@Valid @RequestBody CityWeatherUpdateDTO dto) {
        return service.updateWeather(dto);
    }","/**
     * This method sends the DTO to the service's updateWeather method.
     *
     * @param dto -> CityWeatherUpdateDTO comes from the corresponding request body
     * @return Mono<Void>
     * @since 1.0
     */",org.khasanof.citiesapi.controller.city
"public Optional<Unicode> asUnicodeEmoji() {
        return this instanceof Unicode ? Optional.of((Unicode) this) : Optional.empty();
    }","/**
     * Gets this emoji downcasted to {@link Unicode a unicode reaction emoji}.
     *
     * @return This emoji downcasted to a unicode emoji, if possible.
     */",discord4j.core.object.reaction
"public DiscordWebRequest newRequest(Object... uriVars) {
        return new DiscordWebRequest(this, uriVars);
    }","/**
     * Prepare a request, expanding this route template URI with the given parameters.
     *
     * @param uriVars the values to expand each template parameter
     * @return a request that is ready to be routed
     * @see DiscordWebRequest#exchange
     */",discord4j.rest.route
"public Mono<InviteData> getInvite(String inviteCode, boolean withCounts, boolean withExpiration,
                                      @Nullable Snowflake guildScheduledEventId) {
        Map<String, Object> queryParams = new HashMap<>();
        queryParams.put(""with_counts"", withCounts);
        queryParams.put(""with_expiration"", withExpiration);
        if (guildScheduledEventId != null) {
            queryParams.put(""guild_scheduled_event_id"", guildScheduledEventId.asString());
        }
        return inviteService.getInvite(inviteCode, queryParams);
    }","/**
     * Requests to retrieve an invite.
     *
     * @param inviteCode The code for the invite (e.g. ""xdYkpp"").
     * @param withCounts whether the invite should contain approximate member counts
     * @param withExpiration whether the invite should contain the expiration date
     * @param guildScheduledEventId the guild scheduled event to include with the invite, can be {@code null}
     * @return A {@link Mono} where, upon successful completion, emits the {@link InviteData} as represented by the
     * supplied invite code. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest
"public Snowflake getSelfId() {
        return Snowflake.of(Optional.ofNullable(selfId).orElseThrow(UnsupportedOperationException::new));
    }","/**
     * Gets the bot user's ID.
     *
     * @return The bot user's ID.
     */",discord4j.rest
"public long getGuildId()
    {
        return guildId;
    }","/**
     * The id for the responsible {@link net.dv8tion.jda.api.entities.Guild} instance.
     *
     * @return The ID as a long
     *
     * @since  4.0.0
     *
     * @see    net.dv8tion.jda.api.JDA#getGuildById(long)
     */",net.dv8tion.jda.api.exceptions
"@Nonnull
    public static DataObject getObject(@Nonnull DataObject root, @Nonnull String path)
    {
        DataObject obj = optObject(root, path);
        if (obj == null)
            pathError(path, ""Object"");
        return obj;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The DataObject at the given path
     */",net.dv8tion.jda.api.utils.data
"static GlobalRateLimiter create() {
        return BucketGlobalRateLimiter.create();
    }","/**
     * Create a default limiter based off {@link BucketGlobalRateLimiter} that can be shared across multiple
     * {@link RestClient} for coordinated global rate limit actions.
     *
     * @return a default {@link GlobalRateLimiter}
     */",discord4j.rest.request
"public static VoiceReactorResources.Builder builder() {
        return new VoiceReactorResources.Builder();
    }","/**
     * Returns a new builder to create {@link VoiceReactorResources}.
     *
     * @return a builder to create {@link VoiceReactorResources}
     */",discord4j.voice
"@Nonnull
    SnowflakeCacheView<VoiceChannel> getVoiceChannelCache();","/**
     * Sorted {@link net.dv8tion.jda.api.utils.cache.SnowflakeCacheView SnowflakeCacheView} of {@link VoiceChannel}.
     * <br>In {@link Guild} cache, channels are sorted according to their position and id.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @return {@link net.dv8tion.jda.api.utils.cache.SortedSnowflakeCacheView SortedSnowflakeCacheView}
     */",net.dv8tion.jda.api.entities.channel.attribute
"public static DiscordOAuth2Client createFromToken(RestClient restClient, long clientId, String clientSecret,
                                                      AccessTokenData data) {
        return new DiscordOAuth2Client(restClient, clientId, clientSecret, __ -> Mono.just(new AccessToken(data)));
    }","/**
     * Create an OAuth2 client with the raw {@link AccessTokenData} returned from
     * {@link OAuth2Service#exchangeAuthorizationCode(AuthorizationCodeGrantRequest)}. Useful if a token is requested
     * directly by your HTTP server.
     *
     * @param restClient a Discord REST API client for performing requests
     * @param clientId your application's client ID
     * @param clientSecret your application's client secret
     * @param data the access token object
     * @return a client that can work with a valid token to perform API requests
     */",discord4j.oauth2
"public List<ApplicationCommandInteractionOption> getOptions() {
        return getInteraction().getCommandInteraction()
                .orElseThrow(IllegalStateException::new) // should always be present for chat input commands
                .getOptions();
    }","/**
     * Gets the options of the invoked command.
     *
     * @return The options of the invoked command.
     */",discord4j.core.event.domain.interaction
"default int getPosition()
    {
        int position = getGuild().getChannels().indexOf(this);
        if (position > -1)
            return position;
        throw new IllegalStateException(""Somehow when determining position we never found the "" + getType().name() + "" in the Guild's channels? wtf?"");
    }","/**
     * The position of this channel in the channel list of the guild.
     * <br>This does not account for thread channels, as they do not have positions.
     *
     * <p>This is functionally equivalent to {@code getGuild().getChannels().indexOf(channel)}.
     * To efficiently compare the position between channels, it is recommended to use {@link #compareTo(Object)} instead of the position.
     *
     * @throws IllegalStateException
     *         If this channel is not in the guild cache
     *
     * @return Zero-based int of position of the GuildChannel.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Publisher<?> onScheduledEventCreate(ScheduledEventCreateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a scheduled event is created.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static GetRoleByIdAction getRoleById(long guildId, long roleId) {
        return new GetRoleByIdAction(guildId, roleId);
    }","/**
     * Creates an action to retrieve data for the role corresponding to the given guild ID and role ID.
     *
     * @param guildId the guild ID
     * @param roleId  the role ID
     * @return a new {@link GetRoleByIdAction}
     */",discord4j.common.store.action.read
"@Nonnull
    @Unmodifiable
    List<IMentionable> getMentions(@Nonnull Message.MentionType... types);","/**
     * Combines all instances of {@link net.dv8tion.jda.api.entities.IMentionable IMentionable}
     * filtered by the specified {@link net.dv8tion.jda.api.entities.Message.MentionType MentionType} values.
     * <br>If a {@link Member} is available, it will be taken in favor of a {@link User}.
     * This only provides either the Member or the User instance, rather than both.
     *
     * <p>If no MentionType values are given, all types are used.
     *
     * @param  types
     *         {@link net.dv8tion.jda.api.entities.Message.MentionType MentionTypes} to include
     *
     * @throws java.lang.IllegalArgumentException
     *         If provided with {@code null}
     *
     * @return Immutable list of filtered {@link net.dv8tion.jda.api.entities.IMentionable IMentionable} instances
     */",net.dv8tion.jda.api.entities
"@Nonnull
    public CompletableFuture<File> downloadToFile(@Nonnull File file, int width, int height)
    {
        Checks.notNull(file, ""File"");

        final CompletableFuture<Path> downloadToPathFuture = downloadToPath(getUrl(width, height), file.toPath());
        return FutureUtil.thenApplyCancellable(downloadToPathFuture, Path::toFile);
    }","/**
     * Downloads the data of this attachment, at the specified width and height, and stores it in the specified file.
     * <br>The attachment, if an image, may be resized at any size, however if the size does not fit the ratio of the image, then it will be cropped as to fit the target size.
     * <br>If the attachment is not an image then the size parameters are ignored and the file is downloaded.
     *
     * <p><b>Implementation note:</b>
     *       The file is first downloaded into a temporary file, the file is then moved to its real destination when the download is complete.
     *
     * @param  file
     *         The file in which to download the image
     * @param  width
     *         The width of this image, must be positive
     * @param  height
     *         The height of this image, must be positive
     *
     * @throws IllegalArgumentException
     *         If any of the follow checks are true
     *         <ul>
     *             <li>The target file is null</li>
     *             <li>The parent folder of the target file does not exist</li>
     *             <li>The target file exists and is not a {@link Files#isRegularFile(Path, LinkOption...) regular file}</li>
     *             <li>The target file exists and is not {@link Files#isWritable(Path) writable}</li>
     *             <li>The requested width is negative or 0</li>
     *             <li>The requested height is negative or 0</li>
     *         </ul>
     *
     * @return {@link CompletableFuture} which holds a {@link File}, it is the same as the file passed in the parameters.
     */",net.dv8tion.jda.api.utils
"@Nonnull
    List<? extends AttachedFile> getAttachments();","/**
     * The configured message attachments as {@link AttachedFile}, this is the opposite of {@link MessageRequest#setFiles(Collection)} and only returns what was set using that setter.
     *
     * <p>For message edit requests, this will not be the current file attachments of the message.
     *
     * @return The currently configured attachments, or an empty list if none were set yet
     *
     * @see    MessageRequest#setFiles(Collection)
     */",net.dv8tion.jda.api.utils.messages
"Publisher<Void> handle(DiscordOAuth2Client client, HttpServerRequest req, HttpServerResponse res);","/**
     * Handle an incoming request to provide a response after an OAuth2 login is completed.
     *
     * @param client an authenticated client to perform API operations on behalf of the user
     * @param req a reactor-netty HTTP request accessors
     * @param res a reactor-netty HTTP response accessors
     * @return the response sent to the user, typically derived from one of the {@code send*} methods in
     * {@link HttpServerResponse}
     */",discord4j.oauth2
"@Nonnull
    @Unmodifiable
    public List<Object> getOptions(@Nonnull AuditLogOption... options)
    {
        Checks.notNull(options, ""Options"");
        List<Object> items = new ArrayList<>(options.length);
        for (AuditLogOption option : options)
        {
            Object obj = getOption(option);
            if (obj != null)
                items.add(obj);
        }
        return Collections.unmodifiableList(items);
    }","/**
     * Constructs a filtered, immutable list of options corresponding to
     * the provided {@link net.dv8tion.jda.api.audit.AuditLogOption AuditLogOptions}.
     * <br>This will exclude options with {@code null} values!
     *
     * @param  options
     *         The not-null {@link net.dv8tion.jda.api.audit.AuditLogOption AuditLogOptions}
     *         which will be used to gather option values via {@link #getOption(AuditLogOption) getOption(AuditLogOption)}!
     *
     * @throws java.lang.IllegalArgumentException
     *         If provided with null options
     *
     * @return Unmodifiable list of representative values
     */",net.dv8tion.jda.api.audit
"Get gseture name
            final String gesture = this.intToStringGestureMapping.get((int) StatUtils.mode(kNearestNeighbor)[0]);","/**
         * Knn algorithm. Take the nearest k vector from our feature vector and return the associated gesture
         *
         */",jestures.core.recognition
"OFF Magicnumber AH DI MI TOCCA
    public static void wrapNodeOnScrollPane(final JFXScrollPane pane, final Node node, final String titleString,
            final String cssId) {
        // list.setMinHeight(1000); //ACTIVATE SCROLL
        final StackPane container = new StackPane(node);
        container.setPadding(new Insets(-1));
        pane.setContent(container);
        final Label title = new Label(titleString);
        pane.getBottomBar().getChildren().add(title);
        title.setStyle(""-fx-text-fill:WHITE; -fx-font-size: 40;"");
        StackPane.setMargin(title, new Insets(0, 0, 0, 80));
        StackPane.setAlignment(title, Pos.CENTER_LEFT);
        pane.getMainHeader().setId(cssId);

        // CHECKSTYLE:ON Magicnumber
    }","/**
     * Wrap a {@link JFXListView} on a {@link JFXScrollPane} adding functionality.
     *
     * @param pane
     *            the {@link JFXScrollPane} pane
     * @param node
     *            the {@link Node}
     * @param titleString
     *            the {@link String} title
     * @param cssId
     *            the cssId
     */",jestures.core.view.utils
"@Nonnull
    @CheckReturnValue
    ChannelAction<? extends ICopyableChannel> createCopy();","/**
     * Creates a copy of the specified {@link GuildChannel GuildChannel}.
     *
     * <p>This copies the following elements:
     * <ol>
     *     <li>Name</li>
     *     <li>Parent Category (if present)</li>
     *     <li>Voice Elements (Bitrate, Userlimit)</li>
     *     <li>Text Elements (Topic, NSFW, Slowmode)</li>
     *     <li>All permission overrides for Members/Roles</li>
     * </ol>
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
     * </ul>
     *
     * @throws net.dv8tion.jda.api.exceptions.PermissionException
     *         If the currently logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission
     *
     * @return A specific {@link ChannelAction ChannelAction}
     *         <br>This action allows to set fields for the new GuildChannel before creating it!
     */",net.dv8tion.jda.api.entities.channel.attribute
"public static GetAutoModRuleByIdAction getAutoModRuleById(long guildId, long autoModRuleId) {
        return new GetAutoModRuleByIdAction(guildId, autoModRuleId);
    }","/**
     * Creates an action to retrieve data for the automod rule corresponding to the given guild ID and automod rule ID.
     *
     * @param guildId the guild ID
     * @param autoModRuleId the automod rule ID
     * @return a new {@link GetAutoModRuleByIdAction}
     */",discord4j.common.store.action.read
"@Nonnull
    @CheckReturnValue
    CustomEmojiManager getManager();","/**
     * The {@link CustomEmojiManager Manager} for this emoji, used to modify
     * properties of the emoji like name and role restrictions.
     * <br>You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_GUILD_EXPRESSIONS Permission.MANAGE_GUILD_EXPRESSIONS}
     *
     * @return The CustomEmojiManager for this emoji
     */",net.dv8tion.jda.api.entities.emoji
"public Channel.Type getType() {
        return Channel.Type.of(data.type());
    }","/**
     * Gets the type of the channel.
     *
     * @return The type of the channel.
     */",discord4j.core.object.command
"public int getGuildUnavailableCount()
    {
        return unavailableGuilds;
    }","/**
     * Number of guilds currently not available to this session
     * <br>Discord failed to connect these guilds to our gateway and we had to discard them for now.
     * These might become available again later and will then fire a {@link net.dv8tion.jda.api.events.guild.GuildReadyEvent GuildReadyEvent}.
     *
     * @return Number of currently unavailable guilds
     */",net.dv8tion.jda.api.events.session
"@Nonnull
    public static CommandData user(@Nonnull String name)
    {
        return new CommandDataImpl(Command.Type.USER, name);
    }","/**
     * Create a user context menu command builder.
     *
     * @param  name
     *         The command name, 1-32 characters
     *
     * @throws IllegalArgumentException
     *         If the name is not between 1-32 characters long
     *
     * @return {@link CommandData}
     */",net.dv8tion.jda.api.interactions.commands.build
"@Nullable
    public ImageProxy getNewSplash()
    {
        final String newSplashUrl = getNewSplashUrl();
        return newSplashUrl == null ? null : new ImageProxy(newSplashUrl);
    }","/**
     * Returns an {@link ImageProxy} for this guild's new splash image.
     *
     * @return Possibly-null {@link ImageProxy} of this guild's new splash image
     *
     * @see    #getNewSplashUrl()
     */",net.dv8tion.jda.api.events.guild.update
"public Store getStore() {
        return store;
    }","/**
     * Returns the {@link Store} used to cache data during gateway sessions.
     *
     * @return the {@link Store} instance
     */",discord4j.core
"public Mono<Message> editFollowup(final Snowflake messageId, InteractionReplyEditSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(() -> {
                    InteractionReplyEditSpec actualSpec = getClient().getRestClient().getRestResources()
                            .getAllowedMentions()
                            .filter(allowedMentions -> !spec.isAllowedMentionsPresent())
                            .map(spec::withAllowedMentionsOrNull)
                            .orElse(spec);
                    return getInteractionResponse().editFollowupMessage(messageId.asLong(), actualSpec.asRequest());
                })
                .map(data -> new Message(getClient(), data));
    }","/**
     * Edits a follow-up message to this interaction.
     *
     * @param messageId the follow-up message ID to edit
     * @param spec an immutable object that specifies how to build the edited follow-up message
     * @return a {@link Mono} where, upon successful completion, emits the updated follow-up message. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.event.domain.interaction
"@Nonnull
    StageInstance getStageInstance();","/**
     * The associated {@link StageInstance}
     *
     * @return The {@link StageInstance}
     */",net.dv8tion.jda.api.managers
"public Mono<User> getOwner() {
        return gateway.getUserById(getOwnerId());
    }","/**
     * Requests to retrieve the current team owner.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link User} associated with the current
     * team owner. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity
"@Nonnull
    static CustomKeywordTriggerConfig keywordFilter(@Nonnull String... keywords)
    {
        return new CustomKeywordTriggerConfig().addKeywords(keywords);
    }","/**
     * Trigger on messages containing certain keywords or regex patterns.
     * <br>Keywords are matched case-insensitively, and may also contain whitespace.
     *
     * <p>You can use wildcards at the keyword boundaries to extend the matches:
     * <br>{@code ""foo*""} can match {@code ""foo""}, {@code ""foobar""}, {@code ""foo-bar""}, etc.
     * <br>{@code ""*foo*""} can match {@code ""foo""}, {@code ""foobar""}, {@code ""barfoo""}, etc.
     * <br>{@code ""*foo""} can match {@code ""foo""}, {@code ""barfoo""}, {@code ""bar-foo""}, etc.
     *
     * <p>You can also use regex patterns using {@link #patternFilter(String...)} or {@link CustomKeywordTriggerConfig#addPatterns(String...)}.
     *
     * @param  keywords
     *         The keywords to match (case-insensitive)
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any of the keywords are empty, blank, or null</li>
     *             <li>If more than {@value AutoModRule#MAX_KEYWORD_AMOUNT} keywords are added</li>
     *             <li>If any of the keywords is longer than {@value AutoModRule#MAX_KEYWORD_LENGTH} characters</li>
     *         </ul>
     *
     * @return {@link CustomKeywordTriggerConfig}
     */",net.dv8tion.jda.api.entities.automod.build
"public UserDataImpl(final String name) {
        this.userName = name;
        this.gestureLength = UserDataImpl.DEFAULT_GESTURE_LENGTH;
        this.recognitionSettings = new RecognitionSettingsImpl(UserDataImpl.DEFAULT_UPDATE, UserDataImpl.DEFAULT_RADIUS,
                UserDataImpl.DEFAULT_MIN_TRESHOLD, UserDataImpl.DEFAULT_MAX_TRESHOLD, UserDataImpl.DEFAULT_TIME_SEP,
                UserDataImpl.DEFAULT_MATCH);
        this.gestures = new HashMap<>();
        UserDataImpl.LOG.getClass();
    }","/**
     * The constructor for the {@link UserDataImpl} class.
     *
     * @param name
     *            the String username
     */",jestures.core.recognition.gesturedata
"@Nonnull
    ConnectionStatus getConnectionStatus();","/**
     * The current {@link net.dv8tion.jda.api.audio.hooks.ConnectionStatus ConnectionStatus}.
     * <br>This status indicates represents the connection status of an audio connection.
     *
     * @return The current {@link net.dv8tion.jda.api.audio.hooks.ConnectionStatus ConnectionStatus}.
     */",net.dv8tion.jda.api.managers
"public static GetExactMembersInGuildAction getExactMembersInGuild(long guildId) {
        return new GetExactMembersInGuildAction(guildId);
    }","/**
     * Creates an action to retrieve data for all members for the given guild ID. If some members are not present in
     * the store and thus is not able to return the full member list of the guild, executing this action will error
     * with {@link ExactResultNotAvailableException}.
     *
     * @param guildId the guild ID
     * @return a new {@link GetExactMembersInGuildAction}
     */",discord4j.common.store.action.read
"@Nonnull
    RoleManager getManager();","/**
     * The {@link RoleManager RoleManager} for this Role.
     * In the RoleManager, you can modify all its values.
     * <br>You modify multiple fields in one request by chaining setters before calling {@link net.dv8tion.jda.api.requests.RestAction#queue() RestAction.queue()}.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#MANAGE_ROLES Permission.MANAGE_ROLES}
     * @throws net.dv8tion.jda.api.exceptions.HierarchyException
     *         If the currently logged in account does not have the required position to modify this role
     *
     * @return The RoleManager of this Role
     */",net.dv8tion.jda.api.entities
"public Mono<GuildUpdateData> getData() {
        return getData(true);
    }","/**
     * Retrieve this guild's data upon subscription.
     *
     * @return a {@link Mono} where, upon successful completion, emits the {@link GuildUpdateData} belonging to this
     * entity. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
default void handleCombinedAudio(@Nonnull CombinedAudio combinedAudio) {},"/**
     * If {@link #canReceiveCombined()} returns true, JDA will provide a {@link net.dv8tion.jda.api.audio.CombinedAudio CombinedAudio}
     * object to this method <b>every 20 milliseconds</b>. The data provided by CombinedAudio is all audio that occurred
     * during the 20 millisecond period mixed together into a single 20 millisecond packet. If no users spoke, this method
     * will still be provided with a CombinedAudio object containing 20 milliseconds of silence and
     * {@link CombinedAudio#getUsers()}'s list will be empty.
     * <p>
     * The main use of this method is if you are wanting to record audio. Because it automatically combines audio and
     * maintains timeline (no gaps in audio due to silence) it is an incredible resource for audio recording.
     * <p>
     * If you are wanting to do audio processing (voice recognition) or you only want to deal with a single user's audio,
     * please consider {@link #handleUserAudio(UserAudio)}.
     * <p>
     * Output audio format: 48KHz 16bit stereo signed BigEndian PCM
     * <br>and is defined by: {@link net.dv8tion.jda.api.audio.AudioReceiveHandler#OUTPUT_FORMAT AudioRecieveHandler.OUTPUT_FORMAT}
     *
     * @param  combinedAudio
     *         The combined audio data.
     */",net.dv8tion.jda.api.audio
public abstract void onLevelUp(Faction faction);,"/**
     * Method called on level up.
     */",com.massivecraft.factions.addon.upgradeaddon
boolean canInteract(@Nonnull Role role);,"/**
     * Whether this Role can interact with the specified Role.
     * (move/manage/etc.)
     *
     * @param  role
     *         The not-null role to compare to
     *
     * @throws IllegalArgumentException
     *         if the provided Role is null or not from the same {@link net.dv8tion.jda.api.entities.Guild Guild}
     *
     * @return True, if this role can interact with the specified role
     */",net.dv8tion.jda.api.entities
"@Nonnull
    public static String getDateTimeString(@Nonnull OffsetDateTime time)
    {
        return time.format(dtFormatter);
    }","/**
     * Returns a prettier String-representation of a OffsetDateTime object
     *
     * @param  time
     *         The OffsetDateTime object to format
     *
     * @return The String of the formatted OffsetDateTime
     */",net.dv8tion.jda.api.utils
"@Nonnull
        public Route getBaseRoute()
        {
            return baseRoute;
        }","/**
         * The route template with the original placeholders.
         *
         * @return The route template with the original placeholders
         */",net.dv8tion.jda.api.requests
"@Nonnull
    @Unmodifiable
    public List<TemplateChannel.PermissionOverride> getPermissionOverrides()
    {
        return this.permissionOverrides;
    }","/**
     * Gets all of the {@link net.dv8tion.jda.api.entities.templates.TemplateChannel.PermissionOverride PermissionOverrides} that are part
     * of this {@link net.dv8tion.jda.api.entities.templates.TemplateChannel TemplateChannel}.
     * <br><b>This will only contain {@link net.dv8tion.jda.api.entities.templates.TemplateRole Role} overrides.</b>
     *
     * @return Immutable list of all {@link net.dv8tion.jda.api.entities.templates.TemplateChannel.PermissionOverride PermissionOverrides}
     *         for this {@link net.dv8tion.jda.api.entities.templates.TemplateChannel TemplateChannel}.
     */",net.dv8tion.jda.api.entities.templates
"public Mono<Member> getMember() {
        return voiceStateData.member().toOptional()
                .map(data -> Mono.just(new Member(gateway, data, voiceStateData.guildId().get().asLong())))
                .orElse(gateway.getMemberById(Snowflake.of(voiceStateData.guildId().get()),
                        Snowflake.of(voiceStateData.userId())));
    }","/**
     * Get the requesting member.
     *
     * @return A {@link Mono} where, upon successful completion, emits the
     *         {@link Member} who made this request
     */",discord4j.core.event.domain
"void notifyOnFrameChange(int frame, Queue<Vector2D> featureVector, Vector2D derivative, Vector2D distanceVector);","/**
     * Notify the {@link TrackerImpl} when a frame changes.
     *
     * @param frame
     *            the frame
     * @param featureVector
     *            the actual feature vector
     * @param derivative
     *            the derivative vector
     * @param distanceVector
     *            the distance vector from starting frame
     */",jestures.core.tracking
"Do not chunk any guilds (lazy loading) */
    ChunkingFilter NONE = (x) -> false;

    /**
     * Decide whether the specified guild should chunk members.
     *
     * @param  guildId
     *         The guild id
     *
     * @return True, if this guild should chunk
     */
    boolean filter(long guildId);",/** Chunk all guilds */,net.dv8tion.jda.api.utils
"public DiscordWebRequest body(Object body) {
        this.body = body;
        return this;
    }","/**
     * Set the given synchronous {@link java.lang.Object} as the body for the request.
     *
     * @param body the object to set as request body
     * @return this request
     */",discord4j.rest.request
"@Nonnull
    ScheduledEventAction setEndTime(@Nullable TemporalAccessor endTime);","/**
     * Sets the time that the new {@link ScheduledEvent} will end at.
     * Events of {@link ScheduledEvent.Type#EXTERNAL Type.EXTERNAL} will automatically
     * end at this time, and events of {@link ScheduledEvent.Type#STAGE_INSTANCE Type.STAGE_INSTANCE}
     * and {@link ScheduledEvent.Type#VOICE Type.VOICE} will end a few minutes after the last
     * user has left the channel.
     * <p><b>Note:</b> Setting an end time is only possible for events of {@link ScheduledEvent.Type#EXTERNAL Type.EXTERNAL}.
     *
     * @param  endTime
     *         The time that the new {@link ScheduledEvent} is set to end at
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided end time is chronologically set before the start time
     *
     * @return The current ScheduledEventAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    @CheckReturnValue
    default WebhookMessageEditAction<Message> editOriginal(@Nonnull String content)
    {
        return editMessageById(""@original"", content);
    }","/**
     * Edit the source message sent by this interaction.
     * <br>For {@link IMessageEditCallback#editComponents(Collection)} and {@link IMessageEditCallback#deferEdit()} this will be the message the components are attached to.
     * For {@link IReplyCallback#deferReply()} and {@link IReplyCallback#reply(String)} this will be the reply message instead.
     *
     * <p>This method will be delayed until the interaction is acknowledged.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_WEBHOOK UNKNOWN_WEBHOOK}
     *     <br>The webhook is no longer available, either it was deleted or in case of interactions it expired.</li>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *     <br>The message for that id does not exist</li>
     * </ul>
     *
     * @param  content
     *         The new message content to use
     *
     * @throws IllegalArgumentException
     *         If the provided content is null, empty, or longer than {@link Message#MAX_CONTENT_LENGTH}
     *
     * @return {@link WebhookMessageEditAction}
     */",net.dv8tion.jda.api.interactions
"@Nonnull
    @CheckReturnValue
    default M sync()
    {
        if (!(getChannel() instanceof ICategorizableChannel))
            throw new IllegalStateException(""sync() requires that the channel be categorizable as it syncs the channel to the parent category."");

        ICategorizableChannel categorizableChannel = (ICategorizableChannel) getChannel();
        if (categorizableChannel.getParentCategory() == null)
            throw new IllegalStateException(""sync() requires a parent category"");
        return sync(categorizableChannel.getParentCategory());
    }","/**
     * Syncs all {@link PermissionOverride PermissionOverrides} of this GuildChannel with
     * its parent ({@link Category Category}).
     *
     * <p>After this operation, all {@link PermissionOverride PermissionOverrides}
     * will be exactly the same as the ones from the parent.
     * <br><b>That means that all current PermissionOverrides are lost!</b>
     *
     * <p>This behaves as if calling {@link #sync(IPermissionContainer)} with this GuildChannel's {@link ICategorizableChannel#getParentCategory()} Parent}.
     *
     * @throws  IllegalStateException
     *          If this GuildChannel has no parent
     * @throws  net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *          If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *          in this channel or {@link IPermissionHolder#canSync(IPermissionContainer, IPermissionContainer)} is false for the self member.
     *
     * @return  ChannelManager for chaining convenience
     *
     * @see     <a href=""https://discord.com/developers/docs/topics/permissions#permission-syncing"" target=""_blank"">Discord Documentation - Permission Syncing</a>
     */",net.dv8tion.jda.api.managers.channel.attribute
"public Mono<MessageData> publish() {
        return restClient.getChannelService().publishMessage(channelId, id);
    }","/**
     * Requests to publish (crosspost) this message if the {@code channel} is of type 'news'.
     * Requires 'SEND_MESSAGES' permission if the current user sent the message, or additionally the 'MANAGE_MESSAGES' permission, for all other messages, to be present for the current user.
     *
     * @return A {@link Mono} where, upon successful completion, emits the published {@link MessageData}
     * (crossposted) in the guilds. If an error is received, it is emitted through the {@code Mono}.
     * @see <a href=""https://discord.com/developers/docs/resources/channel#crosspost-message"">Crosspost Message</a>
     */",discord4j.rest.entity
Flux<RoleData> getRoles();,"/**
     * Retrieves data for all roles present in the store.
     *
     * @return A {@link Flux} emitting the roles, or empty if none is present
     */",discord4j.common.store.api.layout
"public RecognitionSettingsImpl(final UpdateRate updateRate, final double dtwRadius, final int minDTWThreshold,
            final int maxDTWTreshold, final int minTimeSeparation, final int matchNumber) {
        this.updateRate = updateRate;
        this.dtwRadius = dtwRadius;
        this.minDTWThreashold = minDTWThreshold;
        this.maxDTWThreashold = maxDTWTreshold;
        this.minTimeSeparation = minTimeSeparation;
        this.matchNumber = matchNumber;
    }","/**
     *
     * The constructor for the class.
     *
     * @param updateRate
     *            the update rate
     * @param dtwRadius
     *            the radius
     * @param minDTWThreshold
     *            the min threshold
     * @param maxDTWTreshold
     *            the max threshold
     * @param minTimeSeparation
     *            the min time separation
     * @param matchNumber
     *            the match number
     */",jestures.core.recognition.gesturedata
"@Nonnull
    ChannelCacheView<C> getChannelCache();","/**
     * Unified cache of all channels associated with this shard or guild.
     *
     * <p>This {@link ChannelCacheView} stores all channels in individually typed maps based on {@link ChannelType}.
     * You can use {@link ChannelCacheView#getElementById(ChannelType, long)} or {@link ChannelCacheView#ofType(Class)} to filter
     * out more specific types.
     *
     * @return {@link ChannelCacheView}
     */",net.dv8tion.jda.api.entities.channel.attribute
"public AttachmentProxy(@Nonnull String url)
    {
        super(url);
    }","/**
     * Constructs a new {@link AttachmentProxy} for the provided URL.
     *
     * @param  url
     *         The URL to download the attachment from
     *
     * @throws IllegalArgumentException
     *         If the provided URL is null
     */",net.dv8tion.jda.api.utils
"public static final Route GUILD_SCHEDULED_EVENT_MODIFY = Route.patch(""/guilds/{guild.id}/scheduled-events/{event.id}"");","/**
     * Modifies a scheduled event for the given guild. Returns the modified scheduled event object on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event"">
     * https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event</a>
     */",discord4j.rest.route
"@Nonnull
    public abstract T build();","/**
     * Builds a validated instance of this builder's state, which can then be used for requests.
     *
     * @throws IllegalStateException
     *         For {@link MessageCreateBuilder}
     *         <ul>
     *             <li>If the builder is {@link #isEmpty() empty}</li>
     *             <li>If the content set is longer than {@value Message#MAX_CONTENT_LENGTH}</li>
     *             <li>If more than {@value Message#MAX_EMBED_COUNT} embeds are set</li>
     *             <li>If more than {@value Message#MAX_COMPONENT_COUNT} component layouts are set</li>
     *         </ul>
     *         For {@link MessageEditBuilder}
     *         <ul>
     *             <li>If the content set is longer than {@value Message#MAX_CONTENT_LENGTH}</li>
     *             <li>If more than {@value Message#MAX_EMBED_COUNT} embeds are set</li>
     *             <li>If more than {@value Message#MAX_COMPONENT_COUNT} component layouts are set</li>
     *         </ul>
     *
     * @return The validated data instance
     */",net.dv8tion.jda.api.utils.messages
"public Publisher<?> onStoreChannelDelete(StoreChannelDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild store channel is deleted.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
        public Builder setMaxLength(int maxLength)
        {
            if (maxLength != -1)
            {
                Checks.check(maxLength >= 1, ""Maximum length cannot be smaller than 1 character!"");
                Checks.check(maxLength <= MAX_VALUE_LENGTH, ""Maximum length cannot be longer than %d characters!"", MAX_VALUE_LENGTH);
            }

            this.maxLength = maxLength;
            return this;
        }","/**
         * Sets the maximum length of this input field. Default is -1 (No maximum length).
         *
         * <p><b>This has to be between 1 and {@value #MAX_VALUE_LENGTH}, or -1 for no maximum length</b>
         *
         * @param  maxLength 
         *         The maximum amount of characters that need to be written, or -1
         *
         * @throws IllegalArgumentException
         *         If maxLength is not -1 and is smaller than 1 or greater than {@value #MAX_VALUE_LENGTH}
         *
         * @return The same builder instance for chaining
         */",net.dv8tion.jda.api.interactions.components.text
"public static CountInGuildAction countChannelsInGuild(long guildId) {
        return new CountInGuildAction(InGuildEntity.CHANNELS, guildId);
    }","/**
     * Creates an action to count the number of channels present in a store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return a new {@link CountInGuildAction}
     */",discord4j.common.store.action.read
"public static DiscordOAuth2Client createFromCode(RestClient restClient, AuthorizationCodeGrantRequest request) {
        return new DiscordOAuth2Client(restClient, request.clientId(), request.clientSecret(),
                service -> service.exchangeAuthorizationCode(request).map(AccessToken::new));
    }","/**
     * Create an OAuth2 client by completing an authorization code grant flow. This is useful if you have a custom
     * HTTP server that receives the {@code code} parameter. Build a
     * {@link AuthorizationCodeGrantRequest} making sure to include the code parameter and the access token with refresh
     * capabilities will be stored once the first request is made using one of the API methods in this class or
     * {@link #withAuthorizedClient(DiscordWebRequest)}.
     * <p>
     * For an example server implementation, check {@link DiscordOAuth2Server}, which uses this method.
     *
     * @param restClient a Discord REST API client for performing requests
     * @param request an object with all parameters required to complete an authorization code grant request
     * @return a client that can work with a valid user token to perform API requests
     */",discord4j.oauth2
"@Nonnull
    public List<ForumTag> getRemovedTags()
    {
        List<ForumTag> oldTags = new ArrayList<>(getOldTags());
        oldTags.removeAll(getNewTags());
        return oldTags;
    }","/**
     * The removed tags.
     *
     * <p>This requires {@link net.dv8tion.jda.api.utils.cache.CacheFlag#FORUM_TAGS CacheFlag.FORUM_TAGS} to be enabled.
     *
     * @return The tags that were removed from the post
     */",net.dv8tion.jda.api.events.channel.update
void setReceivingHandler(@Nullable AudioReceiveHandler handler);,"/**
     * Sets the {@link net.dv8tion.jda.api.audio.AudioReceiveHandler AudioReceiveHandler}
     * that the manager will use to process audio data received from an audio connection.
     *
     * <p>The handler provided here will persist between audio connection connect and disconnects.
     * Furthermore, you don't need to have an audio connection to set a handler.
     * When JDA sets up a new audio connection it will use the handler provided here.
     * <br>Setting this to null will remove the audio handler.
     *
     * @param handler
     *        The {@link net.dv8tion.jda.api.audio.AudioReceiveHandler AudioReceiveHandler} used to process
     *        received audio data.
     */",net.dv8tion.jda.api.managers
"@Nonnull
    default OffsetDateTime getTimeCreated()
    {
        return TimeUtil.getTimeCreated(getIdLong());
    }","/**
     * The time this entity was created. Calculated through the Snowflake in {@link #getIdLong}.
     *
     * @return OffsetDateTime - Time this entity was created at.
     *
     * @see    TimeUtil#getTimeCreated(long)
     */",net.dv8tion.jda.api.entities
"@Nonnull
    default List<Member> getElementsById(@Nonnull String id)
    {
        return getElementsById(MiscUtil.parseSnowflake(id));
    }","/**
     * Retrieves all member represented by the provided ID.
     *
     * @param  id
     *         The ID of the members
     *
     * @throws java.lang.NumberFormatException
     *         If the provided String is {@code null} or
     *         cannot be resolved to an unsigned long id
     *
     * @return Possibly-empty unmodifiable list of member for the specified ID
     */",net.dv8tion.jda.api.utils.cache
"public String getDisplayName() {
        return getNickname().orElse(user.username());
    }","/**
     * Gets the name that is displayed in client.
     *
     * @return The name that is displayed in client.
     */",discord4j.core.object.command
"default Mono<Category> getCategory() {
        return Mono.justOrEmpty(getCategoryId())
                .flatMap(getClient()::getChannelById)
                .cast(Category.class);
    }","/**
     * Requests to retrieve the category for this channel, if present.
     *
     * @return A {@link Mono} where, upon successful completion, emits the {@link Category category} this channel, if
     * present. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    @CheckReturnValue
    ChannelAction<T> setBitrate(@Nullable Integer bitrate);","/**
     * Sets the bitrate for the new VoiceChannel
     *
     * @param  bitrate
     *         The bitrate for the new VoiceChannel in {@code bps} (limits 8000 {@literal <}= bitrate {@literal <}= {@link Guild#getMaxBitrate()})
     *         or {@code null} to use the default 64kbps.
     *
     * @throws UnsupportedOperationException
     *         If this ChannelAction is not for a VoiceChannel
     * @throws IllegalArgumentException
     *         If the provided bitrate is less than 8000 or greater than {@link net.dv8tion.jda.api.entities.Guild#getMaxBitrate()}
     *
     * @return The current ChannelAction, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"public ActionRow withAddedComponent(ActionComponent component) {
        List<MessageComponent> components = new ArrayList<>(getChildren());
        components.add(component);
        return new ActionRow(ComponentData.builder()
                .type(Type.ACTION_ROW.getValue())
                .components(components.stream().map(MessageComponent::getData).collect(Collectors.toList()))
                .build());
    }","/**
     * Create a new {@link ActionRow} instance from {@code this}, adding a given component.
     *
     * @param component the child component to be added
     * @return an {@code ActionRow} containing the existing and added components
     */",discord4j.core.object.component
"@Nonnull
    @CheckReturnValue
    RestAction<Void> clearReactionsById(@Nonnull String messageId);","/**
     * Attempts to remove all reactions from a message with the specified {@code messageId} in this TextChannel
     * <br>This is useful for moderator commands that wish to remove all reactions at once from a specific message.
     *
     * <p>The following {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} are possible:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The clear-reactions request was attempted after the account lost access to the {@link TextChannel TextChannel}
     *         due to {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL Permission.VIEW_CHANNEL} being revoked, or the
     *         account lost access to the {@link net.dv8tion.jda.api.entities.Guild Guild}
     *         typically due to being kicked or removed.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The clear-reactions request was attempted after the account lost {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE}
     *         in the {@link TextChannel TextChannel} when adding the reaction.</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_MESSAGE UNKNOWN_MESSAGE}
     *         The clear-reactions request was attempted after the Message had been deleted.</li>
     * </ul>
     *
     * @param  messageId
     *         The not-empty valid message id
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have
     *         {@link net.dv8tion.jda.api.Permission#MESSAGE_MANAGE Permission.MESSAGE_MANAGE} in this channel.
     * @throws java.lang.IllegalArgumentException
     *         If the provided {@code id} is {@code null} or empty.
     *
     * @return {@link net.dv8tion.jda.api.requests.restaction.AuditableRestAction AuditableRestAction}
     */",net.dv8tion.jda.api.entities.channel.middleman
IntentSet intents = possibleIntents.get();,"/**
     * Throws if the request is invalid given the current intents.
     *
     * @param request The request to validate
     * @param possibleIntents The current intents
     * @see
     * <a href=""https://discord.com/developers/docs/topics/gateway#request-guild-members"">https://discord.com/developers/docs/topics/gateway#request-guild-members</a>
     */",discord4j.core.util
"public Publisher<?> onVoiceChannelDelete(VoiceChannelDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild voice channel is deleted.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    default EnumSet<Permission> getDeniedPermissions()
    {
        return Permission.getPermissions(getDenied());
    }","/**
     * Set of {@link net.dv8tion.jda.api.Permission Permissions}
     * that would be <b>denied</b> by the PermissionOverride that is created by this action.
     * <br><u>Changes to the returned set do not affect this entity directly.</u>
     *
     * @return set of denied {@link net.dv8tion.jda.api.Permission Permissions}
     */",net.dv8tion.jda.api.requests.restaction
"public static final Route MESSAGES_PINNED_DELETE = Route.delete(""/channels/{channel.id}/pins/{message.id}"");","/**
     * Delete a pinned message in a channel. Requires the 'MANAGE_MESSAGES' permission. Returns a 204 empty response on
     * success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#delete-pinned-channel-message"">
     * https://discord.com/developers/docs/resources/channel#delete-pinned-channel-message</a>
     */",discord4j.rest.route
"public Optional<Message> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the updated {@link Message}, if present.
     * This may not be available if {@code Messages} are not stored.
     *
     * @return The old version of the updated {@link Message}, if present.
     */",discord4j.core.event.domain.message
"@Nullable
    default NewsChannel getNewsChannelById(@Nonnull String id)
    {
        return (NewsChannel) getChannelCache().getElementById(ChannelType.NEWS, id);
    }","/**
     * Gets a {@link NewsChannel NewsChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link NewsChannel NewsChannel}.
     *
     * @throws java.lang.NumberFormatException
     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
     *
     * @return Possibly-null {@link NewsChannel NewsChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Mono<TemplateData> getTemplate(final String templateCode) {
        return templateService.getTemplate(templateCode);
    }","/**
     * Requests to retrieve an template.
     *
     * @param templateCode The code for the template (e.g. ""hgM48av5Q69A"").
     * @return A {@link Mono} where, upon successful completion, emits the {@link TemplateData} as represented by the
     * supplied template code. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.rest
"@Deprecated
    int getMaxConcurrency();","/**
     * Return the number of shards that can be identified concurrently. Must be 1 unless your application is authorized
     * to use the large bot sharding system.
     *
     * @return a value determining the sharding factor this strategy has
     * @see <a href=""https://discord.com/developers/docs/topics/gateway#sharding-for-very-large-bots"">
     * Sharding for very large bots</a>
     * @deprecated use {@link #getMaxConcurrency(RestClient)} instead
     */",discord4j.core.shard
"@Nonnull
        public EnumSet<Permission> getAllowed()
        {
            return Permission.getPermissions(allow);
        }","/**
         * EnumSet of all {@link net.dv8tion.jda.api.Permission Permissions} that are specifically allowed by this override.
         * <br><u>Changes to the returned set do not affect this entity directly.</u>
         *
         * @return Possibly-empty set of allowed {@link net.dv8tion.jda.api.Permission Permissions}.
         */",net.dv8tion.jda.api.entities.templates
"public static boolean checkStarted() {
        return TrackerImpl.started;

    }","/**
     * Check if the sensor is started statically.
     *
     * @return <code>true</code> if the sensor is started
     */",jestures.core.tracking
"public static final Route GUILD_WEBHOOKS_GET = Route.get(""/guilds/{guild.id}/webhooks"");","/**
     * Returns a list of guild webhook objects.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/webhook#get-guild-webhooks"">
     * https://discord.com/developers/docs/resources/webhook#get-guild-webhooks</a>
     */",discord4j.rest.route
"public LegacyMessageEditSpec setAllowedMentions(@Nullable AllowedMentions allowedMentions) {
        this.allowedMentions = Possible.of(Optional.ofNullable(allowedMentions).map(AllowedMentions::toData));
        return this;
    }","/**
     * Sets the new allowed mentions for the edited {@link Message}.
     *
     * @param allowedMentions This message allowed mentions.
     * @return This spec.
     */",discord4j.core.spec.legacy
"Mono<Void> onGuildScheduledEventUserAdd(int shardIndex, GuildScheduledEventUserAdd dispatch);","/**
     * Updates the internal state of the store according to the {@link GuildScheduledEventUserAdd} gateway dispatch.
     * This will typically perform an insert operation on a related {@link java.util.List} handling a relationship
     * between a {@link GuildScheduledEventData} and the provided {@link GuildScheduledEventUserData}.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a {@link Mono} completing when the operation is done
     */",discord4j.common.store.api.layout
"public Optional<User> getUserById(Snowflake userId) {
        return users.stream()
                .filter(user -> user.getId().equals(userId))
                .findFirst();
    }","/**
     * Gets a user involved in the entries of this portion of the audit log by ID.
     *
     * @param userId The ID of the user.
     * @return The user with the given ID, if present.
     */",discord4j.core.object.audit
"@Nonnull
    @CheckReturnValue
    default InviteAction setTargetStream(@Nonnull final String userId)
    {
        return setTargetStream(MiscUtil.parseSnowflake(userId));
    }","/**
     * Sets the user whose stream to display for this invite.
     * <br>The user must be streaming in the same channel.
     * The invite will have the {@link Invite.TargetType#STREAM} target.
     *
     * @param userId
     *        The id of the user whose stream to target.
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided ID is null
     * @throws java.lang.NumberFormatException
     *         If the provided ID is not a snowflake
     *
     * @return The current InviteAction for chaining.
     */",net.dv8tion.jda.api.requests.restaction
"public Optional<Guild> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the {@link Guild} involved in this event, if present.
     * This may not be available if {@code Guild} are not stored.
     *
     * @return The old {@link Guild} involved in this event, if present.
     */",discord4j.core.event.domain.guild
"@Nonnull
    List<Member> getMembers();","/**
     * Gets a list of online members in the guild
     *
     * @throws IllegalStateException
     *         If the widget is not {@link #isAvailable() available}
     *
     * @return the list of members
     */",net.dv8tion.jda.api.entities
long getConnectTimeout();,"/**
     * The currently set timeout value, in <b>milliseconds</b>, used when waiting for an audio connection to be established.
     *
     * @return The currently set timeout.
     */",net.dv8tion.jda.api.managers
"public LegacyWebhookEditSpec setAvatar(@Nullable Image avatar) {
        this.avatar = avatar == null ? Possible.absent() : Possible.of(avatar.getDataUri());
        return this;
    }","/**
     * Sets the image of the modified {@link Webhook}.
     *
     * @param avatar The webhook image.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static VoiceConnectionFactory defaultVoiceConnectionFactory() {
        return new DefaultVoiceConnectionFactory();
    }","/**
     * Create a {@link VoiceConnectionFactory} with reconnecting capabilities.
     *
     * @return a default {@link VoiceConnectionFactory}
     */",discord4j.core.shard
"@Nonnull
    @CheckReturnValue
    ThreadChannelPaginationAction retrieveArchivedPublicThreadChannels();","/**
     * Retrieves the archived public {@link ThreadChannel ThreadChannels} for this channel.
     * <br>This will iterate over all previously opened public threads, that have been archived.
     *
     * <p>You can use {@link #retrieveArchivedPrivateThreadChannels()}, to get all <em>private</em> archived threads.
     *
     * <p>These threads can also represent posts in {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels}.
     *
     * @throws InsufficientPermissionException
     *         If the bot does not have {@link net.dv8tion.jda.api.Permission#MESSAGE_HISTORY Permission.MESSAGE_HISTORY} in this channel
     *
     * @return {@link ThreadChannelPaginationAction} to iterate over all public archived ThreadChannels
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    @CheckReturnValue
    CommandEditAction addOptions(@Nonnull OptionData... options);","/**
     * Adds up to 25 options to this command.
     * <br>This will replace any existing options/subcommands/groups on the command.
     *
     * <p>Required options must be added before non-required options!
     *
     * @param  options
     *         The {@link OptionData Options} to add
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If you try to mix subcommands/options/groups in one command.</li>
     *             <li>If the option type is {@link OptionType#SUB_COMMAND} or {@link OptionType#SUB_COMMAND_GROUP}.</li>
     *             <li>If this option is required and you already added a non-required option.</li>
     *             <li>If more than 25 options are provided.</li>
     *             <li>If null is provided</li>
     *         </ul>
     *
     * @return The CommandEditAction instance, for chaining
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    public TemplateChannel getSystemChannel()
    {
        return this.systemChannel;
    }","/**
     * Provides the {@link net.dv8tion.jda.api.entities.templates.TemplateChannel TemplateChannel} that has been set as the channel
     * which newly joined {@link net.dv8tion.jda.api.entities.Member Members} will be announced in.
     * <br>If no channel has been set as the system channel, this returns {@code null}.
     *
     * @return Possibly-null {@link net.dv8tion.jda.api.entities.templates.TemplateChannel TemplateChannel} that is the system Channel.
     */",net.dv8tion.jda.api.entities.templates
"OFF AH DI MI TOCCA FARE COSI
    public static void addVectorToListView(final JFXListView<BorderPane> listView, final Image imageProfile,
            final int index) {
        final BorderPane pane = new BorderPane();
        final Label label = new Label("" "" + index);
        final ImageView imageView = new ImageView(imageProfile);
        JFXDepthManager.setDepth(pane, 1);
        label.setId(""player-listView-label"");
        pane.setId(""player-listView-border"");
        imageView.setFitHeight(150);
        imageView.setFitWidth(200);
        BorderPane.setAlignment(imageView, Pos.CENTER);
        BorderPane.setAlignment(label, Pos.CENTER_LEFT);
        pane.setCenter(imageView);
        pane.setLeft(label);
        listView.getItems().add(pane);
        listView.scrollTo(index);
    }","/**
     * Create a {@link JFXListView} for the templates.
     *
     * @param listView
     *            the {@link JFXListView}
     * @param imageProfile
     *            the {@link Image} profile
     * @param index
     *            the {@link Integer} index
     */",jestures.core.view.utils
"public Publisher<?> onMessageBulkDelete(MessageBulkDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when multiple messages are deleted at once.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public static GetUserByIdAction getUserById(long userId) {
        return new GetUserByIdAction(userId);
    }","/**
     * Creates an action to retrieve data for the user corresponding to the given user ID.
     *
     * @param userId the user ID
     * @return a new {@link GetUserByIdAction}
     */",discord4j.common.store.action.read
"public long getNewPermissionsRaw()
    {
        return newPermissionsRaw;
    }","/**
     * The new permissions
     *
     * @return The new permissions
     */",net.dv8tion.jda.api.events.role.update
"public LegacyWebhookEditWithTokenSpec setName(String name) {
        this.name = Possible.of(name);
        return this;
    }","/**
     * Sets the name of the modified {@link discord4j.core.object.entity.Webhook}.
     *
     * @param name The webhook name.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public static ClientActivity watching(String name) {
        return of(Activity.Type.WATCHING, name, null);
    }","/**
     * Creates a {@link Activity.Type#WATCHING watching} activity.
     *
     * @param name the name of the activity
     * @return a watching activity with the given name
     */",discord4j.core.object.presence
"@Nonnull
    static MentionSpamTriggerConfig mentionSpam(int mentionLimit)
    {
        return new MentionSpamTriggerConfig(mentionLimit);
    }","/**
     * Trigger on mention thresholds in messages.
     *
     * @param  mentionLimit
     *         The maximum number of unique mentions allowed in a message (1-{@value AutoModRule#MAX_MENTION_LIMIT})
     *
     * @throws IllegalArgumentException
     *         If the provided mention limit is not between 1 and {@value AutoModRule#MAX_MENTION_LIMIT}
     *
     * @return {@link MentionSpamTriggerConfig}
     */",net.dv8tion.jda.api.entities.automod.build
"@Nonnull
    static StickerSnowflake fromId(@Nonnull String id)
    {
        return fromId(MiscUtil.parseSnowflake(id));
    }","/**
     * Creates a sticker snowflake instance which only wraps an ID.
     *
     * <p>This is primarily used for message sending purposes.
     *
     * @param  id
     *         The sticker id
     *
     * @throws IllegalArgumentException
     *         If the provided ID is not a valid snowflake
     *
     * @return A sticker snowflake instance
     *
     * @see    JDA#retrieveSticker(StickerSnowflake)
     */",net.dv8tion.jda.api.entities.sticker
"public long getAllowedRaw()
        {
            return allow;
        }","/**
         * This is the raw binary representation (as a base 10 long) of the permissions <b>allowed</b> by this override.
         * <br>The long relates to the offsets used by each {@link net.dv8tion.jda.api.Permission Permission}.
         *
         * @return Never-negative long containing the binary representation of the allowed permissions of this override.
         */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    public String getNewLocation()
    {
        return getNewValue();
    }","/**
     * The new {@link ScheduledEvent#getLocation() location}.
     *
     * @return The new location
     */",net.dv8tion.jda.api.events.guild.scheduledevent.update
"public Instant getCreation() {
        String createdAt = getData().createdAt().toOptional().orElseThrow(IllegalStateException::new);
        return DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(createdAt, Instant::from);
    }","/**
     * Gets when this invite was created.
     *
     * @return When this invite was created.
     */",discord4j.core.object
"public Mono<Void> delete() {
        return restClient.getGuildService().deleteGuild(id);
    }","/**
     * Delete a guild permanently. Requires the {@link Permission#MANAGE_GUILD} permission. Returns empty on success.
     *
     * @return a {@link Mono} where, upon subscription, emits a complete signal on success. If an error is received, it
     * is emitted through the {@code Mono}.
     */",discord4j.rest.entity
long size();,"/**
     * The current size of this cache
     * <br>This is a {@code long} as it may be a projected view of multiple caches
     * (See {@link net.dv8tion.jda.api.utils.cache.CacheView#all(java.util.function.Supplier)})
     *
     * <p>This is more efficient than creating a list or set snapshot first as it checks the size
     * of the internal cache directly.
     *
     * @return The current size of this cache
     */",net.dv8tion.jda.api.utils.cache
"@Nonnull
    @CheckReturnValue
    default R setThread(@Nullable ThreadChannel channel)
    {
        return setThreadId(channel == null ? null : channel.getId());
    }","/**
     * Set the target thread for the webhook message.
     * <br>This allows sending webhook messages in the target thread,
     * however the webhook must be part of the thread parent channel.
     *
     * <p>This cannot be used with {@link net.dv8tion.jda.api.interactions.InteractionHook InteractionHooks}!
     *
     * @param  channel
     *         The target thread channel
     *
     * @throws IllegalStateException
     *         If this is an interaction webhook
     *
     * @return The same message action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"String clean = line.replace(tagReplacer.getTag(), """");","/**
     * Scan a line and parse the fancy variable into a fancy list
     *
     * @param faction for faction (viewers faction)
     * @param fme     for player (viewer)
     * @param line    fancy message prefix
     * @return list of fancy msgs
     */",com.massivecraft.factions.zcore.util
"This method could not be tested due to the lack of a Discord verified application
    public EntitlementListRequestFlux getEntitlements() {
        return EntitlementListRequestFlux.of(this, discordClient);
    }","/**
     * Request to retrieve all the {@link Entitlement} for the current application.
     * The request can be filtered using the ""withXXX"" methods of the returned {@link EntitlementListRequestFlux}.
     *
     * @return A {@link EntitlementListRequestFlux} that emits the {@link Entitlement} for the application with the given ID upon successful
     * completion. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core
"public LegacyGuildCreateSpec setSystemChannelFlags(@Nullable Guild.SystemChannelFlag... flags) {
        if (flags != null) {
            builder.systemChannelFlags(Possible.of(Arrays.stream(flags)
                    .mapToInt(Guild.SystemChannelFlag::getValue)
                    .reduce(0, (left, right) -> left | right)));
        } else {
            builder.systemChannelFlags(Possible.absent());
        }
        return this;
    }","/**
     * Sets the system channel flags for the created {@link Guild}.
     *
     * @param flags The system channel flags.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nullable
    public Consumer<? super Request.Builder> getCustomBuilder()
    {
        return customBuilder;
    }","/**
     * The custom request interceptor.
     *
     * @return The custom interceptor, or null if none is configured
     */",net.dv8tion.jda.api.requests
"public LegacyWebhookExecuteSpec addFileSpoiler(String fileName, InputStream file) {
        return addFile(Attachment.SPOILER_PREFIX + fileName, file);
    }","/**
     * Adds a spoiler file as attachment to the created {@link discord4j.core.object.entity.Message}.
     *
     * @param fileName The filename used in the file being sent.
     * @param file The file contents.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public Mono<GatewayDiscordClient> login() {
        return gateway().login();
    }","/**
     * Login the client to the gateway, using the recommended amount of shards, locally coordinated. The derived
     * {@link GatewayDiscordClient} is capable of managing these shards and providing a single
     * {@link EventDispatcher} to publish Gateway updates and {@link Store} for entity caching.
     * <p>
     * To further configure the Gateway connections, such as initial presence, sharding and caching options, see
     * {@link #gateway()}.
     * <p>
     * <strong>Note:</strong> Starting from v3.1, this method will return a {@link Mono} of a
     * {@link GatewayDiscordClient}, emitting the result once shards have connected. Therefore, <strong>calling
     * {@link Mono#block()} will now return upon connection instead of disconnection.</strong>
     *
     * @return a {@link Mono} for a handle to maintain a group of shards connected to real-time Discord Gateway,
     * emitted once at least one connection has been made. This behavior can be configured through
     * {@code gateway().setAwaitConnections(true)}. If an error is received, it is emitted through the {@link Mono}.
     */",discord4j.core
"public static <T> T ask(String message, Class<T> clazz, Validator<T> validator) {
    Terminal.getInstance().writeLine(message);
    return new Answer<>(clazz, validator).value();
  }","/**
   * Displays a message and return a validated parsed value of the provided type. 
   * The following types are supported: Integer, Double, String, and char[].
   *
   * @param  <T>       the return type
   * @param  message   the message to be displayed
   * @param  clazz     the type to be parsed
   * @param  validator the validator used
   * @return           the parsed value
   * @throws IllegalArgumentException if the provided type is not supported.
   */",io.github.augustoravazoli.termenu.util
"@Nonnull
    @CheckReturnValue
    default MessageEditCallbackAction editComponents(@Nonnull LayoutComponent... components)
    {
        Checks.noneNull(components, ""LayoutComponents"");
        return editComponents(Arrays.asList(components));
    }","/**
     * Acknowledgement of this interaction with a message update.
     * <br>You can use {@link #getHook()} to edit the message further.
     *
     * <p><b>You can only use deferEdit() or editMessage() once per interaction!</b> Use {@link #getHook()} for any additional updates.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     *
     * @param  components
     *         The new message components, such as {@link ActionRow}
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If any of the provided LayoutComponents are null</li>
     *             <li>If any of the provided Components are not compatible with messages</li>
     *             <li>If more than {@value Message#MAX_COMPONENT_COUNT} component layouts are provided</li>
     *         </ul>
     *
     * @return {@link MessageEditCallbackAction} that can be used to further update the message
     *
     * @see    LayoutComponent#isMessageCompatible()
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nonnull
        public Builder addComponents(@Nonnull Collection<? extends LayoutComponent> components)
        {
            Checks.noneNull(components, ""Components"");

            Checks.checkComponents(""Some components are incompatible with Modals"",
                    components,
                    component -> component.getType().isModalCompatible());

            this.components.addAll(components);
            return this;
        }","/**
         * Adds {@link LayoutComponent LayoutComponents} to this modal
         *
         * @param  components
         *         {@link LayoutComponent LayoutComponents} to add to the modal, up to {@value MAX_COMPONENTS} total
         *
         * @throws IllegalArgumentException
         *         <ul>
         *             <li>If any of the provided layouts are null</li>
         *             <li>If any of the provided components are not compatible with Modals</li>
         *         </ul>
         *
         * @return The same builder instance for chaining
         *
         * @see    LayoutComponent#isModalCompatible()
         */",net.dv8tion.jda.api.interactions.modals
"public static final Route REACTION_DELETE_USER = Route.delete(""/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}"");","/**
     * Deletes another user's reaction. This endpoint requires the 'MANAGE_MESSAGES' permission to be present on the
     * current user. Returns a 204 empty response on success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#delete-user-reaction"">
     * https://discord.com/developers/docs/resources/channel#delete-user-reaction</a>
     */",discord4j.rest.route
"public Builder largeThreshold(int largeThreshold) {
            this.largeThreshold = largeThreshold;
            return this;
        }","/**
         * Set the number of members a guild must have to be considered ""large"". Defaults to 250.
         *
         * @param largeThreshold the number of guild members to identify a large guild
         * @return this builder
         */",discord4j.gateway
"@Nonnull
    public CompletableFuture<InputStream> download(int width, int height)
    {
        return download(getUrl(width, height));
    }","/**
     * Retrieves the {@link InputStream} of this attachment at the specified width and height.
     * <br>The attachment, if an image, may be resized at any size, however if the size does not fit the ratio of the image, then it will be cropped as to fit the target size.
     * <br>If the attachment is not an image then the size parameters are ignored and the file is downloaded.
     *
     * @param  width
     *         The width of this image, must be positive
     * @param  height
     *         The height of this image, must be positive
     *
     * @throws IllegalArgumentException
     *         If any of the follow checks are true
     *         <ul>
     *             <li>The requested width is negative or 0</li>
     *             <li>The requested height is negative or 0</li>
     *         </ul>
     *
     * @return {@link CompletableFuture} which holds an {@link InputStream}, the {@link InputStream} must be closed manually.
     */",net.dv8tion.jda.api.utils
"@Deprecated
    public JacksonResources(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }","/**
     * Create with a pre-configured {@link ObjectMapper}. Using this will replace the
     * recommended default and can lead to unexpected behavior and errors.
     *
     * @param objectMapper a pre-configured ObjectMapper to use
     * @deprecated use {@link #createFromObjectMapper(ObjectMapper)} instead, but consider all Discord4J-related
     * transformations are applied on the given {@code ObjectMapper}
     */",discord4j.common
"@Nonnull
    @CheckReturnValue
    default PermissionOverrideAction grant(@Nonnull Collection<Permission> permissions)
    {
        return grant(Permission.getRaw(permissions));
    }","/**
     * Grants the specified permissions.
     * <br>This does not override already granted permissions.
     *
     * @param  permissions
     *         The permissions to grant, in addition to already allowed permissions
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     * @throws IllegalArgumentException
     *         If any provided argument is null
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    public Multimap<String, Object> getQueryParams() {
        return queryParams;
    }","/**
     * Return the query parameters saved in this request, if present.
     *
     * @return a map representing query parameters, or {@code null} if none are defined
     */",discord4j.rest.request
"@Nonnull
    public OffsetDateTime getNewStartTime()
    {
        return getNewValue();
    }","/**
     * The new {@link ScheduledEvent#getStartTime() start time}.
     *
     * @return The new start time
     */",net.dv8tion.jda.api.events.guild.scheduledevent.update
"@Nullable
    default ThreadChannel getThreadChannelById(long id)
    {
        return (ThreadChannel) getChannelCache().getElementById(ChannelType.GUILD_PUBLIC_THREAD, id);
    }","/**
     * Gets a {@link ThreadChannel ThreadChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>These threads can also represent posts in {@link net.dv8tion.jda.api.entities.channel.concrete.ForumChannel ForumChannels}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link ThreadChannel ThreadChannel}.
     *
     * @return Possibly-null {@link ThreadChannel ThreadChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    @CheckReturnValue
    GuildManager setAfkTimeout(@Nonnull Guild.Timeout timeout);","/**
     * Sets the afk {@link net.dv8tion.jda.api.entities.Guild.Timeout Timeout} of this {@link net.dv8tion.jda.api.entities.Guild Guild}.
     *
     * @param  timeout
     *         The new afk timeout for this {@link net.dv8tion.jda.api.entities.Guild Guild}
     *
     * @throws IllegalArgumentException
     *         If the provided timeout is {@code null}
     *
     * @return GuildManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static GuildScheduledEventDeleteAction guildScheduledEventDelete(int shardIndex, GuildScheduledEventDelete dispatch) {
        return new GuildScheduledEventDeleteAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link GuildScheduledEventDelete} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link GuildScheduledEventDelete}
     */",discord4j.common.store.action.gateway
"public static void showDialog(final StackPane mainPane, final String title, final String description,
            final DimDialogs size, final EventHandler<? super MouseEvent> ev) {
        String css = """";
        final JFXDialogLayout content = new JFXDialogLayout();
        final Text titolo = new Text(title);
        final Text descrizione = new Text(description);
        switch (size) {
        case SMALL:
            css = ""dialogTextSmall"";
            break;
        case MEDIUM:
            css = ""dialogTextMedium"";
            break;
        case BIG:
            css = ""dialogTextBig"";
            break;
        default:
            break;
        }
        descrizione.getStyleClass().add(css);
        titolo.getStyleClass().add(css);
        content.setHeading(titolo);
        content.setBody(descrizione);
        content.getStyleClass().add(""dialogContentBackground"");
        final JFXDialog dialog = new JFXDialog(mainPane, content, JFXDialog.DialogTransition.CENTER);
        dialog.getStyleClass().add(""dialogBackground"");
        dialog.show();
        content.setCache(true);
        content.setCacheHint(CacheHint.SPEED);
        dialog.setOnMouseClicked(ev);
    }","/**
     * Show a {@link JFXDialog} into the main {@link Pane}.
     *
     * @param mainPane
     *            the main {@link StackPane}
     * @param title
     *            the String title dialog
     * @param description
     *            the STring description
     * @param size
     *            the {@link DimDialogs} size
     * @param ev
     *            the {@link MouseEvent}
     */",jestures.core.view.utils
"public Optional<AllowedMentions> getAllowedMentions() {
        return Optional.ofNullable(allowedMentions);
    }","/**
     * Return the configured {@link AllowedMentions}, if present.
     *
     * @return the configured allowed mentions setting or empty Optional if none was configured
     */",discord4j.rest
Mono<Long> countEmojisInGuild(long guildId);,"/**
     * Counts the number of emojis present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Mono} emitting the emoji count
     */",discord4j.common.store.api.layout
"public RestMember selfRestMember(Snowflake guildId) {
        return RestMember.create(this, guildId, restResources.getSelfId());
    }","/**
     * Requests to retrieve the bot member from the guild of the supplied ID
     *
     * @param guildId the ID of the guild.
     * @return A {@link RestMember} of the bot user as represented by the supplied ID.
     */",discord4j.rest
"@Contract(""_, _, !null -> !null"")
    public static String getString(@Nonnull DataObject root, @Nonnull String path, @Nullable String fallback)
    {
        String string = get(root, path, (obj, key) -> obj.getString(key, fallback), (arr, index) -> arr.getString(index, fallback));
        return string == null ? fallback : string;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The String value at the given path, returning the fallback if the path resolves to an optional value that is missing.
     */",net.dv8tion.jda.api.utils.data
"public Mono<Boolean> isSpeaker(final Snowflake memberId) {
        return getSpeakers()
                .map(VoiceState::getUserId)
                .any(memberId::equals);
    }","/**
     * Requests to determine if the member represented by the provided {@link Snowflake} is a speaker of this stage
     * channel.
     *
     * @param memberId The ID of the member to check.
     * @return A {@link Mono} where, upon successful completion, emits {@code true} if the member represented by the
     * provided {@link Snowflake} is a speaker of this stage channel, {@code false} otherwise. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"@Nonnull
    public TimeFormat getFormat()
    {
        return format;
    }","/**
     * The {@link TimeFormat} used to display this timestamp.
     *
     * @return The {@link TimeFormat}
     */",net.dv8tion.jda.api.utils
Flux<StickerData> getStickersInGuild(long guildId);,"/**
     * Retrieves data for all stickers present in the store for the given guild ID.
     *
     * @param guildId the guild ID
     * @return A {@link Flux} emitting the stickers, or empty if none is present
     * @since 3.2.3
     */",discord4j.common.store.api.layout
"public Optional<String> getLocation() {
        return data.location().toOptional();
    }","/**
     * Gets the location of the entity metadata, if present.
     *
     * @return The location of the entity metadata, or {@code Optional#empty()} if not present.
     */",discord4j.core.object
"@Nonnull
    @CheckReturnValue
    ChannelAction<ForumChannel> createForumChannel(@Nonnull String name);","/**
     * Creates a new {@link ForumChannel} with this Category as parent.
     * For this to be successful, the logged in account has to have the
     * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission in this Category.
     *
     * <p>This will copy all {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides} of this Category!
     * Unless the bot is unable to sync it with this category due to permission escalation.
     * See {@link IPermissionHolder#canSync(IPermissionContainer, IPermissionContainer)} for details.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_CHANNELS MAX_CHANNELS}
     *     <br>The maximum number of channels were exceeded</li>
     * </ul>
     *
     * @param  name
     *         The name of the ForumChannel to create (up to {@value Channel#MAX_NAME_LENGTH} characters)
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL} permission
     * @throws IllegalArgumentException
     *         If the provided name is {@code null}, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters
     *
     * @return A specific {@link ChannelAction ChannelAction}
     *         <br>This action allows to set fields for the new ForumChannel before creating it
     */",net.dv8tion.jda.api.entities.channel.concrete
"public WRWriterFactory getWriterFactory() {
		return new WriterFactoryImpl();
	}","/**
	 * {@inheritDoc}
	 */",net.winroad.htmldoclet4jdk8
long getBotIdLong();,"/**
         * The id for the bot associated with this role.
         *
         * @return The bot id, or 0 if this role is not for a bot
         *
         * @see    #isBot()
         */",net.dv8tion.jda.api.entities
Chunk chunk = border.getCenter().getChunk();,"/**
     * Checks if the chunk represented by this FLocation is outside the world border
     *
     * @param buffer the number of chunks from the border that will be treated as ""outside""
     * @return whether this location is outside of the border
     */",com.massivecraft.factions
"public Mono<Void> skipBody() {
        return getBody().map(ReferenceCounted::release).then();
    }","/**
     * Consume and release the response body then return and empty {@link Mono}.
     *
     * @return an empty {@link Mono} indicating response body consumption and release
     */",discord4j.rest.http.client
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction addChoice(@Nonnull String name, @Nonnull String value)
    {
        return addChoices(new Command.Choice(name, value));
    }","/**
     * Add up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * @param  name
     *         The choice name to show to the user, 1-{@value OptionData#MAX_CHOICE_NAME_LENGTH} characters
     * @param  value
     *         The choice value, 1-{@value OptionData#MAX_CHOICE_VALUE_LENGTH} characters
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the choice name is empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the option type is not {@link OptionType#STRING}</li>
     *             <li>If the value is empty or longer than {@value OptionData#MAX_CHOICE_VALUE_LENGTH}</li>
     *         </ul>
     *
     * @return The same callback action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.interactions
"@Nonnull
    @CheckReturnValue
    default PermOverrideManager clear(@Nonnull Collection<Permission> permissions)
    {
        return clear(Permission.getRaw(permissions));
    }","/**
     * Clears the provided {@link net.dv8tion.jda.api.Permission Permissions} bits
     * from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     * <br>This will cause the provided Permissions to be inherited
     *
     * @param  permissions
     *         The permissions to clear from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @throws IllegalArgumentException
     *         If any of the provided Permissions is {@code null}
     *
     * @return PermOverrideManager for chaining convenience
     *
     * @see    java.util.EnumSet EnumSet
     * @see    net.dv8tion.jda.api.Permission#getRaw(java.util.Collection) Permission.getRaw(Collection)
     */",net.dv8tion.jda.api.managers
"default EnumSet<StoreFlag> getEnabledFlags() {
        return EnumSet.allOf(StoreFlag.class);
    }","/**
     * Return a set of {@link StoreFlag} values to selectively enable store actions. By default, it returns all values,
     * meaning this layout will enable all available store actions.
     *
     * @return a set of flags to partially enable store actions
     * @since 3.2.5
     */",discord4j.common.store.api.layout
"@Nonnull
    @CheckReturnValue
    default R setThreadId(long threadId)
    {
        return setThreadId(threadId == 0 ? null : Long.toUnsignedString(threadId));
    }","/**
     * Set the target thread id for the webhook message.
     * <br>This allows sending webhook messages in the target thread,
     * however the webhook must be part of the thread parent channel.
     *
     * <p>This cannot be used with {@link net.dv8tion.jda.api.interactions.InteractionHook InteractionHooks}!
     *
     * @param  threadId
     *         The target thread id or 0 to unset
     *
     * @throws IllegalStateException
     *         If this is an interaction webhook
     *
     * @return The same message action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nullable
    public TextChannel getNewCommunityUpdatesChannel()
    {
        return getNewValue();
    }","/**
     * The new community updates channel.
     *
     * @return The new community updates channel
     */",net.dv8tion.jda.api.events.guild.update
"@Nonnull
    @Unmodifiable
    default List<PermissionOverride> getMemberPermissionOverrides()
    {
        return getPermissionOverrides().stream()
                .filter(PermissionOverride::isMemberOverride)
                .collect(Helpers.toUnmodifiableList());
    }","/**
     * Gets all of the {@link net.dv8tion.jda.api.entities.Member Member} {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides}
     * that are part of this {@link GuildChannel GuildChannel}.
     *
     * <p>This requires {@link net.dv8tion.jda.api.utils.cache.CacheFlag#MEMBER_OVERRIDES CacheFlag.MEMBER_OVERRIDES} to be enabled!
     *
     * @return Possibly-empty immutable list of all {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides}
     *         for {@link net.dv8tion.jda.api.entities.Member Member}
     *         for this {@link GuildChannel GuildChannel}.
     */",net.dv8tion.jda.api.entities.channel.attribute
"public StageInstance getCurrent() {
        return current;
    }","/**
     * Get the updated {@link StageInstance}
     *
     * @return The updated {@link StageInstance}
     */",discord4j.core.event.domain
"public Publisher<?> onApplicationCommandUpdate(ApplicationCommandUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when an application command relevant to the current user is updated. Guild ID might be missing
     * if this event fires for a DM channel.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"Mono<EmojiData> getEmojiById(long guildId, long emojiId);","/**
     * Retrieves data for the emoji corresponding to the given guild ID and emoji ID.
     *
     * @param guildId the guild ID
     * @param emojiId the emoji ID
     * @return A {@link Mono} emitting the emoji, or empty if not found
     */",discord4j.common.store.api.layout
"public Member(final GatewayDiscordClient gateway, final MemberData data, final long guildId) {
        super(gateway, data.user(), data, guildId);
    }","/**
     * Constructs a {@code Member} with an associated {@link GatewayDiscordClient} and Discord data.
     *
     * @param gateway The {@link GatewayDiscordClient} associated to this object, must be non-null.
     * @param data The raw data as represented by Discord, must be non-null.
     * @param guildId The ID of the guild this user is associated to.
     */",discord4j.core.object.entity
ret = entry.getValue();,"/**
     * This method tests if me has a certain permission and returns true if me has. Otherwise false
     */",com.massivecraft.factions.zcore.util
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoiceStrings(@Nonnull Collection<String> choices)
    {
        return replyChoices(choices.stream()
                .map(it -> new Command.Choice(it, it))
                .collect(Collectors.toList()));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * <p>The provided strings will be used as value and name for the {@link net.dv8tion.jda.api.interactions.commands.Command.Choice Choices}.
     *
     * @param  choices
     *         The choice suggestions to present to the user, each limited to {@value OptionData#MAX_CHOICE_NAME_LENGTH} characters
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If any of the choice names are empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the string value of any of the choices is empty or longer than {@value OptionData#MAX_CHOICE_VALUE_LENGTH}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"@Nonnull
    @CheckReturnValue
    default PermOverrideManager deny(@Nonnull Permission... permissions)
    {
        Checks.notNull(permissions, ""Permissions"");
        return deny(Permission.getRaw(permissions));
    }","/**
     * Denies the provided {@link net.dv8tion.jda.api.Permission Permissions}
     * from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     *
     * @param  permissions
     *         The permissions to deny from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @throws IllegalArgumentException
     *         If any of the provided Permissions is {@code null}
     *
     * @return PermOverrideManager for chaining convenience
     *
     * @see    net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...) Permission.getRaw(Permission...)
     */",net.dv8tion.jda.api.managers
"@Nonnull
    public IPermissionContainerUnion getChannel()
    {
        return (IPermissionContainerUnion) channel;
    }","/**
     * The {@link IPermissionContainer guild channel} this override belongs to.
     *
     * @return The {@link IPermissionContainer channel}
     */",net.dv8tion.jda.api.events.guild.override
"@Nonnull
    @CheckReturnValue
    AutoModRuleManager setExemptRoles(@Nonnull Collection<Role> roles);","/**
     * Set which roles can bypass this rule.
     *
     * <p>Roles added to the exemptions will allow all of its members to bypass this rule.
     *
     * @param  roles
     *         The roles to exempt (up to {@value AutoModRule#MAX_EXEMPT_ROLES} roles)
     *
     * @throws IllegalArgumentException
     *         If null is provided or the number of roles exceeds {@value AutoModRule#MAX_EXEMPT_ROLES}
     *
     * @return AutoModRuleManager for chaining convenience
     */",net.dv8tion.jda.api.managers
"public static RestSticker create(RestClient restClient, Snowflake guildId, Snowflake id) {
        return new RestSticker(restClient, guildId.asLong(), id.asLong());
    }","/**
     * Create a {@link RestSticker} with the given parameters. This method does not perform any API request.
     *
     * @param restClient REST API resources
     * @param guildId the ID of the guild this sticker belongs to
     * @param id the ID of this member
     * @return a {@code RestSticker} represented by the given parameters.
     */",discord4j.rest.entity
"public static final Route USER_APPLICATIONS_ROLE_CONNECTION_MODIFY = Route.put(""/users/@me/applications/{application.id}/role-connection"");","/**
     * Updates and returns the application role connection for the user. Requires an OAuth2 access token with role_connections.write scope for the application specified in the path.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/user#update-current-user-application-role-connection"">
     * https://discord.com/developers/docs/resources/user#update-current-user-application-role-connection</a>
     */",discord4j.rest.route
"public Publisher<?> onVoiceServerUpdate(VoiceServerUpdateEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild's voice server is requested or is updated.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    public String getOldLocation()
    {
        return getOldValue();
    }","/**
     * The old {@link ScheduledEvent#getLocation() location}.
     *
     * @return The old location
     */",net.dv8tion.jda.api.events.guild.scheduledevent.update
"PollQuestion(final PollMediaObject data) {
        this.data = data;
    }","/**
     * Constructs a PollQuestion object.
     *
     * @param data the poll media object
     */",discord4j.core.object.entity.poll
"public Publisher<?> onGuildDelete(GuildDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when the bot leaves or is kicked from a guild, or if a guild has become unavailable due to an outage.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
private static final Logger LOG = Logger.getLogger(Recognizer.class);,"/*******************************************************************************
 * Copyright (c) 2018 Giulianini Luca
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/",jestures.core.recognition
"public WebhookService getWebhookService() {
        return webhookService;
    }","/**
     * Access a low-level representation of the API endpoints for the Webhook resource. It is recommended you use
     * methods like {@link #getWebhookById(Snowflake)}, {@link #restWebhook(WebhookData)} or
     * {@link RestWebhook#create(RestClient, Snowflake)}.
     *
     * @return a handle to perform low-level requests to the API
     */",discord4j.rest
"public CloseException(CloseStatus closeStatus, ContextView context, @Nullable Throwable cause) {
        super(cause);
        this.closeStatus = closeStatus;
        this.context = context;
    }","/**
     * Create a {@link CloseException} with the given status, Reactor context and cause.
     *
     * @param closeStatus the {@link CloseStatus} representing this exception
     * @param context a {@link ContextView} instance providing metadata related to this exception
     * @param cause the cause for this exception
     */",discord4j.common.close
"@Nonnull
    public Guild.Timeout getNewAfkTimeout()
    {
        return getNewValue();
    }","/**
     * The new {@link net.dv8tion.jda.api.entities.Guild.Timeout AFK-Timeout}
     *
     * @return The new AFK-Timeout
     */",net.dv8tion.jda.api.events.guild.update
"public Builder mutate() {
        return new Builder()
                .httpClient(getHttpClient())
                .timerTaskScheduler(getTimerTaskScheduler())
                .blockingTaskScheduler(getBlockingTaskScheduler())
                .payloadSenderScheduler(getPayloadSenderScheduler());
    }","/**
     * Returns a builder to create a new {@link GatewayReactorResources} with settings copied from the current
     * {@link GatewayReactorResources}.
     *
     * @return a builder based off this instance properties
     */",discord4j.gateway
"@Nullable
    public <T> T getOption(@Nonnull AuditLogOption option)
    {
        Checks.notNull(option, ""Option"");
        return getOptionByName(option.getKey());
    }","/**
     * Shortcut to <code>{@link #getOptions() getOptions()}.get(name)</code> lookup!
     *
     * @param  <T>
     *         The expected type for this option <br>Will be used for casting
     * @param  option
     *         The {@link net.dv8tion.jda.api.audit.AuditLogOption AuditLogOption}
     *
     * @throws java.lang.ClassCastException
     *         If the type-cast failed for the generic type.
     * @throws java.lang.IllegalArgumentException
     *         If provided with {@code null} option.
     *
     * @return Possibly-null value corresponding to the specified option constant
     */",net.dv8tion.jda.api.audit
Mono<MessageData> createFollowupMessageEphemeral(String content);,"/**
     * Create a new ephemeral followup message with the given content. This uses a webhook tied to the interaction ID
     * and token.
     *
     * @param content the text content included in the followup
     * @return a {@link Mono} where, upon successful completion, emits the sent message. If an error is received,
     * it is emitted through the {@code Mono}.
     */",discord4j.rest.interaction
"@Nullable
        String getAvatarId();","/**
         * Gets the avatar hash of the member, or null if they do not have
         * an avatar set.
         * 
         * @return possibly-null String containing the avatar hash of the
         *         member
         */",net.dv8tion.jda.api.entities
"@Nonnull
    @CheckReturnValue
    RestAction<Void> inviteSpeaker();","/**
     * Invite this member to become a speaker.
     *
     * <p>This does nothing if the member is not connected to a {@link StageChannel}.
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link net.dv8tion.jda.api.Permission#VOICE_MUTE_OTHERS Permission.VOICE_MUTE_OTHERS}
     *         in the associated {@link StageChannel}
     *
     * @return {@link RestAction}
     */",net.dv8tion.jda.api.entities
"public static final Route GUILD_STICKER_GET = Route.get(""/guilds/{guild.id}/stickers/{sticker.id}"");","/**
     * Returns a sticker object for the given guild and sticker IDs. Includes the user field if the bot has the MANAGE_EMOJIS_AND_STICKERS permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/sticker#get-guild-sticker"">
     * https://discord.com/developers/docs/resources/sticker#get-guild-sticker</a>
     */",discord4j.rest.route
"Stream<Path> paths = Files.walk(
                Paths.get(FileManager.libDir + OsUtils.getSeparator() + LibPaths.USER.getDirName()), 1)) {
            return paths.map(p -> p.getFileName().toString())
                        .filter(t -> !t.equals(LibPaths.USER.getDirName()))
                        .collect(Collectors.toList());","/**
     * Get the list of directories.
     *
     * @return the {@link List} of directory
     * @throws IOException
     *             the {@link IOException}
     */",jestures.core.file
"default Flux<ThreadChannel> getAllThreads() {
        return Flux.merge(getActiveThreads(), getPublicArchivedThreads());
    }","/**
     * Request to retrieve all threads in this channel.
     *
     * @return A {@link Flux} that continually emits the {@link ThreadChannel threads} of the channel. If an error is
     * received, it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
"public String getSummary() {
        return data.summary();
    }","/**
     * Gets the summary of the app.
     *
     * @return The description of the app.
     */",discord4j.core.object.entity
"@Nonnull
    @CheckReturnValue
    default PermOverrideManager grant(@Nonnull Permission... permissions)
    {
        Checks.notNull(permissions, ""Permissions"");
        return grant(Permission.getRaw(permissions));
    }","/**
     * Grants the provided {@link net.dv8tion.jda.api.Permission Permissions}
     * to the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     *
     * @param  permissions
     *         The permissions to grant to the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @throws IllegalArgumentException
     *         If any of the provided Permissions is {@code null}
     *
     * @return PermOverrideManager for chaining convenience
     *
     * @see    net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...) Permission.getRaw(Permission...)
     */",net.dv8tion.jda.api.managers
"public BulkBanResponseData getData() {
        return data;
    }","/**
     * Gets the data of the bulk ban response.
     *
     * @return The data of the bulk ban response.
     */",discord4j.core.object
Route.CompiledRoute route = Route.Templates.GET_TEMPLATE.compile(code);,"/**
     * Retrieves a new {@link net.dv8tion.jda.api.entities.templates.Template Template} instance for the given template code.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_GUILD_TEMPLATE Unknown Guild Template}
     *     <br>The template doesn't exist.</li>
     * </ul>
     *
     * @param  api
     *         The JDA instance
     * @param  code
     *         A valid template code
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If the provided code is null or empty</li>
     *             <li>If the provided code contains a whitespace</li>
     *             <li>If the provided JDA object is null</li>
     *         </ul>
     *
     * @return {@link net.dv8tion.jda.api.requests.RestAction RestAction} - Type: {@link net.dv8tion.jda.api.entities.templates.Template Template}
     *         <br>The Template object
     */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    public String getType()
    {
        return data.getString(""t"");
    }","/**
     * The type of event.
     *
     * @return The type of event.
     */",net.dv8tion.jda.api.events
"@Nonnull
    Stream<T> parallelStreamUnordered();","/**
     * Behavior similar to {@link CacheView#parallelStream()} which does not preserve order.
     *
     * @return (Parallel) Stream of contained elements
     *
     * @since  4.0.0
     */",net.dv8tion.jda.api.utils.cache
"public Optional<PresenceData> getPresenceData() {
        return Optional.ofNullable(presenceData);
    }","/**
     * Returns the presence data, if present.
     *
     * @return an optional {@link PresenceData}
     */",discord4j.common.store.api.object
"@Nonnull
    public Timeout getAfkTimeout()
    {
        return this.afkTimeout;
    }","/**
     * Returns the {@link net.dv8tion.jda.api.entities.Guild.Timeout AFK Timeout} for this guild.
     *
     * @return the afk timeout for this guild
     */",net.dv8tion.jda.api.entities.templates
"@Nonnull
    public final EmbedBuilder setDescription(@Nullable CharSequence description)
    {
        this.description.setLength(0);
        if (description != null && description.length() >= 1)
            appendDescription(description);
        return this;
    }","/**
     * Sets the Description of the embed. This is where the main chunk of text for an embed is typically placed.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/05-setDescription.png"">Example</a></b>
     *
     * @param  description
     *         the description of the embed, {@code null} to reset
     *
     * @throws java.lang.IllegalArgumentException
     *         If {@code description} is longer than {@value net.dv8tion.jda.api.entities.MessageEmbed#DESCRIPTION_MAX_LENGTH} characters,
     *         as defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#DESCRIPTION_MAX_LENGTH}
     *
     * @return the builder after the description has been set
     */",net.dv8tion.jda.api
"public static GetChannelsAction getChannels() {
        return new GetChannelsAction();
    }","/**
     * Creates an action to retrieve data for all channels present in a store.
     *
     * @return a new {@link GetChannelsAction}
     */",discord4j.common.store.action.read
"public Publisher<?> onModalSubmitInteraction(ModalSubmitInteractionEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a user starts a modal supported interaction.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"Mono<ThreadMember> getThreadMemberById(Snowflake threadId, Snowflake userId);","/**
     * Requests to retrieve the thread member associated to the supplied thread ID and user ID.
     *
     * @param threadId The ID of the thread.
     * @param userId The ID of the user.
     * @return A {@link Mono} where, upon successful completion, emits the {@link ThreadMember} associated to the supplied
     *         thread ID and user ID. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.retriever
"default Mono<Guild> getGuild(EntityRetrievalStrategy retrievalStrategy) {
        return getClient().withRetrievalStrategy(retrievalStrategy).getGuildById(getGuildId());
    }","/**
     * Requests to retrieve the guild this channel is associated to, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the guild
     * @return A {@link Mono} where, upon successful completion, emits the {@link Guild guild} this channel is
     * associated to. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"public static GetGuildScheduledEventUsersInEventAction getScheduledEventsUsers(long guildId, long eventId) {
        return new GetGuildScheduledEventUsersInEventAction(guildId, eventId);
    }","/**
     * Creates an action to retrieve data for the scheduled event users corresponding to the given guild ID and event ID.
     *
     * @param guildId the guild ID
     * @param eventId the event ID
     * @return a new {@link GetGuildScheduledEventUsersAction}
     */",discord4j.common.store.action.read
"@Nonnull
    @CheckReturnValue
    M setDefaultThreadSlowmode(int slowmode);","/**
     * Sets the <b><u>default thread slowmode</u></b> of the selected channel.
     * This is applied to newly created threads by default.
     * <br>Provide {@code 0} to disable slowmode.
     *
     * <p>A channel default thread slowmode <b>must not</b> be negative nor greater than {@link ISlowmodeChannel#MAX_SLOWMODE}!
     *
     * <p>Note: Bots are unaffected by this.
     * <br>Having {@link Permission#MESSAGE_MANAGE MESSAGE_MANAGE} or
     * {@link Permission#MANAGE_CHANNEL MANAGE_CHANNEL} permission also
     * grants immunity to slowmode.
     *
     * @param  slowmode
     *         The new default thread slowmode (in seconds)
     *
     * @throws IllegalArgumentException
     *         If the provided slowmode is negative or greater than {@value ISlowmodeChannel#MAX_SLOWMODE}
     *
     * @return ChannelManager for chaining convenience
     *
     * @see    IThreadContainer#getDefaultThreadSlowmode()
     */",net.dv8tion.jda.api.managers.channel.attribute
"public Snowflake getGuildId() {
        return this.autoModRule.getGuildId();
    }","/**
     * Gets the {@link Snowflake} ID of the {@link Guild} involved in the event.
     *
     * @return The ID of the {@link Guild}.
     */",discord4j.core.event.domain.automod
"public static MessageDeleteAction messageDelete(int shardIndex, MessageDelete dispatch) {
        return new MessageDeleteAction(shardIndex, dispatch);
    }","/**
     * Creates an action to execute when a {@link MessageDelete} is received from the gateway.
     *
     * @param shardIndex the index of the shard where the dispatch comes from
     * @param dispatch   the dispatch data coming from Discord gateway
     * @return a new {@link MessageDeleteAction}
     */",discord4j.common.store.action.gateway
Publisher<?> onInteractionResponse(InteractionResponse response);,"/**
     * Return a reactive sequence to work with an interaction token after an initial response has been sent.
     *
     * @param response a handler with all common actions to derive the asynchronous followup sequence
     * @return a publisher, like a {@link Mono} or {@link Flux} to be subscribed for the duration of the interaction
     * token, after which will be cancelled through {@link Flux#take(Duration)} semantics.
     */",discord4j.rest.interaction
"@Nullable
    default Category getParentCategory()
    {
        return getGuild().getCategoryById(getParentCategoryIdLong());
    }","/**
     * Parent {@link Category Category} of this
     * GuildChannel. Channels don't need to have a parent Category.
     * <br>Note that a {@link Category Category} will
     * always return {@code null} for this method as nested categories are not supported.
     *
     * @return Possibly-null {@link Category Category} for this GuildChannel
     */",net.dv8tion.jda.api.entities.channel.attribute
"public CompletableFuture<Optional<MongoCollection<Document>>> getCollection(final String collection) {
        return CompletableFuture.supplyAsync(() -> Optional.of(this.mongoDatabase.getCollection(collection))).exceptionally(throwable -> {
            throwable.printStackTrace();
            return Optional.empty();
        });
    }","/**
     * Gets a {@link MongoCollection<Document>} asynchronously
     * @param collection name of the collection
     * @return {@link MongoCollection<Document>} of the given collection-name
     */",io.github.heliumdioxid.database.mongo
"public static GetMessagesAction getMessages() {
        return new GetMessagesAction();
    }","/**
     * Creates an action to retrieve data for all messages present in a store.
     *
     * @return a new {@link GetMessagesAction}
     */",discord4j.common.store.action.read
"@Nonnull
    public CompletableFuture<Path> downloadToPath(@Nonnull Path path)
    {
        Checks.notNull(path, ""Path"");

        return downloadToPath(url, path);
    }","/**
     * Downloads the data of this file into the specified file.
     *
     * <p><b>Implementation note:</b>
     *       The file is first downloaded into a temporary file, the file is then moved to its real destination when the download is complete.
     *       <br>The given path can also target filesystems such as a ZIP filesystem.
     *
     * @param  path
     *         The file in which to download the image
     *
     * @throws IllegalArgumentException
     *         If any of the follow checks are true
     *         <ul>
     *             <li>The target path is null</li>
     *             <li>The parent folder of the target path does not exist</li>
     *             <li>The target path exists and is not a {@link Files#isRegularFile(Path, LinkOption...) regular file}</li>
     *             <li>The target path exists and is not {@link Files#isWritable(Path) writable}</li>
     *         </ul>
     *
     * @return {@link CompletableFuture} which holds a {@link Path}, it is the same as the path passed in the parameters.
     */",net.dv8tion.jda.api.utils
"public String getUriTemplate() {
        return uriTemplate;
    }","/**
     * Return the URI template that defines this route.
     *
     * @return a URI template, probably containing path parameters, that is defining this {@link Route}
     */",discord4j.rest.route
"public Activity getNewActivity()
    {
        return newActivity;
    }","/**
     * The new activity
     *
     * @return The activity
     */",net.dv8tion.jda.api.events.user
"String[] parts = path.split(""\\."", 2);","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     *
     * @param  <T>
     *         The result type
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     * @param  fromObject
     *         Object relative resolver of the value, this is used for the final reference and resolves the value.
     *         The first parameter is the {@link DataObject} where you get the value from, and the second is the field name.
     *         An example would be {@code (obj, name) -> obj.getString(name)} or as a method reference {@code DataObject::getString}.
     * @param  fromArray
     *         Array relative resolver of the value, this is used for the final reference and resolves the value.
     *         The first parameter is the {@link DataArray} where you get the value from, and the second is the field index.
     *         An example would be {@code (array, index) -> obj.getString(index)} or as a method reference {@code DataArray::getString}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The value at the provided path, using the provided resolver functions.
     *         Possibly null, if the path ends with a ""?"" operator, or the resolver function returns null.
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    List<VoiceChannel> getVoiceChannels();","/**
     * Gets the list of voice channels in the guild
     *
     * @throws IllegalStateException
     *         If the widget is not {@link #isAvailable() available}
     *
     * @return the list of voice channels in the guild
     */",net.dv8tion.jda.api.entities
"@Nonnull
    public EmbedBuilder addField(@Nonnull String name, @Nonnull String value, boolean inline)
    {
        Checks.notNull(name, ""Name"");
        Checks.notNull(value, ""Value"");
        this.fields.add(new MessageEmbed.Field(name, value, inline));
        return this;
    }","/**
     * Adds a Field to the embed.
     *
     * <p>Note: If a blank string is provided to either {@code name} or {@code value}, the blank string is replaced
     * with {@link net.dv8tion.jda.api.EmbedBuilder#ZERO_WIDTH_SPACE}.
     *
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/07-addField.png"">Example of Inline</a></b>
     * <p><b><a href=""https://raw.githubusercontent.com/discord-jda/JDA/assets/assets/docs/embeds/08-addField.png"">Example of Non-inline</a></b>
     *
     * @param  name
     *         the name of the Field, displayed in bold above the {@code value}.
     * @param  value
     *         the contents of the field.
     * @param  inline
     *         whether or not this field should display inline.
     *
     * @throws java.lang.IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If the character limit for {@code name}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#TITLE_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#TITLE_MAX_LENGTH},
     *             is exceeded.</li>
     *             <li>If the character limit for {@code value}, defined by {@link net.dv8tion.jda.api.entities.MessageEmbed#VALUE_MAX_LENGTH} as {@value net.dv8tion.jda.api.entities.MessageEmbed#VALUE_MAX_LENGTH},
     *             is exceeded.</li>
     *         </ul>
     *
     * @return the builder after the field has been added
     */",net.dv8tion.jda.api
"public Publisher<?> onReactionRemoveAll(ReactionRemoveAllEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when all of the reactions on a message are removed. Guild ID might be missing if this event fires for
     * a DM channel.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"@Nonnull
    @CheckReturnValue
    default PermOverrideManager clear(@Nonnull Permission... permissions)
    {
        Checks.notNull(permissions, ""Permissions"");
        return clear(Permission.getRaw(permissions));
    }","/**
     * Clears the provided {@link net.dv8tion.jda.api.Permission Permissions} bits
     * from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}.
     * <br>This will cause the provided Permissions to be inherited
     *
     * @param  permissions
     *         The permissions to clear from the selected {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverride}
     *
     * @throws IllegalArgumentException
     *         If any of the provided Permissions is {@code null}
     *
     * @return PermOverrideManager for chaining convenience
     */",net.dv8tion.jda.api.managers
void setStatus(@Nullable OnlineStatus status);,"/**
     * Sets the {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus} for this session
     *
     * @throws IllegalArgumentException
     *         if the provided OnlineStatus is {@link net.dv8tion.jda.api.OnlineStatus#UNKNOWN UNKNOWN}
     *
     * @param  status
     *         the {@link net.dv8tion.jda.api.OnlineStatus OnlineStatus}
     *         to be used (OFFLINE/null {@literal ->} INVISIBLE)
     */",net.dv8tion.jda.api.managers
"static RequestQueueFactory createFromSink(Function<Sinks.ManySpec, Sinks.Many<Object>> requestSinkFactory,
                                              EmissionStrategy emissionStrategy) {
        return new SinksRequestQueueFactory(requestSinkFactory, emissionStrategy);
    }","/**
     * Returns a factory of {@link RequestQueue} backed by a {@link Sinks.Many} instance.
     *
     * @param requestSinkFactory a Function that provides a sink. The factory <b>must</b> provide a new instance
     * every time it is called, and the processor must not be pre-filled with any elements, otherwise it may lead to
     * non-deterministic behavior.
     * @param emissionStrategy the strategy to handle request submission (emission) failures
     * @return a {@link RequestQueueFactory} backed by a {@link Sinks.Many}
     */",discord4j.rest.request
"@Nullable
    default TeamMember getMemberById(long userId)
    {
        for (TeamMember member : getMembers())
        {
            if (member.getUser().getIdLong() == userId)
                return member;
        }
        return null;
    }","/**
     * Retrieves the {@link net.dv8tion.jda.api.entities.TeamMember TeamMember} instance
     * for the provided user id. If the user is not a member of this team, null is returned.
     *
     * @param  userId
     *         The user id for the team member
     *
     * @return The {@link net.dv8tion.jda.api.entities.TeamMember TeamMember} for the user or null
     */",net.dv8tion.jda.api.entities
"Mono<Long> countVoiceStatesInChannel(long guildId, long channelId);","/**
     * Counts the number of voice states present in the store for the given channel ID.
     *
     * @param guildId the guild ID
     * @param channelId the channel ID
     * @return A {@link Mono} emitting the voice state count
     */",discord4j.common.store.api.layout
"@Nonnull
    static UnifiedMemberCacheView allMembers(@Nonnull Supplier<? extends Stream<? extends MemberCacheView>> generator)
    {
        Checks.notNull(generator, ""Generator"");
        return new UnifiedCacheViewImpl.UnifiedMemberCacheViewImpl(generator);
    }","/**
     * Creates a combined {@link UnifiedMemberCacheView UnifiedMemberCacheView}
     * for all provided MemberCacheView implementations.
     * <br>This allows to combine cache of multiple JDA sessions or Guilds.
     *
     * @param  generator
     *         Stream generator of {@link net.dv8tion.jda.api.utils.cache.MemberCacheView MemberCacheView} instances
     *
     * @return Combined MemberCacheView spanning over all provided instances
     */",net.dv8tion.jda.api.utils.cache
"public Mono<StoreChannel> edit(StoreChannelEditSpec spec) {
        Objects.requireNonNull(spec);
        return Mono.defer(
                () -> getClient().getRestClient().getChannelService()
                        .modifyChannel(getId().asLong(), spec.asRequest(), spec.reason()))
                .map(data -> EntityUtil.getChannel(getClient(), data))
                .cast(StoreChannel.class);
    }","/**
     * Requests to edit this store channel.
     *
     * @param spec an immutable object that specifies how to edit this store channel
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link StoreChannel}. If an error is
     * received, it is emitted through the {@code Mono}.
     */",discord4j.core.object.entity.channel
"public Optional<Role> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Gets the old version of the {@link Role} that was updated in this event. if present.
     * This may not be available if {@code Role} are not stored.
     *
     * @return The old version of the updated {@link Role}, if present.
     */",discord4j.core.event.domain.role
final File[] files = dir.listFiles();,"/**
     * Constructor.
     */",jestures.core.file
"@Nonnull
    Stream<T> stream();","/**
     * Creates a {@link java.util.stream.Stream Stream} of all cached elements.
     * <br>This will be sorted for a {@link SortedSnowflakeCacheViewImpl SortedSnowflakeCacheView}.
     *
     * @return Stream of elements
     */",net.dv8tion.jda.api.utils.cache
"public static boolean getBoolean(@Nonnull DataArray root, @Nonnull String path, boolean fallback)
    {
        Boolean bool = get(root, path, (obj, key) -> obj.getBoolean(key, fallback), (arr, index) -> arr.getBoolean(index, fallback));
        return bool != null ? bool : fallback;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The boolean value at the given path, if declared as optional this returns the provided fallback when the value is missing.
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    @CheckReturnValue
    default InviteAction setTargetStream(@Nonnull final Member member)
    {
        Checks.notNull(member, ""Member"");
        return setTargetStream(member.getIdLong());
    }","/**
     * Sets the user whose stream to display for this invite.
     * <br>The user must be streaming in the same channel.
     * The invite will have the {@link Invite.TargetType#STREAM} target.
     *
     * @param member
     *        The member whose stream to target.
     *
     * @throws IllegalArgumentException
     *         If the provided member is {@code null}
     *
     * @return The current InviteAction for chaining.
     */",net.dv8tion.jda.api.requests.restaction
"Route route = Route.custom(Method.PATCH, ""channels/{channel_id}/messages/{message_id}"");","/**
     * Create a route template for the with the {@link Method#PUT PUT} method.
     *
     * <p>Route syntax should include valid argument placeholders of the format: {@code '{' argument_name '}'}
     * <br>The rate-limit handling in JDA relies on the correct names of major parameters:
     * <ul>
     *     <li>{@code channel_id} for channel routes</li>
     *     <li>{@code guild_id} for guild routes</li>
     *     <li>{@code webhook_id} for webhook routes</li>
     *     <li>{@code interaction_token} for interaction routes</li>
     * </ul>
     *
     * For example, to compose the route to ban a user in a guild:
     * <pre>{@code
     * Route route = Route.custom(Method.PUT, ""guilds/{guild_id}/bans/{user_id}"");
     * }</pre>
     *
     * <p>To compile the route, use {@link #compile(String...)} with the positional arguments.
     * <pre>{@code
     * Route.CompiledRoute compiled = route.compile(guildId, userId);
     * }</pre>
     *
     * @param  route
     *         The route template with valid argument placeholders
     *
     * @throws IllegalArgumentException
     *         If null is provided or the route is invalid (containing spaces or empty)
     *
     * @return The custom route template
     */",net.dv8tion.jda.api.requests
"@Nonnull
    @CheckReturnValue
    default PermissionOverrideAction deny(@Nonnull Collection<Permission> permissions)
    {
        return deny(Permission.getRaw(permissions));
    }","/**
     * Denies the specified permissions.
     * <br>This does not override already denied permissions.
     *
     * @param  permissions
     *         The permissions to deny, in addition to already denied permissions
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         on the channel and tries to set permissions it does not have in the channel
     * @throws IllegalArgumentException
     *         If any provided argument is null
     *
     * @return The current PermissionOverrideAction - for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction
"@Nonnull
    static ChunkingFilter exclude(@Nonnull long... ids)
    {
        Checks.notNull(ids, ""ID array"");
        if (ids.length == 0)
            return ALL;
        return (guild) -> {
            for (long id : ids)
            {
                if (id == guild)
                    return false;
            }
            return true;
        };
    }","/**
     * Factory method to disable chunking for a blacklist of guild ids.
     * <br>All guilds that are not mentioned will use chunking.
     *
     * <p>This is useful when the bot is only in one very large server that
     * takes most of its memory and should be ignored instead.
     *
     * @param  ids
     *         The ids that should not be chunked
     *
     * @return The resulting filter
     */",net.dv8tion.jda.api.utils
"@Nonnull
    @Unmodifiable
    List<GuildWelcomeScreen.Channel> getWelcomeChannels();","/**
     * Returns an immutable list of the welcome channels
     * <br>These channels are those which are <b>being modified</b>, not the ones currently shown on Discord
     *
     * @return An immutable list of the welcome channels to be set by the manager
     */",net.dv8tion.jda.api.managers
"default Flux<ThreadChannel> getActiveThreads() {
        return getClient().getGuildById(getGuildId())
            .flatMapMany(Guild::getActiveThreads)
            .map(ThreadListPart::getThreads)
            .flatMap(Flux::fromIterable)
            .filter(thread -> thread.getParentId().map(id -> id.equals(getId())).orElse(false));
    }","/**
     * Request to retrieve all active threads in this forum channel.
     *
     * @return A {@link Flux} that continually emits the {@link ThreadChannel threads} of the channel. If an error is
     * received, it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
void restart();,"/**
     * Restarts all shards, shutting old ones down first.
     *
     * <p>As all shards need to connect to discord again this will take equally long as the startup of a new ShardManager
     * (using the 5000ms + backoff as delay between starting new JDA instances).
     *
     * @throws java.util.concurrent.RejectedExecutionException
     *         If {@link #shutdown()} has already been invoked
     */",net.dv8tion.jda.api.sharding
"@Nullable
    default GuildChannel getGuildChannelById(@Nonnull ChannelType type, @Nonnull String id)
    {
        return getGuildChannelById(type, MiscUtil.parseSnowflake(id));
    }","/**
     * Get {@link GuildChannel GuildChannel} for the provided ID.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * <br>This is meant for systems that use a dynamic {@link ChannelType} and can
     * profit from a simple function to get the channel instance.
     *
     * <p>To get more specific channel types you can use one of the following:
     * <ul>
     *     <li>{@link #getChannelById(Class, String)}</li>
     *     <li>{@link #getTextChannelById(String)}</li>
     *     <li>{@link #getNewsChannelById(String)}</li>
     *     <li>{@link #getStageChannelById(String)}</li>
     *     <li>{@link #getVoiceChannelById(String)}</li>
     *     <li>{@link #getCategoryById(String)}</li>
     *     <li>{@link #getForumChannelById(String)}</li>
     * </ul>
     *
     * @param  type
     *         The {@link ChannelType}
     * @param  id
     *         The ID of the channel
     *
     * @throws java.lang.IllegalArgumentException
     *         If the provided ID is null
     * @throws java.lang.NumberFormatException
     *         If the provided ID is not a snowflake
     *
     * @return The GuildChannel or null
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    public static DefaultMemberPermissions enabledFor(@Nonnull Collection<Permission> permissions)
    {
        Checks.noneNull(permissions, ""Permissions"");
        if (permissions.isEmpty())
            return ENABLED;

        return enabledFor(Permission.getRaw(permissions));
    }","/**
     * Returns a DefaultMemberPermissions instance with the predefined permissions a member must have to see and access a command.
     *
     * <br><b>If the passed Collection is empty, this returns {@link DefaultMemberPermissions#ENABLED ENABLED}</b>
     *
     * @param  permissions
     *         Collection of {@link Permission Permissions}
     *
     * @throws IllegalArgumentException
     *         If any of the passed Permission is null
     *
     * @return DefaultMemberPermissions instance with the predefined permissions
     */",net.dv8tion.jda.api.interactions.commands
"public Optional<Snowflake> getIntegrationId() {
        return data.integrationId().toOptional().map(Snowflake::of);
    }","/**
     * Gets the id of the integration this role belongs to, if present.
     *
     * @return The id of the integration this role belongs to, if present.
     */",discord4j.core.object
void codifyOnSkeletonChange(Vector2D newVector);,"/**
     * Codify the body joint according to class specification. This performs discretization on skeleton stream.
     * <p>
     * Codification can be derivative or on starting point.
     *
     * @param newVector
     *            the primary {@link Vector2D} joint according to sensor settings
     *
     */",jestures.core.codification
"@Nullable
    default GuildChannel getGuildChannelById(@Nonnull ChannelType type, long id)
    {
        C channel = getChannelCache().getElementById(type, id);
        return channel instanceof GuildChannel ? (GuildChannel) channel : null;
    }","/**
     * Get {@link GuildChannel GuildChannel} for the provided ID.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * <br>This is meant for systems that use a dynamic {@link ChannelType} and can
     * profit from a simple function to get the channel instance.
     *
     * <p>To get more specific channel types you can use one of the following:
     * <ul>
     *     <li>{@link #getChannelById(Class, long)}</li>
     *     <li>{@link #getTextChannelById(long)}</li>
     *     <li>{@link #getNewsChannelById(long)}</li>
     *     <li>{@link #getStageChannelById(long)}</li>
     *     <li>{@link #getVoiceChannelById(long)}</li>
     *     <li>{@link #getCategoryById(long)}</li>
     *     <li>{@link #getForumChannelById(long)}</li>
     * </ul>
     *
     * @param  type
     *         The {@link ChannelType}
     * @param  id
     *         The ID of the channel
     *
     * @return The GuildChannel or null
     */",net.dv8tion.jda.api.entities.channel.attribute
"public Optional<Snowflake> getOptionAsSnowflake(final String name) {
        return getOption(name)
            .flatMap(ApplicationCommandInteractionOption::getValue)
            .map(ApplicationCommandInteractionOptionValue::asSnowflake);
    }","/**
     * Gets the value of the option corresponding to the provided name, if present, as a {@link Snowflake}.
     *
     * @param name The name of the option.
     * @return An {@link Optional} containing the value of the option corresponding to the provided name, if present, or empty otherwise.
     * @throws IllegalArgumentException If the option is present but its value cannot be converted to a snowflake.
     */",discord4j.core.event.domain.interaction
"@Nonnull
    static UserSnowflake fromId(long id)
    {
        return new UserSnowflakeImpl(id);
    }","/**
     * Creates a User instance which only wraps an ID.
     *
     * @param  id
     *         The user id
     *
     * @return A user snowflake instance
     *
     * @see    JDA#retrieveUserById(long)
     */",net.dv8tion.jda.api.entities
"@Nonnull
    public Guild getGuild()
    {
        return channel.getGuild();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Guild Guild} where the messages were deleted.
     *
     * @return The Guild
     */",net.dv8tion.jda.api.events.message
"public static final Route POLL_ANSWER_VOTERS_GET = Route.get(""/channels/{channel.id}/polls/{message.id}/answers/{answer_id}"");","/**
     * Returns a list of users that voted for the given `answer_id` in the poll for the given message represented by
     * its `message.id` and `channel.id`.
     * @see <a href=""https://discord.com/developers/docs/resources/poll#get-answer-voters"">https://discord.com/developers/docs/resources/poll#get-answer-voters</a>
     */",discord4j.rest.route
"public Publisher<?> onNewsChannelDelete(NewsChannelDeleteEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when a guild news channel is deleted.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public Snowflake getMemberId() {
        return Snowflake.of(memberId);
    }","/**
     * Gets the {@link Snowflake} ID of the {@link Member} involved in the event.
     *
     * @return The ID of the {@link Member} involved.
     */",discord4j.core.event.domain.guild
Mono<Void> multicast(GatewayPayload<?> payload);,"/**
     * Send a single {@link GatewayPayload} to all {@link GatewayClient} instances represented by this group and
     * returns a {@link Mono} that signals completion when it has been sent.
     *
     * @param payload a single outbound payload
     * @return a {@link Mono} completing when the payload is sent
     */",discord4j.gateway
"public static final Route CONSUME_ENTITLEMENT = Route.post(""/applications/{application.id}/entitlements/{entitlement.id}/consume"");","/**
     * For One-Time Purchase consumable SKUs, marks a given entitlement for the user as consumed. The entitlement will have consumed=true when using {@link Routes#LIST_ENTITLEMENTS}.
     *
     * @see <a href=""https://discord.com/developers/docs/monetization/entitlements#consume-an-entitlement"">Docs</a>
     */",discord4j.rest.route
"public LegacyWebhookExecuteSpec setThreadId(Snowflake threadId) {
        this.threadId = Possible.of(threadId);
        return this;
    }","/**
     * Set the thread id within the webhook's channel. The thread will automatically be unarchived.
     *
     * @param threadId the thread id to set
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nullable
    default String getCoverId()
    {
        long id = getCoverIdLong();
        return id == 0 ? null : Long.toUnsignedString(id);
    }","/**
     * The id of the sticker shown as cover.
     *
     * @return The sticker id for the cover sticker, or {@code null} if there is no cover
     */",net.dv8tion.jda.api.entities.sticker
"@Nullable
    default TextChannel getTextChannelById(@Nonnull String id)
    {
        return (TextChannel) getChannelCache().getElementById(ChannelType.TEXT, id);
    }","/**
     * Gets a {@link TextChannel TextChannel} that has the same id as the one provided.
     * <br>If there is no channel with an id that matches the provided one, then this returns {@code null}.
     *
     * <p>This getter exists on any instance of {@link IGuildChannelContainer} and only checks the caches with the relevant scoping.
     * For {@link Guild}, {@link JDA}, or {@link ShardManager},
     * this returns the relevant channel with respect to the cache within each of those objects.
     * For a guild, this would mean it only returns channels within the same guild.
     * <br>If this is called on {@link JDA} or {@link ShardManager}, this may return null immediately after building, because the cache isn't initialized yet.
     * To make sure the cache is initialized after building your {@link JDA} instance, you can use {@link JDA#awaitReady()}.
     *
     * @param  id
     *         The id of the {@link TextChannel TextChannel}.
     *
     * @throws java.lang.NumberFormatException
     *         If the provided {@code id} cannot be parsed by {@link Long#parseLong(String)}
     *
     * @return Possibly-null {@link TextChannel TextChannel} with matching id.
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    public EnumSet<Permission> getOldAllow()
    {
        return Permission.getPermissions(oldAllow);
    }","/**
     * The old allowed permissions
     *
     * @return The old allowed permissions
     */",net.dv8tion.jda.api.events.guild.override
"@Nonnull
    default Guild getGuild()
    {
        return getPermissionOverride().getGuild();
    }","/**
     * The {@link net.dv8tion.jda.api.entities.Guild Guild} this Manager's
     * {@link GuildChannel GuildChannel} is in.
     * <br>This is logically the same as calling {@code getPermissionOverride().getGuild()}
     *
     * @return The parent {@link net.dv8tion.jda.api.entities.Guild Guild}
     */",net.dv8tion.jda.api.managers
"Map<Integer, List<Vector2D[]>> getDatasetForRecognition(Map<Integer, String> gestureNameMapping);","/**
     * Get a copy all feature vectors for all gestures.
     * <p>
     * Useful for template match
     *
     * @param gestureNameMapping
     *            map for int to string
     * @return the {@link Map} of all gestures data
     */",jestures.core.serialization
"public static long getUnsignedLong(@Nonnull DataArray root, @Nonnull String path)
    {
        Long longValue = get(root, path, DataObject::getUnsignedLong, DataArray::getUnsignedLong);
        if (longValue == null)
            throw pathError(path, ""unsigned long"");
        return longValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataArray}.
     * <br>If the resulting value is a string, this will parse the string using {@link Long#parseUnsignedLong(String)}.
     *
     * @param  root
     *         The root data array, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with an index element, such as {@code ""[0]""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The unsigned long value at the given path
     */",net.dv8tion.jda.api.utils.data
"@Nonnull
    ForumPostAction setTags(@Nonnull Collection<? extends ForumTagSnowflake> tags);","/**
     * Configures that tags which should be applied to the new post.
     * <br>Some forums require setting at least one tag.
     *
     * @param  tags
     *         Up to {@value ForumChannel#MAX_POST_TAGS} tags to apply
     *
     * @throws IllegalArgumentException
     *         If null is provided or more than {@value ForumChannel#MAX_POST_TAGS} tags are provided,
     *         or if at least one is {@link ForumChannel#isTagRequired() required} and none were provided.
     *
     * @return The current ForumPostAction for chaining convenience
     *
     * @see    ForumTagSnowflake#fromId(long)
     */",net.dv8tion.jda.api.requests.restaction
"public InteractionHandler withFollowup(Function<InteractionResponse, Publisher<?>> followupHandler) {
        return new FollowupInteractionHandler(responseData, followupHandler);
    }","/**
     * Create an interaction handler that can have additional behavior after an interaction is acknowledged. The
     * additional behavior is supplied a reactive sequence and will be subscribed for the duration of the interaction
     * token.
     *
     * @param followupHandler the function to retrieve a sequence from an interaction, for followup actions
     * @return this handler with the included followup actions
     */",discord4j.rest.interaction
"public Flux<CategorizableChannel> getChannels(EntityRetrievalStrategy retrievalStrategy) {
        return getGuild(retrievalStrategy)
                .flatMapMany(guild -> guild.getChannels(retrievalStrategy))
                .ofType(CategorizableChannel.class)
                .filter(channel -> channel.getCategoryId().map(getId()::equals).orElse(false));
    }","/**
     * Requests to retrieve the channels residing in this category, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the channels
     * @return A {@link Flux} that continually emits the {@link CategorizableChannel channels} residing in this category. If an
     * error is received, it is emitted through the {@code Flux}.
     */",discord4j.core.object.entity.channel
"public Possible<Snowflake> getThreadId() {
        return this.threadId;
    }","/**
     * Get the thread id within the webhook's channel.
     *
     * @return The thread id.
     */",discord4j.core.spec.legacy
"@Nullable
    default T getElementById(@Nonnull String id)
    {
        return getElementById(MiscUtil.parseSnowflake(id));
    }","/**
     * Retrieves the entity represented by the provided ID.
     *
     * @param  id
     *         The ID of the entity
     *
     * @throws java.lang.NumberFormatException
     *         If the provided String is {@code null} or
     *         cannot be resolved to an unsigned long id
     *
     * @return Possibly-null entity for the specified ID
     */",net.dv8tion.jda.api.utils.cache
"public static final Route REACTION_CREATE = Route.put(""/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me"");","/**
     * Create a reaction for the message. This endpoint requires the 'READ_MESSAGE_HISTORY' permission to be present on
     * the current user. Additionally, if nobody else has reacted to the message using this emoji, this endpoint
     * requires the 'ADD_REACTIONS' permission to be present on the current user. Returns a 204 empty response on
     * success.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#create-reaction"">
     * https://discord.com/developers/docs/resources/channel#create-reaction</a>
     */",discord4j.rest.route
"@Nonnull
    @CheckReturnValue
    ChannelAction<NewsChannel> createNewsChannel(@Nonnull String name);","/**
     * Creates a new {@link net.dv8tion.jda.api.entities.channel.concrete.NewsChannel NewsChannel} with this Category as parent.
     * For this to be successful, the logged in account has to have the
     * {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission in this Category.
     *
     * <p>This will copy all {@link net.dv8tion.jda.api.entities.PermissionOverride PermissionOverrides} of this Category!
     * Unless the bot is unable to sync it with this category due to permission escalation.
     * See {@link IPermissionHolder#canSync(IPermissionContainer, IPermissionContainer)} for details.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} caused by
     * the returned {@link net.dv8tion.jda.api.requests.RestAction RestAction} include the following:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_PERMISSIONS MISSING_PERMISSIONS}
     *     <br>The channel could not be created due to a permission discrepancy</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>The {@link net.dv8tion.jda.api.Permission#VIEW_CHANNEL VIEW_CHANNEL} permission was removed</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MAX_CHANNELS MAX_CHANNELS}
     *     <br>The maximum number of channels were exceeded</li>
     * </ul>
     *
     * @param  name
     *         The name of the NewsChannel to create (up to {@value Channel#MAX_NAME_LENGTH} characters)
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the logged in account does not have the {@link net.dv8tion.jda.api.Permission#MANAGE_CHANNEL} permission
     * @throws IllegalArgumentException
     *         If the provided name is {@code null}, empty, or longer than {@value Channel#MAX_NAME_LENGTH} characters
     *
     * @return A specific {@link ChannelAction ChannelAction}
     *         <br>This action allows to set fields for the new NewsChannel before creating it
     */",net.dv8tion.jda.api.entities.channel.concrete
"public LegacyTextChannelCreateSpec setParentId(@Nullable Snowflake parentId) {
        requestBuilder.parentId(parentId == null ? Possible.absent() : Possible.of(parentId.asString()));
        return this;
    }","/**
     * Sets the identifier of the parent category of the created {@link TextChannel}.
     *
     * @param parentId The parent category identifier.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    public Guild.MFALevel getOldMFALevel()
    {
        return getOldValue();
    }","/**
     * The old {@link net.dv8tion.jda.api.entities.Guild.MFALevel MFALevel}
     *
     * @return The old MFALevel
     */",net.dv8tion.jda.api.events.guild.update
"static MemberRequestFilter withLargeGuilds() {
        return data -> Mono.just(data.large());
    }","/**
     * Request members from large guilds.
     *
     * @return a {@link MemberRequestFilter} requesting members from large guilds
     */",discord4j.core.shard
"public int getCount() {
        return count;
    }","/**
     * Return the shard count represented by this {@link ShardInfo}.
     *
     * @return the number of shards
     */",discord4j.gateway
"@Nullable
    EmojiUnion getEmoji();","/**
     * The emoji attached to this button.
     * <br>This can be either {@link Emoji.Type#UNICODE unicode} or {@link Emoji.Type#CUSTOM custom}.
     *
     * <p>You can use {@link #withEmoji(Emoji)} to create a button with an Emoji.
     *
     * @return {@link Emoji} for this button
     */",net.dv8tion.jda.api.interactions.components.buttons
"public boolean isSuccess()
    {
        return error == null;
    }","/**
     * True if this result is a success.
     * <br>Use {@link #get()} or {@link #map(Function)} to handle success values.
     *
     * @return True, if this is a successful result
     */",net.dv8tion.jda.api.utils
"@Nonnull
        public Builder<E> timeout(@Nonnull Duration timeout)
        {
            return timeout(timeout, null);
        }","/**
         * Sets the timeout duration, after which the event is no longer listener for.
         *
         * @param  timeout
         *         The duration after which the event is no longer listener for
         *
         * @throws IllegalArgumentException
         *         If the timeout is null
         *
         * @return This instance for chaining convenience
         */",net.dv8tion.jda.api.utils
"@Nullable
    public ImageProxy getNewBanner()
    {
        final String newBannerUrl = getNewBannerUrl();
        return newBannerUrl == null ? null : new ImageProxy(newBannerUrl);
    }","/**
     * Returns an {@link ImageProxy} for this guild's new banner.
     *
     * @return Possibly-null {@link ImageProxy} of this guild's new banner
     *
     * @see    #getNewBannerUrl()
     */",net.dv8tion.jda.api.events.guild.update
"public Builder httpClient(HttpClient httpClient) {
            this.httpClient = httpClient;
            return this;
        }","/**
         * Sets the underlying {@link HttpClient} to use. A default can be created from
         * {@link ReactorResources#DEFAULT_HTTP_CLIENT}.
         *
         * @return This builder, for chaining.
         */",discord4j.common
"default int getPositionInCategory()
    {
        Category parent = getParentCategory();
        return parent == null ? -1 : parent.getChannels().indexOf(this);
    }","/**
     * Computes the relative position of this channel in the {@link #getParentCategory() parent category}.
     * <br>This is effectively the same as {@code getParentCategory().getChannels().indexOf(channel)}.
     *
     * @return The relative position in the parent category, or {@code -1} if no parent is set
     */",net.dv8tion.jda.api.entities.channel.attribute
"public static Flux<Role> orderRoles(Flux<Role> roles) {
        return roles.sort(OrderUtil.ROLE_ORDER);
    }","/**
     * Sorts {@link Role roles} according to visual ordering in Discord. Roles at the bottom of the list are first. This
     * sorts roles according to {@link #ROLE_ORDER}.
     * <p>
     * This function can be used with {@link Flux#transform(Function)} for better chaining:
     * <pre>
     * {@code
     * guild.getRoles()
     *   .transform(OrderUtil::orderRoles)
     * }
     * </pre>
     *
     * @param roles The roles to sort.
     * @return The sorted roles.
     */",discord4j.core.util
"@Experimental
    public static ActionMapper mergeFirst(Collection<ActionMapper> mappers) {
        Objects.requireNonNull(mappers);
        return new ActionMapper(mappers.stream()
                .flatMap(mapper -> mapper.mappings.entrySet().stream())
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (a, b) -> a)));
    }","/**
     * Aggregates a collection of {@link ActionMapper ActionMappers} into a single instance. Mappers with matching
     * actions will be merged by preserving the first declared one.
     *
     * @param mappers the mappers to aggregate
     * @return an aggregated {@link ActionMapper}, merging any overlap by preserving the first mapper by collection
     * order
     */",discord4j.common.store.api
"@Override
    public CompletableFuture<Optional<MongoConnectionHandler>> connect() {
        return isConnected().thenApplyAsync(connected -> {
            if (connected) {
                if (this.mongoConnectionHandler == null)
                    return Optional.empty();

                return Optional.of(this.mongoConnectionHandler);
            }

            this.mongoClient = MongoClients.create(this.mongoConnectionConfig.getMongoClientSettings());
            this.mongoDatabase = mongoClient.getDatabase(this.mongoConnectionConfig.getConnectionData().getDatabase());

            this.mongoConnectionHandler = new MongoConnectionHandler(this);
            return Optional.of(this.mongoConnectionHandler);
        });
    }",/** {@inheritDoc} */,io.github.heliumdioxid.database.mongo
"public Mono<User> getUser(EntityRetrievalStrategy retrievalStrategy) {
        return Mono.justOrEmpty(getMemberId())
                .flatMap(id -> gateway.withRetrievalStrategy(retrievalStrategy).getUserById(id));
    }","/**
     * Requests to retrieve the user this overwrite is associated to, if present, using the given retrieval strategy.
     *
     * @param retrievalStrategy the strategy to use to get the user
     * @return A {@link Mono} where, upon successful completion, emits the {@link User} this overwrite is associated to,
     * if present. If an error is received, it is emitted through the {@code Mono}.
     */",discord4j.core.object
"@Nonnull
    @CheckReturnValue
    R setAllowedMentions(@Nullable Collection<Message.MentionType> allowedMentions);","/**
     * Sets the {@link net.dv8tion.jda.api.entities.Message.MentionType MentionTypes} that should be parsed.
     * <br>If a message is sent with an empty Set of MentionTypes, then it will not ping any User, Role or {@code @everyone}/{@code @here},
     * while still showing up as mention tag.
     *
     * <p>If {@code null} is provided to this method, then all Types will be mentionable
     * (unless whitelisting via one of the {@code mention*} methods is used).
     *
     * <p>Note: A default for this can be set using {@link #setDefaultMentions(Collection) AllowedMentions.setDefaultMentions(Collection)}.
     *
     * @param  allowedMentions
     *         MentionTypes that are allowed to being parsed and mentioned.
     *         All other mention types will not be mentioned by this message.
     *         You can pass {@code null} or {@code EnumSet.allOf(MentionType.class)} to allow all mentions.
     *
     * @return The same instance for chaining
     */",net.dv8tion.jda.api.utils.messages
"@Nonnull
    @CheckReturnValue
    @SuppressWarnings(""unchecked"")
    public <U> Result<U> map(@Nonnull Function<? super T, ? extends U> function)
    {
        Checks.notNull(function, ""Function"");
        if (isSuccess())
            return Result.defer(() -> function.apply(value));
        return (Result<U>) this;
    }","/**
     * Composite function to convert a result value to another value.
     * <br>This will only apply the function is {@link #isSuccess()} is true.
     *
     * @param  function
     *         The conversion function
     * @param  <U>
     *         The result type
     *
     * @throws IllegalArgumentException
     *         If the provided function is null
     *
     * @return The mapped result
     *
     * @see    #flatMap(Function)
     */",net.dv8tion.jda.api.utils
"public LegacyGuildEditSpec setRulesChannelId(@Nullable Snowflake rulesChannelId) {
        requestBuilder.rulesChannelId(Possible.of(Optional.ofNullable(rulesChannelId).map(Snowflake::asString)));
        return this;
    }","/**
     * Sets the id of the channel where Community guilds display rules and/or guidelines.
     *
     * @param rulesChannelId The id of the channel where Community guilds display rules and/or guidelines.
     * @return This spec.
     */",discord4j.core.spec.legacy
"@Nonnull
    public DataObject getPayload()
    {
        return data.getObject(""d"");
    }","/**
     * The payload of the package.
     *
     * @return The payload as a {@link net.dv8tion.jda.api.utils.data.DataObject} instance
     */",net.dv8tion.jda.api.events
"String sanitized = MarkdownSanitizer.escape(input, ~MarkdownSanitizer.BOLD);","/**
     * Escapes already existing bold regions in the input
     * and applies bold formatting to the entire string.
     * <br>The resulting string will be {@code ""**"" + escaped(input) + ""**""}.
     *
     * @param  input
     *         The input to bold
     *
     * @return The resulting output
     */",net.dv8tion.jda.api.utils
"public Map<Snowflake, Role> getRoles() {
        return data.roles().toOptional()
                .map(map -> map.entrySet().stream()
                        .map(entry -> Tuples.of(Snowflake.of(entry.getKey()), new Role(gateway, entry.getValue(),
                                Objects.requireNonNull(guildId))))
                        .collect(Collectors.toMap(Tuple2::getT1, Tuple2::getT2)))
                .orElseGet(Collections::emptyMap);
    }","/**
     * Gets a map containing the resolved roles associated by their IDs
     *
     * @return the resolved roles
     */",discord4j.core.object.command
"@Nonnull
    @CheckReturnValue
    M removePermissionOverride(long id);","/**
     * Removes the {@link PermissionOverride PermissionOverride} for the specified
     * member or role ID. If no override existed for this member or role, this does nothing.
     *
     * @param  id
     *         The ID of the permission holder
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have {@link Permission#MANAGE_PERMISSIONS Permission.MANAGE_PERMISSIONS}
     *         in this channel
     *
     * @return ChannelManager for chaining convenience
     */",net.dv8tion.jda.api.managers.channel.attribute
"static DefaultShardingStrategy.Builder builder() {
        return new DefaultShardingStrategy.Builder();
    }","/**
     * Return a builder to customize the {@link ShardingStrategy} using commonly used parameters.
     *
     * @return a {@link DefaultShardingStrategy.Builder} to create a custom {@link ShardingStrategy}
     */",discord4j.core.shard
"@Nonnull
    @CheckReturnValue
    default ReplyCallbackAction replyFiles(@Nonnull FileUpload... files)
    {
        Checks.notEmpty(files, ""File Collection"");
        Checks.noneNull(files, ""FileUpload"");
        return deferReply().setFiles(files);
    }","/**
     * Reply to this interaction and acknowledge it.
     * <br>This will send a reply message for this interaction.
     * You can use {@link ReplyCallbackAction#setEphemeral(boolean) setEphemeral(true)} to only let the target user see the message.
     * Replies are non-ephemeral by default.
     *
     * <p><b>You only have 3 seconds to acknowledge an interaction!</b>
     * <br>When the acknowledgement is sent after the interaction expired, you will receive {@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION ErrorResponse.UNKNOWN_INTERACTION}.
     * <p>If your handling can take longer than 3 seconds, due to various rate limits or other conditions, you should use {@link #deferReply()} instead.
     *
     * <p><b>Resource Handling Note:</b> Once the request is handed off to the requester, for example when you call {@link RestAction#queue()},
     * the requester will automatically clean up all opened files by itself. You are only responsible to close them yourself if it is never handed off properly.
     * For instance, if an exception occurs after using {@link FileUpload#fromData(File)}, before calling {@link RestAction#queue()}.
     * You can safely use a try-with-resources to handle this, since {@link FileUpload#close()} becomes ineffective once the request is handed off.
     *
     * <p>Possible {@link net.dv8tion.jda.api.requests.ErrorResponse ErrorResponses} include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_INTERACTION UNKNOWN_INTERACTION}
     *     <br>If the interaction has already been acknowledged or timed out</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_AUTOMOD MESSAGE_BLOCKED_BY_AUTOMOD}
     *     <br>If this message was blocked by an {@link net.dv8tion.jda.api.entities.automod.AutoModRule AutoModRule}</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER MESSAGE_BLOCKED_BY_HARMFUL_LINK_FILTER}
     *     <br>If this message was blocked by the harmful link filter</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#REQUEST_ENTITY_TOO_LARGE REQUEST_ENTITY_TOO_LARGE}
     *     <br>If the total sum of uploaded bytes exceeds the guild's {@link Guild#getMaxFileSize() upload limit}</li>
     * </ul>
     *
     * @param  files
     *         The {@link FileUpload FileUploads} to attach to the message
     *
     * @throws IllegalArgumentException
     *         If null is provided
     *
     * @return {@link ReplyCallbackAction}
     *
     * @see    FileUpload#fromData(InputStream, String)
     */",net.dv8tion.jda.api.interactions.callbacks
"public Optional<String> getAvatar() {
        return Possible.flatOpt(data.avatar());
    }","/**
     * Gets the avatar hash of this member, if provided.
     *
     * @return The avatar hash, if present.
     */",discord4j.core.object.command
"public static long getLong(@Nonnull DataObject root, @Nonnull String path)
    {
        Long longValue = get(root, path, DataObject::getLong, DataArray::getLong);
        if (longValue == null)
            pathError(path, ""long"");
        return longValue;
    }","/**
     * Parses the given {@code path} and finds the appropriate value within this {@link DataObject}.
     * <br>If the resulting value is a string, this will parse the string using {@link Long#parseLong(String)}.
     *
     * @param  root
     *         The root data object, which is the top level accessor.
     *         <br>The very first element in the path corresponds to a field of that name within this root object.
     * @param  path
     *         The path of the value, in accordance with the described grammar by {@link DataPath}.
     *         This must start with a name element, such as {@code ""foo""}.
     *
     * @throws ParsingException
     *         If the path is invalid or resolving fails due to missing elements
     * @throws IndexOutOfBoundsException
     *         If any of the elements in the path refer to an array index that is out of bounds
     * @throws IllegalArgumentException
     *         If null is provided or the path is empty
     *
     * @return The long value at the given path
     */",net.dv8tion.jda.api.utils.data
<@Unmodifiable List<Webhook>> retrieveWebhooks();,"/**
     * Retrieves the {@link net.dv8tion.jda.api.entities.Webhook Webhooks} attached to this channel.
     *
     * <p>Possible ErrorResponses include:
     * <ul>
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_CHANNEL UNKNOWN_CHANNEL}
     *     <br>if this channel was deleted</li>
     *
     *     <li>{@link net.dv8tion.jda.api.requests.ErrorResponse#MISSING_ACCESS MISSING_ACCESS}
     *     <br>if we were removed from the guild</li>
     * </ul>
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have
     *         {@link net.dv8tion.jda.api.Permission#MANAGE_WEBHOOKS Permission.MANAGE_WEBHOOKS} in this channel.
     *
     * @return {@link net.dv8tion.jda.api.requests.RestAction} - Type: List{@literal <}{@link net.dv8tion.jda.api.entities.Webhook Webhook}{@literal >}
     *         <br>Retrieved an immutable list of Webhooks attached to this channel
     */",net.dv8tion.jda.api.entities.channel.attribute
final Object status = request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);,"/**
	 * Handle errors produced by the app based upon the returned status code
	 * @param request
	 * @return error view according to statusCode
	 */",com.pfa.app.controller.web
"@Nonnull
    @CheckReturnValue
    default RoleManager setPermissions(@Nonnull Permission... permissions)
    {
        Checks.notNull(permissions, ""Permissions"");
        return setPermissions(Arrays.asList(permissions));
    }","/**
     * Sets the {@link net.dv8tion.jda.api.Permission Permissions} of the selected {@link net.dv8tion.jda.api.entities.Role Role}.
     *
     * <p>Permissions may only include already present Permissions for the currently logged in account.
     * <br>You are unable to give permissions you don't have!
     *
     * @param  permissions
     *         The new permission for the selected {@link net.dv8tion.jda.api.entities.Role Role}
     *
     * @throws net.dv8tion.jda.api.exceptions.InsufficientPermissionException
     *         If the currently logged in account does not have permission to apply one of the specified permissions
     * @throws java.lang.IllegalArgumentException
     *         If any of the provided values is {@code null}
     *
     * @return RoleManager for chaining convenience
     *
     * @see    #setPermissions(Collection)
     * @see    #setPermissions(long)
     * @see    net.dv8tion.jda.api.Permission#getRaw(net.dv8tion.jda.api.Permission...) Permission.getRaw(Permission...)
     */",net.dv8tion.jda.api.managers
"public LegacyEmbedCreateSpec setFooter(String text, @Nullable String iconUrl) {
        requestBuilder.footer(EmbedFooterData.builder()
                .text(text)
                .iconUrl(iconUrl == null ? Possible.absent() : Possible.of(iconUrl))
                .build());
        return this;
    }","/**
     * Sets the footer of the embed.
     *
     * @param text The footer text.
     * @param iconUrl An icon URL to display in the footer.
     * @return This spec.
     */",discord4j.core.spec.legacy
"public RestMember member(Snowflake memberId) {
        return RestMember.create(restClient, id, memberId.asLong());
    }","/**
     * Return a {@link RestMember} representation under this guild. This method does not perform any API request.
     *
     * @param memberId the entity ID
     * @return a {@code RestMember} with the given ID, under this guild
     */",discord4j.rest.entity
"public AuditLogEntry getAuditLogEntry() {
        return this.auditLogEntry;
    }","/**
     * Get the {@link AuditLogEntry} related to this event.
     *
     * @return a {@link AuditLogEntry}.
     */",discord4j.core.event.domain
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction addChoices(@Nonnull Command.Choice... choices)
    {
        Checks.noneNull(choices, ""Choices"");
        return addChoices(Arrays.asList(choices));
    }","/**
     * Add up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * @param  choices
     *         The choice suggestions to present to the user, 0-{@link OptionData#MAX_CHOICES} choices
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If any of the choice names are empty or longer than {@value OptionData#MAX_CHOICE_NAME_LENGTH}</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the numeric value of any of the choices is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *             <li>If the string value of any of the choices is empty or longer than {@value OptionData#MAX_CHOICE_VALUE_LENGTH}</li>
     *         </ul>
     *
     * @return The same callback action, for chaining convenience
     */",net.dv8tion.jda.api.requests.restaction.interactions
"public RecognitionSettingsImpl() { // NOPMD
    }","/**
     *
     * The constructor for the class.
     */",jestures.core.recognition.gesturedata
"@Nonnull
    @CheckReturnValue
    default AutoCompleteCallbackAction replyChoiceDoubles(@Nonnull double... choices)
    {
        return replyChoices(Arrays.stream(choices)
                .mapToObj(it -> new Command.Choice(String.valueOf(it), it))
                .collect(Collectors.toList()));
    }","/**
     * Reply with up to {@value OptionData#MAX_CHOICES} choices which can be picked from by the user.
     * <br>The user may continue writing inputs instead of using one of your choices.
     *
     * <p>The string values of the provided doubles will be used as value and name for the {@link net.dv8tion.jda.api.interactions.commands.Command.Choice Choices}.
     *
     * @param  choices
     *         The choice suggestions to present to the user
     *
     * @throws IllegalArgumentException
     *         <ul>
     *             <li>If {@code null} is provided</li>
     *             <li>If more than {@value OptionData#MAX_CHOICES} choices are added</li>
     *             <li>If the option type is incompatible with the choice type</li>
     *             <li>If the numeric value of any of the choices is not between {@value OptionData#MIN_NEGATIVE_NUMBER} and {@value OptionData#MAX_POSITIVE_NUMBER}</li>
     *         </ul>
     *
     * @return {@link AutoCompleteCallbackAction}
     */",net.dv8tion.jda.api.interactions.callbacks
"public static final Route MESSAGES_PINNED_GET = Route.get(""/channels/{channel.id}/pins"");","/**
     * Returns all pinned messages in the channel as an array of message objects.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/channel#get-pinned-messages"">
     * https://discord.com/developers/docs/resources/channel#get-pinned-messages</a>
     */",discord4j.rest.route
"public static final Route GUILD_INTEGRATIONS_GET = Route.get(""/guilds/{guild.id}/integrations"");","/**
     * Returns a list of integration objects for the guild. Requires the 'MANAGE_GUILD' permission.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/guild#get-guild-integrations"">
     * https://discord.com/developers/docs/resources/guild#get-guild-integrations</a>
     */",discord4j.rest.route
"@Override
        public String toString() {
            return ""[retry_resume_started]"";
        }","/**
     * Propagated when a reconnection attempt with RESUME has started.
     */",discord4j.gateway
"public Optional<ApplicationCommand.Type> getApplicationCommandType() {
        return data.type().toOptional().map(ApplicationCommand.Type::of);
    }","/**
     * Gets the type of the invoked command.
     *
     * @return The type of the invoked command.
     */",discord4j.core.object.command
"public Optional<List<ThreadMember>> getOld() {
        return Optional.ofNullable(old);
    }","/**
     * Returns the old list of members in the thread, if present.
     *
     * @return a list of {@link ThreadMember} in the thread before the event, if present
     */",discord4j.core.event.domain.thread
"public Locale getLocale() {
		if (root instanceof com.sun.tools.javadoc.RootDocImpl)
			return ((com.sun.tools.javadoc.RootDocImpl) root).getLocale();
		else
			return Locale.getDefault();
	}","/**
	 * {@inheritDoc}
	 */",net.winroad.htmldoclet4jdk8
"public Mono<RoleData> edit(final RoleModifyRequest request, @Nullable String reason) {
        return restClient.getGuildService().modifyGuildRole(guildId, id, request, reason);
    }","/**
     * Requests to edit this role.
     *
     * @param request A {@link RoleModifyRequest} to parameterize this request.
     * @param reason The reason, if present.
     * @return A {@link Mono} where, upon successful completion, emits the edited {@link RoleData}. If an error
     * is received, it is emitted through the {@code Mono}.
     */",discord4j.rest.entity
"public boolean isMentionable()
    {
        return this.mentionable;
    }","/**
     * Whether or not this Role is mentionable
     *
     * @return True, if Role is mentionable.
     */",net.dv8tion.jda.api.entities.templates
"default MemberRequestFilter as(Function<Mono<Boolean>, Mono<Boolean>> transformer) {
        return data -> apply(data).as(transformer);
    }","/**
     * Transform this current {@link MemberRequestFilter} by applying the given {@link Function} to derive a new
     * {@link Mono} of {@code boolean}.
     *
     * @param transformer the function to transform this {@link MemberRequestFilter}
     * @return a transformed {@link MemberRequestFilter}
     */",discord4j.core.shard
"public Publisher<?> onDisconnect(DisconnectEvent event) {
        return Mono.empty();
    }","/**
     * Invoked when the bot has disconnected from the Gateway.
     *
     * @param event the event instance
     * @return a {@link Publisher} that completes when this listener has done processing the event, for example,
     * returning any {@link Mono}, {@link Flux} or synchronous code using {@link Mono#fromRunnable(Runnable)}.
     */",discord4j.core.event
"public final Integer getLevelCost(final Integer level) {
        for (Integer lv : getCostPerLevel().keySet()) {
            if (level.equals(lv)) return getCostPerLevel().get(lv);
        }
        return 0;
    }","/**
     * Returns level cost
     *
     * @param level level you want to get cost
     * @return level cost
     */",com.massivecraft.factions.addon.upgradeaddon
"@Nullable
    default <T extends C> T getChannelById(@Nonnull Class<T> type, @Nonnull String id)
    {
        return getChannelById(type, MiscUtil.parseSnowflake(id));
    }","/**
     * Get a channel of the specified type by id.
     *
     * <p>This will automatically check for all channel types and cast to the specified class.
     * If a channel with the specified id does not exist,
     * or exists but is not an instance of the provided class, this returns null.
     *
     * @param  type
     *         {@link Class} of a channel type
     * @param  id
     *         The snowflake id of the channel
     * @param  <T>
     *         The type argument for the class
     *
     * @throws IllegalArgumentException
     *         If null is provided, or the id is not a valid snowflake
     *
     * @return The casted channel, if it exists and is assignable to the provided class, or null
     */",net.dv8tion.jda.api.entities.channel.attribute
"@Nonnull
    static PresetKeywordTriggerConfig presetKeywordFilter(@Nonnull AutoModRule.KeywordPreset... presets)
    {
        return new PresetKeywordTriggerConfig().enablePresets(presets);
    }","/**
     * Trigger on keywords from predefined lists.
     *
     * @param  presets
     *         The presets to enable
     *
     * @throws IllegalArgumentException
     *         If null or {@link KeywordPreset#UNKNOWN} is provided
     *
     * @return {@link PresetKeywordTriggerConfig}
     */",net.dv8tion.jda.api.entities.automod.build
"@Nonnull
    public static DefaultMemberPermissions enabledFor(long permissions)
    {
        return new DefaultMemberPermissions(permissions);
    }","/**
     * Returns a DefaultMemberPermissions instance with the predefined permissions a member must have to see and access a command.
     *
     * <br><b>If the passed permission offset is 0, this returns {@link DefaultMemberPermissions#ENABLED ENABLED}</b>
     *
     * @param  permissions
     *         Raw permission bitset
     *
     * @return DefaultMemberPermissions instance with the predefined permissions
     */",net.dv8tion.jda.api.interactions.commands
"public User getCreator() {
        return new User(gateway, data.creator());
    }","/**
     * Gets the user who created the template.
     *
     * @return The user who created the template.
     */",discord4j.core.object
"public List<Activity> getActivities() {
        return data.activities().stream().map(Activity::new).collect(Collectors.toList());
    }","/**
     * Get the user's current activities.
     *
     * @return The user's current activities.
     */",discord4j.core.object.presence
"@Nullable
    Channel getChannel();","/**
     * The channel this interaction happened in.
     *
     * @return The channel or null if the channel is not provided
     */",net.dv8tion.jda.api.interactions
"public static final Route APPLICATION_EMOJI_GET = Route.get(""/applications/{application.id}/emojis/{emoji.id}"");","/**
     * Returns an emoji object for the given application and emoji IDs. Includes the user field.
     *
     * @see <a href=""https://discord.com/developers/docs/resources/emoji#get-application-emoji"">https://discord.com/developers/docs/resources/emoji#get-application-emoji</a>
     */",discord4j.rest.route
